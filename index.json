{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Explore the APIs | Legerity",
    "keywords": "Explore the APIs Here you'll find all of the generated code documentation for the Legerity projects, similar to what you might find on Microsoft Docs! This documentation is designed to show you how each component of Legerity is constructed and provide a reference for you when building your UI test projects."
  },
  "api/Legerity.Android.AndroidAppManagerOptions.html": {
    "href": "api/Legerity.Android.AndroidAppManagerOptions.html",
    "title": "Class AndroidAppManagerOptions | Legerity",
    "keywords": "Class AndroidAppManagerOptions Defines a specific AppiumManagerOptions for an Android application. Inheritance System.Object AppManagerOptions AppiumManagerOptions AndroidAppManagerOptions Inherited Members AppiumManagerOptions.AdditionalOptions AppiumManagerOptions.AppiumOptions AppManagerOptions.DriverUri AppManagerOptions.ImplicitWait AppManagerOptions.DriverOptions Namespace : Legerity.Android Assembly : Legerity.Core.dll Syntax public class AndroidAppManagerOptions : AppiumManagerOptions Constructors | Improve this Doc View Source AndroidAppManagerOptions() Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions() | Improve this Doc View Source AndroidAppManagerOptions(String) Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions(string appPath) Parameters Type Name Description System.String appPath The path of the application under test, e.g. c:/users/legerity/source/myapp/com.instagram.android.apk. | Improve this Doc View Source AndroidAppManagerOptions(String, String) Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions(string appId, string appActivity) Parameters Type Name Description System.String appId The ID of the application under test, e.g. com.instagram.android. System.String appActivity The activity of the application to start, e.g. com.instagram.android.activity.MainTabActivity. | Improve this Doc View Source AndroidAppManagerOptions(String, String, String, String, String, String, (String, Object)[]) Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions(string appId, string appActivity, string appPath, string osVersion, string deviceName, string deviceId, params (string, object)[] additionalOptions) Parameters Type Name Description System.String appId The ID of the application under test, e.g. com.instagram.android. System.String appActivity The activity of the application to start, e.g. com.instagram.android.activity.MainTabActivity. System.String appPath The path of the application under test, e.g. c:/users/legerity/source/myapp/com.instagram.android.apk. System.String osVersion The version of Android to run the application on. System.String deviceName The name of the Android device to run the application on. System.String deviceId The ID of the Android device to run the application on. System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . | Improve this Doc View Source AndroidAppManagerOptions(String, String, (String, Object)[]) Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions(string appId, string appActivity, params (string, object)[] additionalOptions) Parameters Type Name Description System.String appId The ID of the application under test, e.g. com.instagram.android. System.String appActivity The activity of the application to start, e.g. com.instagram.android.activity.MainTabActivity. System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . | Improve this Doc View Source AndroidAppManagerOptions(String, (String, Object)[]) Initializes a new instance of the AndroidAppManagerOptions class. Declaration public AndroidAppManagerOptions(string appPath, params (string, object)[] additionalOptions) Parameters Type Name Description System.String appPath The path of the application under test, e.g. c:/users/legerity/source/myapp/com.instagram.android.apk. System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . Properties | Improve this Doc View Source AppActivity Gets or sets the activity of the application to start, e.g. com.instagram.android.activity.MainTabActivity. Declaration public string AppActivity { get; set; } Property Value Type Description System.String | Improve this Doc View Source AppId Gets or sets the ID of the application under test. Declaration public string AppId { get; set; } Property Value Type Description System.String | Improve this Doc View Source AppPath Gets or sets the path of the application under test, e.g. c:/users/legerity/source/myapp/com.instagram.android.apk. Declaration public string AppPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source DeviceId Gets or sets the ID of the Android device to run the application on. Declaration public string DeviceId { get; set; } Property Value Type Description System.String | Improve this Doc View Source DeviceName Gets or sets the name of the Android device to run the application on. Declaration public string DeviceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source LaunchAppiumServer Gets or sets a value indicating whether to launch the Appium server instance. Declaration public bool LaunchAppiumServer { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source OSVersion Gets or sets the version of Android to run the application on. Declaration public string OSVersion { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Configure() Configures the AppiumOptions with the specified additional options. Declaration public override void Configure() Overrides AppiumManagerOptions.Configure() | Improve this Doc View Source Configure((String, Object)[]) Configures the with the specified additional options. Declaration public void Configure((string, object)[] additionalOptions) Parameters Type Name Description System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides AppManagerOptions.ToString()"
  },
  "api/Legerity.Android.AndroidByExtras.html": {
    "href": "api/Legerity.Android.AndroidByExtras.html",
    "title": "Class AndroidByExtras | Legerity",
    "keywords": "Class AndroidByExtras Defines a collection of extra locator constraints for . Inheritance System.Object AndroidByExtras Namespace : Legerity.Android Assembly : Legerity.Android.dll Syntax public static class AndroidByExtras : object Methods | Improve this Doc View Source ContentDescription(String) Gets a mechanism to find elements by an Android content description. Declaration public static By ContentDescription(string contentDesc) Parameters Type Name Description System.String contentDesc The content description to match exactly on. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source PartialContentDescription(String) Gets a mechanism to find elements by an Android partial content description. Declaration public static By PartialContentDescription(string contentDesc) Parameters Type Name Description System.String contentDesc The partial content description to match on. Returns Type Description By A object the driver can use to find elements."
  },
  "api/Legerity.Android.Elements.AndroidElementWrapper.html": {
    "href": "api/Legerity.Android.Elements.AndroidElementWrapper.html",
    "title": "Class AndroidElementWrapper | Legerity",
    "keywords": "Class AndroidElementWrapper Defines an element wrapper for a . Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Button CheckBox DatePicker EditText Spinner Switch TextView View Implements IElementWrapper < AndroidElement > Inherited Members ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements Assembly : Legerity.Android.dll Syntax public class AndroidElementWrapper : ElementWrapper<AndroidElement>, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source AndroidElementWrapper(AndroidElement) Initializes a new instance of the AndroidElementWrapper class. Declaration public AndroidElementWrapper(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source Driver Gets the instance of the Appium driver for the Android application. Declaration public AndroidDriver<AndroidElement> Driver { get; } Property Value Type Description AndroidDriver < AndroidElement > Methods | Improve this Doc View Source VerifyDriverElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration protected void VerifyDriverElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source VerifyDriverElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration protected void VerifyDriverElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AndroidElement to AndroidElementWrapper) Allows conversion of a to the AndroidElementWrapper without direct casting. Declaration public static implicit operator AndroidElementWrapper(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description AndroidElementWrapper The AndroidElementWrapper . | Improve this Doc View Source Implicit(AppiumWebElement to AndroidElementWrapper) Allows conversion of a to the AndroidElementWrapper without direct casting. Declaration public static implicit operator AndroidElementWrapper(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description AndroidElementWrapper The AndroidElementWrapper . | Improve this Doc View Source Implicit(RemoteWebElement to AndroidElementWrapper) Allows conversion of a to the AndroidElementWrapper without direct casting. Declaration public static implicit operator AndroidElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AndroidElementWrapper The AndroidElementWrapper . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.Button.html": {
    "href": "api/Legerity.Android.Elements.Core.Button.html",
    "title": "Class Button | Legerity",
    "keywords": "Class Button Defines a wrapper for the core Android Button control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Button RadioButton ToggleButton Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class Button : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source Button(AndroidElement) Initializes a new instance of the Button class. Declaration public Button(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Operators | Improve this Doc View Source Implicit(AndroidElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(AppiumWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(RemoteWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Button The Button . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.CheckBox.html": {
    "href": "api/Legerity.Android.Elements.Core.CheckBox.html",
    "title": "Class CheckBox | Legerity",
    "keywords": "Class CheckBox Defines a wrapper for the core Android CheckBox control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper CheckBox Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class CheckBox : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source CheckBox(AndroidElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source IsChecked Gets a value indicating whether the check box is in the checked state. Declaration public virtual bool IsChecked { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CheckOff() Checks the check box off. Declaration public virtual void CheckOff() | Improve this Doc View Source CheckOn() Checks the check box on. Declaration public virtual void CheckOn() Operators | Improve this Doc View Source Implicit(AndroidElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description CheckBox The CheckBox . | Improve this Doc View Source Implicit(AppiumWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description CheckBox The CheckBox . | Improve this Doc View Source Implicit(RemoteWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CheckBox The CheckBox . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.DatePicker.html": {
    "href": "api/Legerity.Android.Elements.Core.DatePicker.html",
    "title": "Class DatePicker | Legerity",
    "keywords": "Class DatePicker Defines a wrapper for the core Android DatePicker control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper DatePicker Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class DatePicker : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source DatePicker(AndroidElement) Initializes a new instance of the DatePicker class. Declaration public DatePicker(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source DateTextView Gets the element associated with the date text. This will be in the format, 'ddd, MMM d'. Declaration public virtual TextView DateTextView { get; } Property Value Type Description TextView | Improve this Doc View Source DayPickerView Gets the element associated with the day picker. Declaration public virtual View DayPickerView { get; } Property Value Type Description View | Improve this Doc View Source NextMonthButton Gets the element associated with the next month button. Declaration public virtual Button NextMonthButton { get; } Property Value Type Description Button | Improve this Doc View Source PreviousMonthButton Gets the element associated with the previous month button. Declaration public virtual Button PreviousMonthButton { get; } Property Value Type Description Button | Improve this Doc View Source SelectedDate Gets the selected date/time value. Declaration public virtual DateTime SelectedDate { get; } Property Value Type Description DateTime | Improve this Doc View Source YearTextView Gets the element associated with the year text. This will be in the format, 'YYYY'. Declaration public virtual TextView YearTextView { get; } Property Value Type Description TextView Methods | Improve this Doc View Source SetDate(DateTime) Sets the selected date of the date picker. Declaration public virtual void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set to. Operators | Improve this Doc View Source Implicit(AndroidElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description DatePicker The DatePicker . | Improve this Doc View Source Implicit(AppiumWebElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description DatePicker The DatePicker . | Improve this Doc View Source Implicit(RemoteWebElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description DatePicker The DatePicker . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.EditText.html": {
    "href": "api/Legerity.Android.Elements.Core.EditText.html",
    "title": "Class EditText | Legerity",
    "keywords": "Class EditText Defines a wrapper for the core Android EditText control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper EditText Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class EditText : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source EditText(AndroidElement) Initializes a new instance of the EditText class. Declaration public EditText(AndroidElement element) Parameters Type Name Description AndroidElement element The representing the EditText element. Properties | Improve this Doc View Source Text Gets the text value of the text box. Declaration public virtual string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendText(String) Appends the specified text to the text box. Declaration public virtual void AppendText(string text) Parameters Type Name Description System.String text The text to append. | Improve this Doc View Source ClearText() Clears the text from the text box. Declaration public virtual void ClearText() | Improve this Doc View Source SetText(String) Sets the text of the text box to the specified text. Declaration public virtual void SetText(string text) Parameters Type Name Description System.String text The text to display. Operators | Improve this Doc View Source Implicit(AndroidElement to EditText) Allows conversion of a to the EditText without direct casting. Declaration public static implicit operator EditText(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description EditText The EditText . | Improve this Doc View Source Implicit(AppiumWebElement to EditText) Allows conversion of a to the EditText without direct casting. Declaration public static implicit operator EditText(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description EditText The EditText . | Improve this Doc View Source Implicit(RemoteWebElement to EditText) Allows conversion of a to the EditText without direct casting. Declaration public static implicit operator EditText(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description EditText The EditText . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.html": {
    "href": "api/Legerity.Android.Elements.Core.html",
    "title": "Namespace Legerity.Android.Elements.Core | Legerity",
    "keywords": "Namespace Legerity.Android.Elements.Core Classes Button Defines a wrapper for the core Android Button control. CheckBox Defines a wrapper for the core Android CheckBox control. DatePicker Defines a wrapper for the core Android DatePicker control. EditText Defines a wrapper for the core Android EditText control. RadioButton Defines a wrapper for the core Android RadioButton control. Spinner Defines a wrapper for the core Android Spinner control. Switch Defines a wrapper for the core Android Switch control. TextView Defines a wrapper for the core Android TextView control. ToggleButton Defines a wrapper for the core Android ToggleButton control. View Defines a wrapper for the core Android View base control."
  },
  "api/Legerity.Android.Elements.Core.RadioButton.html": {
    "href": "api/Legerity.Android.Elements.Core.RadioButton.html",
    "title": "Class RadioButton | Legerity",
    "keywords": "Class RadioButton Defines a wrapper for the core Android RadioButton control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Button RadioButton Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class RadioButton : Button, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source RadioButton(AndroidElement) Initializes a new instance of the RadioButton class. Declaration public RadioButton(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source IsSelected Gets a value indicating whether the radio button is selected. Declaration public virtual bool IsSelected { get; } Property Value Type Description System.Boolean Operators | Improve this Doc View Source Implicit(AndroidElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description RadioButton The RadioButton . | Improve this Doc View Source Implicit(AppiumWebElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadioButton The RadioButton . | Improve this Doc View Source Implicit(RemoteWebElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadioButton The RadioButton . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.Spinner.html": {
    "href": "api/Legerity.Android.Elements.Core.Spinner.html",
    "title": "Class Spinner | Legerity",
    "keywords": "Class Spinner Defines a wrapper for the core Android Spinner control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Spinner Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class Spinner : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source Spinner(AndroidElement) Initializes a new instance of the Spinner class. Declaration public Spinner(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source SelectedItem Gets the currently selected item. Declaration public virtual string SelectedItem { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SelectItem(String) Selects an item in the combo-box with the specified item name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item to select. | Improve this Doc View Source SelectItemByPartialName(String) Selects an item in the combo-box with the specified partial item name. Declaration public virtual void SelectItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name match for the item to select. Operators | Improve this Doc View Source Implicit(AndroidElement to Spinner) Allows conversion of a to the Spinner without direct casting. Declaration public static implicit operator Spinner(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description Spinner The Spinner . | Improve this Doc View Source Implicit(AppiumWebElement to Spinner) Allows conversion of a to the Spinner without direct casting. Declaration public static implicit operator Spinner(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Spinner The Spinner . | Improve this Doc View Source Implicit(RemoteWebElement to Spinner) Allows conversion of a to the Spinner without direct casting. Declaration public static implicit operator Spinner(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Spinner The Spinner . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.Switch.html": {
    "href": "api/Legerity.Android.Elements.Core.Switch.html",
    "title": "Class Switch | Legerity",
    "keywords": "Class Switch Defines a wrapper for the core Android Switch control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Switch Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class Switch : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source Switch(AndroidElement) Initializes a new instance of the Switch class. Declaration public Switch(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle switch is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the switch off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the switch on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AndroidElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description Switch The Switch . | Improve this Doc View Source Implicit(AppiumWebElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Switch The Switch . | Improve this Doc View Source Implicit(RemoteWebElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Switch The Switch . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.TextView.html": {
    "href": "api/Legerity.Android.Elements.Core.TextView.html",
    "title": "Class TextView | Legerity",
    "keywords": "Class TextView Defines a wrapper for the core Android TextView control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper TextView Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class TextView : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source TextView(AndroidElement) Initializes a new instance of the TextView class. Declaration public TextView(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source Text Gets the text value of the text view. Declaration public virtual string Text { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(AndroidElement to TextView) Allows conversion of a to the TextView without direct casting. Declaration public static implicit operator TextView(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description TextView The TextView . | Improve this Doc View Source Implicit(AppiumWebElement to TextView) Allows conversion of a to the TextView without direct casting. Declaration public static implicit operator TextView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TextView The TextView . | Improve this Doc View Source Implicit(RemoteWebElement to TextView) Allows conversion of a to the TextView without direct casting. Declaration public static implicit operator TextView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextView The TextView . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.ToggleButton.html": {
    "href": "api/Legerity.Android.Elements.Core.ToggleButton.html",
    "title": "Class ToggleButton | Legerity",
    "keywords": "Class ToggleButton Defines a wrapper for the core Android ToggleButton control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper Button ToggleButton Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class ToggleButton : Button, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source ToggleButton(AndroidElement) Initializes a new instance of the ToggleButton class. Declaration public ToggleButton(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle button is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the button off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the button on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AndroidElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description ToggleButton The ToggleButton . | Improve this Doc View Source Implicit(AppiumWebElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ToggleButton The ToggleButton . | Improve this Doc View Source Implicit(RemoteWebElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ToggleButton The ToggleButton . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.Core.View.html": {
    "href": "api/Legerity.Android.Elements.Core.View.html",
    "title": "Class View | Legerity",
    "keywords": "Class View Defines a wrapper for the core Android View base control. Inheritance System.Object ElementWrapper < AndroidElement > AndroidElementWrapper View Implements IElementWrapper < AndroidElement > Inherited Members AndroidElementWrapper.Driver AndroidElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) AndroidElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.Element ElementWrapper<AndroidElement>.ElementDriver ElementWrapper<AndroidElement>.IsVisible ElementWrapper<AndroidElement>.IsEnabled ElementWrapper<AndroidElement>.Click() ElementWrapper<AndroidElement>.GetAttribute(String) ElementWrapper<AndroidElement>.FindElement(By) ElementWrapper<AndroidElement>.VerifyElementNotShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By) ElementWrapper<AndroidElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<AndroidElement>.VerifyElementsShown(By) ElementWrapper<AndroidElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Android.Elements.Core Assembly : Legerity.Android.dll Syntax public class View : AndroidElementWrapper, IElementWrapper<AndroidElement> Constructors | Improve this Doc View Source View(AndroidElement) Initializes a new instance of the View class. Declaration public View(AndroidElement element) Parameters Type Name Description AndroidElement element The reference. Operators | Improve this Doc View Source Implicit(AndroidElement to View) Allows conversion of a to the View without direct casting. Declaration public static implicit operator View(AndroidElement element) Parameters Type Name Description AndroidElement element The . Returns Type Description View The View . | Improve this Doc View Source Implicit(AppiumWebElement to View) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator View(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description View The Button . | Improve this Doc View Source Implicit(RemoteWebElement to View) Allows conversion of a to the View without direct casting. Declaration public static implicit operator View(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description View The View . Implements IElementWrapper<TElement> Extension Methods AndroidElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) AndroidElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Android.Elements.html": {
    "href": "api/Legerity.Android.Elements.html",
    "title": "Namespace Legerity.Android.Elements | Legerity",
    "keywords": "Namespace Legerity.Android.Elements Classes AndroidElementWrapper Defines an element wrapper for a ."
  },
  "api/Legerity.Android.Extensions.AndroidElementWrapperExtensions.html": {
    "href": "api/Legerity.Android.Extensions.AndroidElementWrapperExtensions.html",
    "title": "Class AndroidElementWrapperExtensions | Legerity",
    "keywords": "Class AndroidElementWrapperExtensions Defines a collection of extensions for AndroidElementWrapper objects. Inheritance System.Object AndroidElementWrapperExtensions Namespace : Legerity.Android.Extensions Assembly : Legerity.Android.dll Syntax public static class AndroidElementWrapperExtensions : object Methods | Improve this Doc View Source TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TElementWrapper : AndroidElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. Type Parameters Name Description TElementWrapper The type of AndroidElementWrapper . TResult The type of expected result from the wait condition. | Improve this Doc View Source WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TElementWrapper : AndroidElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TElementWrapper The type of AndroidElementWrapper . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Android.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.Android.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.Android.Extensions Assembly : Legerity.Android.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetCheckedState(IWebElement) Gets the value of the Android checked state for this element. Declaration public static bool GetCheckedState(this IWebElement element) Parameters Type Name Description IWebElement element The element to retrieve the value from. Returns Type Description System.Boolean True if the element is checked; otherwise, false. | Improve this Doc View Source GetCheckedState<TElement>(IElementWrapper<TElement>) Gets the value of the Android checked state for this element. Declaration public static bool GetCheckedState<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the value from. Returns Type Description System.Boolean True if the element is checked; otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetContentDescription(IWebElement) Gets the value of the Android content description for this element. Declaration public static string GetContentDescription(this IWebElement element) Parameters Type Name Description IWebElement element The element to retrieve a content description for. Returns Type Description System.String The element's content description. | Improve this Doc View Source GetContentDescription<TElement>(IElementWrapper<TElement>) Gets the value of the Android content description for this element. Declaration public static string GetContentDescription<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a content description for. Returns Type Description System.String The element's content description. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.Android.Extensions.html": {
    "href": "api/Legerity.Android.Extensions.html",
    "title": "Namespace Legerity.Android.Extensions | Legerity",
    "keywords": "Namespace Legerity.Android.Extensions Classes AndroidElementWrapperExtensions Defines a collection of extensions for AndroidElementWrapper objects. AttributeExtensions Defines a collection of extensions for retrieving element attributes. LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances."
  },
  "api/Legerity.Android.Extensions.LegerityTestClassExtensions.html": {
    "href": "api/Legerity.Android.Extensions.LegerityTestClassExtensions.html",
    "title": "Class LegerityTestClassExtensions | Legerity",
    "keywords": "Class LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances. Inheritance System.Object LegerityTestClassExtensions Namespace : Legerity.Android.Extensions Assembly : Legerity.Android.dll Syntax public static class LegerityTestClassExtensions : object Methods | Improve this Doc View Source StartAndroidApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the Android application ready for testing. Declaration public static AndroidDriver<AndroidElement> StartAndroidApp(this LegerityTestClass testClass, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description AndroidDriver < AndroidElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer true. | Improve this Doc View Source StartAndroidApp(LegerityTestClass, AndroidAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the Android application ready for testing. Declaration public static AndroidDriver<AndroidElement> StartAndroidApp(this LegerityTestClass testClass, AndroidAppManagerOptions options, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. AndroidAppManagerOptions options The optional options to configure the driver with. Settings this will override the Options if previously set. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description AndroidDriver < AndroidElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer true."
  },
  "api/Legerity.Android.html": {
    "href": "api/Legerity.Android.html",
    "title": "Namespace Legerity.Android | Legerity",
    "keywords": "Namespace Legerity.Android Classes AndroidAppManagerOptions Defines a specific AppiumManagerOptions for an Android application. AndroidByExtras Defines a collection of extra locator constraints for ."
  },
  "api/Legerity.AppiumManagerOptions.html": {
    "href": "api/Legerity.AppiumManagerOptions.html",
    "title": "Class AppiumManagerOptions | Legerity",
    "keywords": "Class AppiumManagerOptions Defines a base model that represents Appium specific configuration options for the AppManager . Inheritance System.Object AppManagerOptions AppiumManagerOptions AndroidAppManagerOptions IOSAppManagerOptions WindowsAppManagerOptions Inherited Members AppManagerOptions.DriverUri AppManagerOptions.ImplicitWait AppManagerOptions.DriverOptions AppManagerOptions.ToString() Namespace : Legerity Assembly : Legerity.Core.dll Syntax public abstract class AppiumManagerOptions : AppManagerOptions Properties | Improve this Doc View Source AdditionalOptions Gets or sets the additional options to apply to the AppiumOptions . Declaration public (string, object)[] AdditionalOptions { get; set; } Property Value Type Description System.ValueTuple < System.String , System.Object >[] | Improve this Doc View Source AppiumOptions Gets or sets the options to configure the Appium driver. This property is null until the Configure() method is called. Configure() is called automatically when calling the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. Declaration public AppiumOptions AppiumOptions { get; set; } Property Value Type Description AppiumOptions Methods | Improve this Doc View Source Configure() Configures the AppiumOptions with the specified additional options. Declaration public virtual void Configure()"
  },
  "api/Legerity.AppManager.html": {
    "href": "api/Legerity.AppManager.html",
    "title": "Class AppManager | Legerity",
    "keywords": "Class AppManager Defines a manager for the application under test. Inheritance System.Object AppManager Namespace : Legerity Assembly : Legerity.Core.dll Syntax public static class AppManager : object Properties | Improve this Doc View Source AndroidApp Gets the instance of the started Android application. Declaration public static AndroidDriver<AndroidElement> AndroidApp { get; } Property Value Type Description AndroidDriver < AndroidElement > Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. | Improve this Doc View Source App Gets or sets the instance of the started application. This could be a , , , or web driver. Declaration public static RemoteWebDriver App { get; set; } Property Value Type Description RemoteWebDriver Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. | Improve this Doc View Source Apps Gets the instances of started applications. Declaration public static IReadOnlyCollection<RemoteWebDriver> Apps { get; } Property Value Type Description IReadOnlyCollection < RemoteWebDriver > | Improve this Doc View Source IOSApp Gets the instance of the started iOS application. Declaration public static IOSDriver<IOSElement> IOSApp { get; } Property Value Type Description IOSDriver < IOSElement > Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. | Improve this Doc View Source WebApp Gets the instance of the started web application. Declaration public static RemoteWebDriver WebApp { get; } Property Value Type Description RemoteWebDriver Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. | Improve this Doc View Source WindowsApp Gets the instance of the started Windows application. Declaration public static WindowsDriver<WindowsElement> WindowsApp { get; } Property Value Type Description WindowsDriver < WindowsElement > Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. Methods | Improve this Doc View Source StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the application ready for testing. Declaration public static RemoteWebDriver StartApp(AppManagerOptions opts, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description AppManagerOptions opts The options to configure the driver with. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description RemoteWebDriver The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer or LaunchAppiumServer true. The WinAppDriver could not be found when running with LaunchWinAppDriver true. The WinAppDriver failed to load when running with LaunchWinAppDriver true. | Improve this Doc View Source StopApp(RemoteWebDriver, Boolean) Stops an application driver, with an option to stop the running Appium or WinAppDriver server. Declaration public static void StopApp(RemoteWebDriver app, bool stopServer = false) Parameters Type Name Description RemoteWebDriver app The instance to stop running. System.Boolean stopServer An optional value indicating whether to stop the running Appium or WinAppDriver server. Default, false . | Improve this Doc View Source StopApp(Boolean) Stops the App , with an option to stop the running Appium or WinAppDriver server. Declaration public static void StopApp(bool stopServer = true) Parameters Type Name Description System.Boolean stopServer An optional value indicating whether to stop the running Appium or WinAppDriver server. Default, true . | Improve this Doc View Source StopApps() Stops all running application drivers. Declaration public static void StopApps()"
  },
  "api/Legerity.AppManagerOptions.html": {
    "href": "api/Legerity.AppManagerOptions.html",
    "title": "Class AppManagerOptions | Legerity",
    "keywords": "Class AppManagerOptions Defines a base model that represents configuration options for the AppManager . Inheritance System.Object AppManagerOptions AppiumManagerOptions WebAppManagerOptions Namespace : Legerity Assembly : Legerity.Core.dll Syntax public abstract class AppManagerOptions : object Properties | Improve this Doc View Source DriverOptions Gets or sets the additional options to configure the driver. Declaration public DriverOptions DriverOptions { get; set; } Property Value Type Description DriverOptions | Improve this Doc View Source DriverUri Gets or sets the URI to the application driver. For native apps, this would be the application driver URL. For web apps, this would be the path to where the driver tool exists. Declaration public string DriverUri { get; set; } Property Value Type Description System.String | Improve this Doc View Source ImplicitWait Gets or sets the implicit wait timeout, which is the amount of time the driver should wait when searching for an element if it is not immediately present. By default, the wait time will be 2 seconds. Declaration public TimeSpan ImplicitWait { get; set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object."
  },
  "api/Legerity.ByAll.html": {
    "href": "api/Legerity.ByAll.html",
    "title": "Class ByAll | Legerity",
    "keywords": "Class ByAll Defines a locator that can be used to find all elements that match all locators in sequence. Inheritance System.Object ByAll Namespace : Legerity Assembly : Legerity.Core.dll Syntax public class ByAll : By Remarks The order of the locators is run in sequence which means that results of FindElements(ISearchContext) may not be in order of their location on screen. Examples The following example shows how to find all elements that match the class name and then the text. All locators must match for the element to be returned. driver.FindElement(new ByAll(By.ClassName(\"my-class\"), By.Text(\"My Text\"))); Constructors | Improve this Doc View Source ByAll(By[]) Initializes a new instance of the ByAll class. Declaration public ByAll(params By[] locators) Parameters Type Name Description By [] locators The locators to find all references of. Methods | Improve this Doc View Source FindElement(ISearchContext) Finds the first element matching the criteria. Declaration public override IWebElement FindElement(ISearchContext context) Parameters Type Name Description ISearchContext context An OpenQA.Selenium.ISearchContext object to use to search for the elements. Returns Type Description IWebElement The first matching OpenQA.Selenium.IWebElement on the current context. | Improve this Doc View Source FindElements(ISearchContext) Finds all elements matching the criteria. Declaration public override ReadOnlyCollection<IWebElement> FindElements(ISearchContext context) Parameters Type Name Description ISearchContext context An OpenQA.Selenium.ISearchContext object to use to search for the elements. Returns Type Description ReadOnlyCollection < IWebElement > A System.Collections.ObjectModel.ReadOnlyCollection`1 of all OpenQA.Selenium.IWebElement matching the current criteria, or an empty list if nothing matches."
  },
  "api/Legerity.ByExtras.html": {
    "href": "api/Legerity.ByExtras.html",
    "title": "Class ByExtras | Legerity",
    "keywords": "Class ByExtras Defines a collection of extra locator constraints for . Inheritance System.Object ByExtras Namespace : Legerity Assembly : Legerity.Core.dll Syntax public static class ByExtras : object Methods | Improve this Doc View Source PartialText(String) Gets a mechanism to find elements by partial text content. Declaration public static By PartialText(string text) Parameters Type Name Description System.String text The text to find. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source Text(String) Gets a mechanism to find elements by the text content. Declaration public static By Text(string text) Parameters Type Name Description System.String text The text to find. Returns Type Description By A object the driver can use to find elements."
  },
  "api/Legerity.ByNested.html": {
    "href": "api/Legerity.ByNested.html",
    "title": "Class ByNested | Legerity",
    "keywords": "Class ByNested Defines a locator that can be used to find elements using a sequence of locators that are continuously nested until the final locator is run. Inheritance System.Object ByNested Namespace : Legerity Assembly : Legerity.Core.dll Syntax public class ByNested : By Examples The following example shows how to find all elements that match inputs that appear under divs, followed by forms. driver.FindElements(new ByNested(By.TagName(\"div\"), By.TagName(\"form\"), By.TagName(\"input\"))); Constructors | Improve this Doc View Source ByNested(By[]) Initializes a new instance of the ByNested class. Declaration public ByNested(params By[] locators) Parameters Type Name Description By [] locators The locators in nesting sequence to find references of. Methods | Improve this Doc View Source FindElement(ISearchContext) Finds the first element matching the criteria. Declaration public override IWebElement FindElement(ISearchContext context) Parameters Type Name Description ISearchContext context An OpenQA.Selenium.ISearchContext object to use to search for the elements. Returns Type Description IWebElement The first matching OpenQA.Selenium.IWebElement on the current context. | Improve this Doc View Source FindElements(ISearchContext) Finds all elements matching the criteria. Declaration public override ReadOnlyCollection<IWebElement> FindElements(ISearchContext context) Parameters Type Name Description ISearchContext context An OpenQA.Selenium.ISearchContext object to use to search for the elements. Returns Type Description ReadOnlyCollection < IWebElement > A System.Collections.ObjectModel.ReadOnlyCollection`1 of all OpenQA.Selenium.IWebElement matching the current criteria, or an empty list if nothing matches."
  },
  "api/Legerity.ElementWrapper-1.html": {
    "href": "api/Legerity.ElementWrapper-1.html",
    "title": "Class ElementWrapper<TElement> | Legerity",
    "keywords": "Class ElementWrapper<TElement> Defines a base wrapper for elements to expose platform element logic. Inheritance System.Object ElementWrapper<TElement> AndroidElementWrapper IOSElementWrapper WindowsElementWrapper Implements IElementWrapper <TElement> Namespace : Legerity Assembly : Legerity.Core.dll Syntax public abstract class ElementWrapper<TElement> : object, IElementWrapper<TElement> where TElement : AppiumWebElement Type Parameters Name Description TElement The type of . Constructors | Improve this Doc View Source ElementWrapper(TElement) Initializes a new instance of the ElementWrapper<TElement> class. Declaration protected ElementWrapper(TElement element) Parameters Type Name Description TElement element The TElement reference. Properties | Improve this Doc View Source Element Gets the original TElement reference object. Declaration public TElement Element { get; } Property Value Type Description TElement | Improve this Doc View Source ElementDriver Gets the driver used to find this element. Declaration public IWebDriver ElementDriver { get; } Property Value Type Description IWebDriver | Improve this Doc View Source IsEnabled Gets a value indicating whether the element is enabled. Declaration public virtual bool IsEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisible Gets a value indicating whether the element is visible. Declaration public virtual bool IsVisible { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Click() Clicks the element. Declaration public virtual void Click() | Improve this Doc View Source FindElement(By) Finds a child element by the specified locator. Declaration public AppiumWebElement FindElement(By locator) Parameters Type Name Description By locator The locator to find a child element by. Returns Type Description AppiumWebElement The TElement . | Improve this Doc View Source GetAttribute(String) Gets the value of the specified attribute for this element. Declaration public string GetAttribute(string attributeName) Parameters Type Name Description System.String attributeName The name of the attribute. Returns Type Description System.String The attribute's current value if it exists; otherwise, null. | Improve this Doc View Source VerifyElementNotShown(By) Determines whether the given element is not shown. Declaration public void VerifyElementNotShown(By locator) Parameters Type Name Description By locator The locator for the element to locate. Exceptions Type Condition ElementShownException Thrown when the element is shown for the expected locator. | Improve this Doc View Source VerifyElementShown(By) Determines whether the given element is shown. Declaration public void VerifyElementShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source VerifyElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration public void VerifyElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source VerifyElementsShown(By) Determines whether the specified elements are shown. Declaration public void VerifyElementsShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source VerifyElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration public void VerifyElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Implements IElementWrapper<TElement>"
  },
  "api/Legerity.Exceptions.AppiumServerLoadFailedException.html": {
    "href": "api/Legerity.Exceptions.AppiumServerLoadFailedException.html",
    "title": "Class AppiumServerLoadFailedException | Legerity",
    "keywords": "Class AppiumServerLoadFailedException Defines an exception for when the Appium sever could not be loaded. Inheritance System.Object LegerityException AppiumServerLoadFailedException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class AppiumServerLoadFailedException : LegerityException"
  },
  "api/Legerity.Exceptions.DriverLoadFailedException.html": {
    "href": "api/Legerity.Exceptions.DriverLoadFailedException.html",
    "title": "Class DriverLoadFailedException | Legerity",
    "keywords": "Class DriverLoadFailedException Defines an exception thrown if the Appium driver fails to load the requested application. Inheritance System.Object LegerityException DriverLoadFailedException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class DriverLoadFailedException : LegerityException"
  },
  "api/Legerity.Exceptions.DriverNotInitializedException.html": {
    "href": "api/Legerity.Exceptions.DriverNotInitializedException.html",
    "title": "Class DriverNotInitializedException | Legerity",
    "keywords": "Class DriverNotInitializedException Defines an exception thrown when an attempt is made to access a driver which has not been initialized. Inheritance System.Object LegerityException DriverNotInitializedException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class DriverNotInitializedException : LegerityException"
  },
  "api/Legerity.Exceptions.ElementNotShownException.html": {
    "href": "api/Legerity.Exceptions.ElementNotShownException.html",
    "title": "Class ElementNotShownException | Legerity",
    "keywords": "Class ElementNotShownException Defines an exception for when an element is not shown. Inheritance System.Object LegerityException ElementNotShownException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class ElementNotShownException : LegerityException Constructors | Improve this Doc View Source ElementNotShownException(String) Initializes a new instance of the ElementNotShownException class. Declaration public ElementNotShownException(string locator) Parameters Type Name Description System.String locator The locator used to locate the element. | Improve this Doc View Source ElementNotShownException(String, Exception) Initializes a new instance of the ElementNotShownException class. Declaration public ElementNotShownException(string locator, Exception innerException) Parameters Type Name Description System.String locator The locator used to locate the element. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source ElementName Gets the name of the element that was not shown. Declaration public string ElementName { get; } Property Value Type Description System.String | Improve this Doc View Source Locator Gets the locator used to locate the element. Declaration public string Locator { get; } Property Value Type Description System.String"
  },
  "api/Legerity.Exceptions.ElementShownException.html": {
    "href": "api/Legerity.Exceptions.ElementShownException.html",
    "title": "Class ElementShownException | Legerity",
    "keywords": "Class ElementShownException Defines an exception for when an element is shown when it shouldn't be. Inheritance System.Object LegerityException ElementShownException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class ElementShownException : LegerityException Constructors | Improve this Doc View Source ElementShownException(String) Initializes a new instance of the ElementShownException class. Declaration public ElementShownException(string locator) Parameters Type Name Description System.String locator The locator used to locate the element. | Improve this Doc View Source ElementShownException(String, Exception) Initializes a new instance of the ElementShownException class. Declaration public ElementShownException(string locator, Exception innerException) Parameters Type Name Description System.String locator The locator used to locate the element. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source ElementName Gets the name of the element that was shown. Declaration public string ElementName { get; } Property Value Type Description System.String | Improve this Doc View Source Locator Gets the locator used to locate the element. Declaration public string Locator { get; } Property Value Type Description System.String"
  },
  "api/Legerity.Exceptions.ElementsNotShownException.html": {
    "href": "api/Legerity.Exceptions.ElementsNotShownException.html",
    "title": "Class ElementsNotShownException | Legerity",
    "keywords": "Class ElementsNotShownException Defines an exception for when expected elements are not shown. Inheritance System.Object LegerityException ElementsNotShownException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class ElementsNotShownException : LegerityException Constructors | Improve this Doc View Source ElementsNotShownException(String) Initializes a new instance of the ElementsNotShownException class. Declaration public ElementsNotShownException(string locator) Parameters Type Name Description System.String locator The locator used to locate the element. | Improve this Doc View Source ElementsNotShownException(String, Exception) Initializes a new instance of the ElementsNotShownException class. Declaration public ElementsNotShownException(string locator, Exception innerException) Parameters Type Name Description System.String locator The locator used to locate the element. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source Locator Gets the locator used to locate the elements. Declaration public string Locator { get; } Property Value Type Description System.String"
  },
  "api/Legerity.Exceptions.html": {
    "href": "api/Legerity.Exceptions.html",
    "title": "Namespace Legerity.Exceptions | Legerity",
    "keywords": "Namespace Legerity.Exceptions Classes AppiumServerLoadFailedException Defines an exception for when the Appium sever could not be loaded. DriverLoadFailedException Defines an exception thrown if the Appium driver fails to load the requested application. DriverNotInitializedException Defines an exception thrown when an attempt is made to access a driver which has not been initialized. ElementNotShownException Defines an exception for when an element is not shown. ElementShownException Defines an exception for when an element is shown when it shouldn't be. ElementsNotShownException Defines an exception for when expected elements are not shown. PageNotShownException Defines an exception for when a page is not shown."
  },
  "api/Legerity.Exceptions.PageNotShownException.html": {
    "href": "api/Legerity.Exceptions.PageNotShownException.html",
    "title": "Class PageNotShownException | Legerity",
    "keywords": "Class PageNotShownException Defines an exception for when a page is not shown. Inheritance System.Object LegerityException PageNotShownException Namespace : Legerity.Exceptions Assembly : Legerity.Core.dll Syntax public class PageNotShownException : LegerityException Properties | Improve this Doc View Source PageName Gets the name of the page that was not shown. Declaration public string PageName { get; } Property Value Type Description System.String"
  },
  "api/Legerity.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetName(IWebElement) Retrieves the Name attribute from the specified element. Declaration public static string GetName(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a Name from. Returns Type Description System.String The Name of the element. | Improve this Doc View Source GetName<TElement>(IElementWrapper<TElement>) Retrieves the Name attribute from the specified element. Declaration public static string GetName<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a Name from. Returns Type Description System.String The Name of the element. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.Extensions.DriverExtensions.html": {
    "href": "api/Legerity.Extensions.DriverExtensions.html",
    "title": "Class DriverExtensions | Legerity",
    "keywords": "Class DriverExtensions Defines a collection of extensions for a driver. Inheritance System.Object DriverExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class DriverExtensions : object Methods | Improve this Doc View Source FindElementByPartialText(RemoteWebDriver, String) Finds the first element in the page that matches the specified text partially. Declaration public static IWebElement FindElementByPartialText(this RemoteWebDriver driver, string text) Parameters Type Name Description RemoteWebDriver driver The remote web driver. System.String text The partial text to find. Returns Type Description IWebElement A . | Improve this Doc View Source FindElementByText(RemoteWebDriver, String) Finds the first element in the page that matches the specified text. Declaration public static IWebElement FindElementByText(this RemoteWebDriver driver, string text) Parameters Type Name Description RemoteWebDriver driver The remote web driver. System.String text The text to find. Returns Type Description IWebElement A . | Improve this Doc View Source FindElementsByPartialText(RemoteWebDriver, String) Finds all the elements in the page that matches the specified text partially. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByPartialText(this RemoteWebDriver driver, string text) Parameters Type Name Description RemoteWebDriver driver The remote web driver. System.String text The partial text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source FindElementsByText(RemoteWebDriver, String) Finds all the elements in the page that matches the specified text. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByText(this RemoteWebDriver driver, string text) Parameters Type Name Description RemoteWebDriver driver The remote web driver. System.String text The text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source FindWebElement(RemoteWebDriver, By) Finds the first element in the page that matches the locator. Declaration public static RemoteWebElement FindWebElement(this RemoteWebDriver driver, By locator) Parameters Type Name Description RemoteWebDriver driver The remote web driver. By locator The locator to find the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindWebElements(RemoteWebDriver, By) Finds all the elements in the page that matches the locator. Declaration public static ReadOnlyCollection<RemoteWebElement> FindWebElements(this RemoteWebDriver driver, By locator) Parameters Type Name Description RemoteWebDriver driver The remote web driver. By locator The locator to find the elements. Returns Type Description ReadOnlyCollection < RemoteWebElement > A readonly collection of . | Improve this Doc View Source GetAllChildElements(RemoteWebDriver) Retrieves all child elements that can be located by the driver in the page. Declaration public static ReadOnlyCollection<IWebElement> GetAllChildElements(this RemoteWebDriver driver) Parameters Type Name Description RemoteWebDriver driver The remote web driver. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source GetAllElements(RemoteWebDriver) Retrieves all elements that can be located by the driver in the page. Declaration public static ReadOnlyCollection<IWebElement> GetAllElements(this RemoteWebDriver driver) Parameters Type Name Description RemoteWebDriver driver The remote web driver. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source TryWaitUntil(IWebDriver, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified driver condition is met, with an optional timeout. Declaration public static bool TryWaitUntil(this IWebDriver appDriver, Func<IWebDriver, bool> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) Parameters Type Name Description IWebDriver appDriver The driver to wait on. Func < IWebDriver , System.Boolean > condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. | Improve this Doc View Source WaitUntil<TResult>(IWebDriver, Func<IWebDriver, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified driver condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TResult>(this IWebDriver appDriver, Func<IWebDriver, TResult> condition, TimeSpan? timeout = null, int retries = 0) Parameters Type Name Description IWebDriver appDriver The driver to wait on. Func < IWebDriver , TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Extensions.ElementExtensions.html": {
    "href": "api/Legerity.Extensions.ElementExtensions.html",
    "title": "Class ElementExtensions | Legerity",
    "keywords": "Class ElementExtensions Defines a collection of extensions for elements. Inheritance System.Object ElementExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class ElementExtensions : object Methods | Improve this Doc View Source FindElementByPartialText(IWebElement, String) Finds the first element in the given element that matches the specified text partially. Declaration public static IWebElement FindElementByPartialText(this IWebElement element, string text) Parameters Type Name Description IWebElement element The remote web element. System.String text The partial text to find. Returns Type Description IWebElement A . | Improve this Doc View Source FindElementByText(IWebElement, String) Finds the first element in the given element that matches the specified text. Declaration public static IWebElement FindElementByText(this IWebElement element, string text) Parameters Type Name Description IWebElement element The remote web element. System.String text The text to find. Returns Type Description IWebElement A . | Improve this Doc View Source FindElementsByPartialText(IWebElement, String) Finds all the elements in the given element that matches the specified text partially. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByPartialText(this IWebElement element, string text) Parameters Type Name Description IWebElement element The remote web element. System.String text The partial text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source FindElementsByText(IWebElement, String) Finds all the elements in the given element that matches the specified text. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByText(this IWebElement element, string text) Parameters Type Name Description IWebElement element The remote web element. System.String text The text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source FindWebElement(IWebElement, By) Finds the first element in the given element that matches the locator. Declaration public static RemoteWebElement FindWebElement(this IWebElement element, By locator) Parameters Type Name Description IWebElement element The remote web element. By locator The locator to find the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindWebElements(IWebElement, By) Finds all the elements in the given element that matches the locator. Declaration public static ReadOnlyCollection<RemoteWebElement> FindWebElements(this IWebElement element, By locator) Parameters Type Name Description IWebElement element The remote web element. By locator The locator to find the elements. Returns Type Description ReadOnlyCollection < RemoteWebElement > A readonly collection of . | Improve this Doc View Source GetAllChildElements(IWebElement) Retrieves all child elements that can be located by the driver for the given element. Declaration public static ReadOnlyCollection<IWebElement> GetAllChildElements(this IWebElement element) Parameters Type Name Description IWebElement element The remote web driver. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . | Improve this Doc View Source GetBoundingRect(IWebElement) Determines the bounding rectangle for the specified element. Declaration public static Rectangle GetBoundingRect(this IWebElement element) Parameters Type Name Description IWebElement element The element to determine the rect for. Returns Type Description Rectangle The elements bounding rectangle. | Improve this Doc View Source TryWaitUntil(RemoteWebElement, Func<RemoteWebElement, Boolean>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil(this RemoteWebElement element, Func<RemoteWebElement, bool> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) Parameters Type Name Description RemoteWebElement element The element to wait on. Func < RemoteWebElement , System.Boolean > condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. | Improve this Doc View Source WaitUntil<TResult>(RemoteWebElement, Func<RemoteWebElement, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TResult>(this RemoteWebElement element, Func<RemoteWebElement, TResult> condition, TimeSpan? timeout = null, int retries = 0) Parameters Type Name Description RemoteWebElement element The element to wait on. Func < RemoteWebElement , TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Extensions.ElementWrapperExtensions.html": {
    "href": "api/Legerity.Extensions.ElementWrapperExtensions.html",
    "title": "Class ElementWrapperExtensions | Legerity",
    "keywords": "Class ElementWrapperExtensions Defines a collection of extensions for IElementWrapper<TElement> objects. Inheritance System.Object ElementWrapperExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class ElementWrapperExtensions : object Methods | Improve this Doc View Source FindElementByPartialText<TElement>(IElementWrapper<TElement>, String) Finds the first element in the given element that matches the specified text partially. Declaration public static IWebElement FindElementByPartialText<TElement>(this IElementWrapper<TElement> element, string text) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. System.String text The partial text to find. Returns Type Description IWebElement A . Type Parameters Name Description TElement The type of . | Improve this Doc View Source FindElementByText<TElement>(IElementWrapper<TElement>, String) Finds the first element in the given element that matches the specified text. Declaration public static IWebElement FindElementByText<TElement>(this IElementWrapper<TElement> element, string text) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. System.String text The text to find. Returns Type Description IWebElement A . Type Parameters Name Description TElement The type of . | Improve this Doc View Source FindElementsByPartialText<TElement>(IElementWrapper<TElement>, String) Finds all the elements in the given element that matches the specified text partially. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByPartialText<TElement>(this IElementWrapper<TElement> element, string text) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. System.String text The partial text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . Type Parameters Name Description TElement The type of . | Improve this Doc View Source FindElementsByText<TElement>(IElementWrapper<TElement>, String) Finds all the elements in the given element that matches the specified text. Declaration public static ReadOnlyCollection<IWebElement> FindElementsByText<TElement>(this IElementWrapper<TElement> element, string text) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. System.String text The text to find. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . Type Parameters Name Description TElement The type of . | Improve this Doc View Source FindWebElement<TElement>(IElementWrapper<TElement>, By) Finds the first element in the given element that matches the locator. Declaration public static RemoteWebElement FindWebElement<TElement>(this IElementWrapper<TElement> element, By locator) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. By locator The locator to find the element. Returns Type Description RemoteWebElement A . Type Parameters Name Description TElement The type of . | Improve this Doc View Source FindWebElements<TElement>(IElementWrapper<TElement>, By) Finds all the elements in the given element that matches the locator. Declaration public static ReadOnlyCollection<RemoteWebElement> FindWebElements<TElement>(this IElementWrapper<TElement> element, By locator) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web element. By locator The locator to find the elements. Returns Type Description ReadOnlyCollection < RemoteWebElement > A readonly collection of . Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetAllChildElements<TElement>(IElementWrapper<TElement>) Retrieves all child elements that can be located by the driver for the given element. Declaration public static ReadOnlyCollection<IWebElement> GetAllChildElements<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The remote web driver. Returns Type Description ReadOnlyCollection < IWebElement > A readonly collection of . Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetBoundingRect<TElement>(IElementWrapper<TElement>) Determines the bounding rectangle for the specified element. Declaration public static Rectangle GetBoundingRect<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to determine the rect for. Returns Type Description Rectangle The elements bounding rectangle. Type Parameters Name Description TElement The type of . | Improve this Doc View Source TryWaitUntil<TElement, TResult>(IElementWrapper<TElement>, Func<IElementWrapper<TElement>, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil<TElement, TResult>(this IElementWrapper<TElement> element, Func<IElementWrapper<TElement>, TResult> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to wait on. Func < IElementWrapper <TElement>, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. Type Parameters Name Description TElement The type of . TResult The type of expected result from the wait condition. | Improve this Doc View Source WaitUntil<TElement, TResult>(IElementWrapper<TElement>, Func<IElementWrapper<TElement>, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TElement, TResult>(this IElementWrapper<TElement> element, Func<IElementWrapper<TElement>, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to wait on. Func < IElementWrapper <TElement>, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TElement The type of . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Extensions.html": {
    "href": "api/Legerity.Extensions.html",
    "title": "Namespace Legerity.Extensions | Legerity",
    "keywords": "Namespace Legerity.Extensions Classes AttributeExtensions Defines a collection of extensions for retrieving element attributes. DriverExtensions Defines a collection of extensions for a driver. ElementExtensions Defines a collection of extensions for elements. ElementWrapperExtensions Defines a collection of extensions for IElementWrapper<TElement> objects. InteractionExtensions Defines a collection of extensions for performing interactions with elements. PageExtensions Defines a collection of extensions for page objects. StringExtensions Defines a collection of extensions for ."
  },
  "api/Legerity.Extensions.InteractionExtensions.html": {
    "href": "api/Legerity.Extensions.InteractionExtensions.html",
    "title": "Class InteractionExtensions | Legerity",
    "keywords": "Class InteractionExtensions Defines a collection of extensions for performing interactions with elements. Inheritance System.Object InteractionExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class InteractionExtensions : object Methods | Improve this Doc View Source ClickAndHold(RemoteWebElement) Clicks and holds on the element. Declaration public static void ClickAndHold(this RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The element to click and hold. Remarks The element hold can be released by calling ReleaseHold(RemoteWebElement) . | Improve this Doc View Source ClickAndHold<TElement>(IElementWrapper<TElement>) Clicks and holds on the element. Declaration public static void ClickAndHold<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to click and hold. Type Parameters Name Description TElement The type of wrapped . Remarks The element hold can be released by calling ReleaseHold(RemoteWebElement) . | Improve this Doc View Source ReleaseHold(RemoteWebElement) Releases the hold click from the element. Declaration public static void ReleaseHold(this RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The element to release the hold from. | Improve this Doc View Source ReleaseHold<TElement>(IElementWrapper<TElement>) Releases the hold click from the element. Declaration public static void ReleaseHold<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to release the hold from. Type Parameters Name Description TElement The type of wrapped . | Improve this Doc View Source ScrollTo(RemoteWebElement) Scrolls to the element. Declaration public static void ScrollTo(this RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The element to scroll to. | Improve this Doc View Source ScrollTo<TElement>(IElementWrapper<TElement>) Scrolls to the element. Declaration public static void ScrollTo<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The element to scroll to. Type Parameters Name Description TElement The type of wrapped ."
  },
  "api/Legerity.Extensions.PageExtensions.html": {
    "href": "api/Legerity.Extensions.PageExtensions.html",
    "title": "Class PageExtensions | Legerity",
    "keywords": "Class PageExtensions Defines a collection of extensions for page objects. Inheritance System.Object PageExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class PageExtensions : object Methods | Improve this Doc View Source TryWaitUntil<TPage>(TPage, Func<TPage, Boolean>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified page condition is met, with an optional timeout. Declaration public static (bool success, TPage page) TryWaitUntil<TPage>(this TPage page, Func<TPage, bool> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TPage : BasePage Parameters Type Name Description TPage page The page to wait on. Func <TPage, System.Boolean > condition The condition of the page to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.ValueTuple < System.Boolean , TPage> Whether the wait was a success and the instance of the page. Type Parameters Name Description TPage The type of BasePage . | Improve this Doc View Source WaitUntil<TPage, TResult>(TPage, Func<TPage, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified page condition is met, with an optional timeout. Declaration public static TPage WaitUntil<TPage, TResult>(this TPage page, Func<TPage, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TPage : BasePage Parameters Type Name Description TPage page The page to wait on. Func <TPage, TResult> condition The condition of the page to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TPage The instance of the page. Type Parameters Name Description TPage The type of BasePage . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Extensions.StringExtensions.html": {
    "href": "api/Legerity.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Legerity",
    "keywords": "Class StringExtensions Defines a collection of extensions for . Inheritance System.Object StringExtensions Namespace : Legerity.Extensions Assembly : Legerity.Core.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source Contains(String, String, CultureInfo, CompareOptions) Determines whether the specified value contains the comparison value by the specified culture and comparison option. Declaration public static bool Contains(this string value, string contains, CultureInfo culture, CompareOptions compareOption) Parameters Type Name Description System.String value The value to check contains the contains value. System.String contains The value that should be contained within the value . CultureInfo culture The culture for comparison. CompareOptions compareOption The comparison option. Returns Type Description System.Boolean True if the value contains the contains value; otherwise, false. | Improve this Doc View Source RemoveUnicodeCharacters(String) Removes unicode characters from the specified string. Declaration public static string RemoveUnicodeCharacters(this string value) Parameters Type Name Description System.String value The string to remove unicode characters from. Returns Type Description System.String The string with unicode characters removed."
  },
  "api/Legerity.Helpers.AppiumServerHelper.html": {
    "href": "api/Legerity.Helpers.AppiumServerHelper.html",
    "title": "Class AppiumServerHelper | Legerity",
    "keywords": "Class AppiumServerHelper Defines a helper class for launching a local Appium server. Inheritance System.Object AppiumServerHelper Namespace : Legerity.Helpers Assembly : Legerity.Core.dll Syntax public static class AppiumServerHelper : object Methods | Improve this Doc View Source Run() Loads an instance of the Appium server process. Declaration public static void Run() Exceptions Type Condition AppiumServerLoadFailedException Thrown when the Appium server fails to load. | Improve this Doc View Source Stop() Stops the running instance of the WinAppDriver process. Declaration public static void Stop()"
  },
  "api/Legerity.Helpers.html": {
    "href": "api/Legerity.Helpers.html",
    "title": "Namespace Legerity.Helpers | Legerity",
    "keywords": "Namespace Legerity.Helpers Classes AppiumServerHelper Defines a helper class for launching a local Appium server. WaitUntilConditions Defines a set of conditions that can be used with the WaitUntil methods of elements and pages."
  },
  "api/Legerity.Helpers.WaitUntilConditions.html": {
    "href": "api/Legerity.Helpers.WaitUntilConditions.html",
    "title": "Class WaitUntilConditions | Legerity",
    "keywords": "Class WaitUntilConditions Defines a set of conditions that can be used with the WaitUntil methods of elements and pages. Inheritance System.Object WaitUntilConditions Namespace : Legerity.Helpers Assembly : Legerity.Core.dll Syntax public static class WaitUntilConditions : object Methods | Improve this Doc View Source ElementExists(By) A condition for validating whether a specified element found by a locator exists within the context of the page. Note, the element may exist but may not be visible. Declaration public static Func<IWebDriver, bool> ElementExists(By locator) Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IWebDriver , System.Boolean > True if the element exists; otherwise, false. | Improve this Doc View Source ElementExistsInElement<TElement>(By) A condition for validating whether a specified element found by a locator exists within the context of an element. Note, the element may exist but may not be visible. Declaration public static Func<TElement, bool> ElementExistsInElement<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TElement, System.Boolean > True if the element exists; otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementExistsInElementWrapper<TElement>(By) A condition for validating whether a specified element found by a locator exists within the context of an element wrapper. Note, the element may exist but may not be visible. Declaration public static Func<IElementWrapper<TElement>, bool> ElementExistsInElementWrapper<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IElementWrapper <TElement>, System.Boolean > True if the element exists; otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementExistsInPage<TPage>(By) A condition for validating whether a specified element found by a locator exists within the context of a page object. Note, the element may exist but may not be visible. Declaration public static Func<TPage, bool> ElementExistsInPage<TPage>(By locator) where TPage : BasePage Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TPage, System.Boolean > True if the element exists; otherwise, false. Type Parameters Name Description TPage The type of BasePage . | Improve this Doc View Source ElementIsNotVisible(By) A condition for validating whether a specified element found by a locator is hidden (not visible) within the context of the page. Declaration public static Func<IWebDriver, bool> ElementIsNotVisible(By locator) Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IWebDriver , System.Boolean > True if the element is hidden (not visible); otherwise, false. | Improve this Doc View Source ElementIsNotVisibleInElement<TElement>(By) A condition for validating whether a specified element found by a locator is hidden (not visible) within the context of an element. Declaration public static Func<TElement, bool> ElementIsNotVisibleInElement<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TElement, System.Boolean > True if the element is hidden (not visible); otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementIsNotVisibleInElementWrapper<TElement>(By) A condition for validating whether a specified element found by a locator is hidden (not visible) within the context of an element wrapper. Declaration public static Func<IElementWrapper<TElement>, bool> ElementIsNotVisibleInElementWrapper<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IElementWrapper <TElement>, System.Boolean > True if the element is hidden (not visible); otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementIsNotVisibleInPage<TPage>(By) A condition for validating whether a specified element found by a locator is hidden (not visible) within the context of a page object. Declaration public static Func<TPage, bool> ElementIsNotVisibleInPage<TPage>(By locator) where TPage : BasePage Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TPage, System.Boolean > True if the element is hidden (not visible); otherwise, false. Type Parameters Name Description TPage The type of BasePage . | Improve this Doc View Source ElementIsVisible(By) A condition for validating whether a specified element found by a locator is visible within the context of the page. Declaration public static Func<IWebDriver, bool> ElementIsVisible(By locator) Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IWebDriver , System.Boolean > True if the element is visible; otherwise, false. | Improve this Doc View Source ElementIsVisibleInElement<TElement>(By) A condition for validating whether a specified element found by a locator is visible within the context of an element. Declaration public static Func<TElement, bool> ElementIsVisibleInElement<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TElement, System.Boolean > True if the element is visible; otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementIsVisibleInElementWrapper<TElement>(By) A condition for validating whether a specified element found by a locator is visible within the context of an element wrapper. Declaration public static Func<IElementWrapper<TElement>, bool> ElementIsVisibleInElementWrapper<TElement>(By locator) where TElement : IWebElement Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func < IElementWrapper <TElement>, System.Boolean > True if the element is visible; otherwise, false. Type Parameters Name Description TElement The type of . | Improve this Doc View Source ElementIsVisibleInPage<TPage>(By) A condition for validating whether a specified element found by a locator is visible within the context of a page object. Declaration public static Func<TPage, bool> ElementIsVisibleInPage<TPage>(By locator) where TPage : BasePage Parameters Type Name Description By locator The locator to find the element. Returns Type Description Func <TPage, System.Boolean > True if the element is visible; otherwise, false. Type Parameters Name Description TPage The type of BasePage . | Improve this Doc View Source FrameAvailableToSwitchTo(By) A condition for switching to a frame by its name when it is available. Declaration public static Func<IWebDriver, IWebDriver> FrameAvailableToSwitchTo(By frameLocator) Parameters Type Name Description By frameLocator The locator of the frame to switch to. Returns Type Description Func < IWebDriver , IWebDriver > The for the frame that has been switched to. | Improve this Doc View Source FrameAvailableToSwitchTo(String) A condition for switching to a frame by its name when it is available. Declaration public static Func<IWebDriver, IWebDriver> FrameAvailableToSwitchTo(string frameName) Parameters Type Name Description System.String frameName The name of the frame to switch to. Returns Type Description Func < IWebDriver , IWebDriver > The for the frame that has been switched to. | Improve this Doc View Source TitleContains(String) A condition for validating whether the title of the current Window contains a case-sensitive substring. Declaration public static Func<IWebDriver, bool> TitleContains(string title) Parameters Type Name Description System.String title The fragment of title expected. Returns Type Description Func < IWebDriver , System.Boolean > True if the title contains the text; otherwise, false. | Improve this Doc View Source TitleIs(String, StringComparison) A condition for validating whether the title of the current Window matches the specified title. Declaration public static Func<IWebDriver, bool> TitleIs(string title, StringComparison comparison = null) Parameters Type Name Description System.String title The expected title, which must be an exact match. StringComparison comparison The comparison for validating equality. Returns Type Description Func < IWebDriver , System.Boolean > True if the title matches; otherwise, false. | Improve this Doc View Source UrlContains(String) A condition for validating whether the URL of the current Window contains a case-sensitive substring. Declaration public static Func<IWebDriver, bool> UrlContains(string url) Parameters Type Name Description System.String url The fragment of URL expected. Returns Type Description Func < IWebDriver , System.Boolean > True if the URL contains the text; otherwise, false. | Improve this Doc View Source UrlIs(String, StringComparison) A condition for validating whether the URL of the current Window matches the specified URL. Declaration public static Func<IWebDriver, bool> UrlIs(string url, StringComparison comparison = null) Parameters Type Name Description System.String url The URL that the page should be on. StringComparison comparison The comparison for validating equality. Returns Type Description Func < IWebDriver , System.Boolean > True if the URL matches; otherwise, false."
  },
  "api/Legerity.html": {
    "href": "api/Legerity.html",
    "title": "Namespace Legerity | Legerity",
    "keywords": "Namespace Legerity Classes AppiumManagerOptions Defines a base model that represents Appium specific configuration options for the AppManager . AppManager Defines a manager for the application under test. AppManagerOptions Defines a base model that represents configuration options for the AppManager . ByAll Defines a locator that can be used to find all elements that match all locators in sequence. ByExtras Defines a collection of extra locator constraints for . ByNested Defines a locator that can be used to find elements using a sequence of locators that are continuously nested until the final locator is run. ElementWrapper<TElement> Defines a base wrapper for elements to expose platform element logic. LegerityException Defines a framework specific base exception. LegerityTestClass Defines a base class for running tests with the Legerity framework. Interfaces IElementWrapper<TElement> Defines an interface for a Selenium/Appium element wrapper."
  },
  "api/Legerity.IElementWrapper-1.html": {
    "href": "api/Legerity.IElementWrapper-1.html",
    "title": "Interface IElementWrapper<TElement> | Legerity",
    "keywords": "Interface IElementWrapper<TElement> Defines an interface for a Selenium/Appium element wrapper. Namespace : Legerity Assembly : Legerity.Core.dll Syntax public interface IElementWrapper<TElement> where TElement : IWebElement Type Parameters Name Description TElement The type of . Properties | Improve this Doc View Source Element Gets the original TElement reference object. Declaration TElement Element { get; } Property Value Type Description TElement | Improve this Doc View Source ElementDriver Gets the driver used to find this element. Declaration IWebDriver ElementDriver { get; } Property Value Type Description IWebDriver | Improve this Doc View Source IsEnabled Gets a value indicating whether the element is enabled. Declaration bool IsEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisible Gets a value indicating whether the element is visible. Declaration bool IsVisible { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Click() Clicks the element. Declaration void Click() | Improve this Doc View Source GetAttribute(String) Gets the value of the specified attribute for this element. Declaration string GetAttribute(string attributeName) Parameters Type Name Description System.String attributeName The name of the attribute. Returns Type Description System.String The attribute's current value if it exists; otherwise, null. | Improve this Doc View Source VerifyElementNotShown(By) Determines whether the given element is not shown. Declaration void VerifyElementNotShown(By locator) Parameters Type Name Description By locator The locator for the element to locate. | Improve this Doc View Source VerifyElementShown(By) Determines whether the given element is shown. Declaration void VerifyElementShown(By locator) Parameters Type Name Description By locator The locator for the element to find. | Improve this Doc View Source VerifyElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration void VerifyElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. | Improve this Doc View Source VerifyElementsShown(By) Determines whether the specified elements are shown. Declaration void VerifyElementsShown(By locator) Parameters Type Name Description By locator The locator for the element to find. | Improve this Doc View Source VerifyElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration void VerifyElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present."
  },
  "api/Legerity.IOS.Elements.Core.Button.html": {
    "href": "api/Legerity.IOS.Elements.Core.Button.html",
    "title": "Class Button | Legerity",
    "keywords": "Class Button Defines a wrapper for the core iOS Button control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper Button Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class Button : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source Button(IOSElement) Initializes a new instance of the Button class. Declaration public Button(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source Label Gets the button's label content. Declaration public virtual string Label { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(AppiumWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(IOSElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(RemoteWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Button The Button . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.Core.html": {
    "href": "api/Legerity.IOS.Elements.Core.html",
    "title": "Namespace Legerity.IOS.Elements.Core | Legerity",
    "keywords": "Namespace Legerity.IOS.Elements.Core Classes Button Defines a wrapper for the core iOS Button control. Label Defines a wrapper for the core iOS Label control. ProgressView Defines a wrapper for the core iOS ProgressView control. Slider Defines a wrapper for the core iOS Slider control. Switch Defines a wrapper for the core iOS Switch control. TextField Defines a wrapper for the core iOS TextField control."
  },
  "api/Legerity.IOS.Elements.Core.Label.html": {
    "href": "api/Legerity.IOS.Elements.Core.Label.html",
    "title": "Class Label | Legerity",
    "keywords": "Class Label Defines a wrapper for the core iOS Label control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper Label Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class Label : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source Label(IOSElement) Initializes a new instance of the Label class. Declaration public Label(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source Text Gets the text value of the label. Declaration public virtual string Text { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(AppiumWebElement to Label) Allows conversion of a to the Label without direct casting. Declaration public static implicit operator Label(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Label The Label . | Improve this Doc View Source Implicit(IOSElement to Label) Allows conversion of a to the Label without direct casting. Declaration public static implicit operator Label(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description Label The Label . | Improve this Doc View Source Implicit(RemoteWebElement to Label) Allows conversion of a to the Label without direct casting. Declaration public static implicit operator Label(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Label The Label . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.Core.ProgressView.html": {
    "href": "api/Legerity.IOS.Elements.Core.ProgressView.html",
    "title": "Class ProgressView | Legerity",
    "keywords": "Class ProgressView Defines a wrapper for the core iOS ProgressView control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper ProgressView Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class ProgressView : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source ProgressView(IOSElement) Initializes a new instance of the ProgressView class. Declaration public ProgressView(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source Percentage Gets the value of the progress bar. Declaration public virtual double Percentage { get; } Property Value Type Description System.Double Operators | Improve this Doc View Source Implicit(AppiumWebElement to ProgressView) Allows conversion of a to the ProgressView without direct casting. Declaration public static implicit operator ProgressView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ProgressView The ProgressView . | Improve this Doc View Source Implicit(IOSElement to ProgressView) Allows conversion of a to the ProgressView without direct casting. Declaration public static implicit operator ProgressView(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description ProgressView The ProgressView . | Improve this Doc View Source Implicit(RemoteWebElement to ProgressView) Allows conversion of a to the ProgressView without direct casting. Declaration public static implicit operator ProgressView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ProgressView The ProgressView . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.Core.Slider.html": {
    "href": "api/Legerity.IOS.Elements.Core.Slider.html",
    "title": "Class Slider | Legerity",
    "keywords": "Class Slider Defines a wrapper for the core iOS Slider control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper Slider Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class Slider : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source Slider(IOSElement) Initializes a new instance of the Slider class. Declaration public Slider(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Gets the value of the slider as a percentage between 0 and 100. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source SetValue(Double) Sets the value of the slider. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Slider The Slider . | Improve this Doc View Source Implicit(IOSElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description Slider The Slider . | Improve this Doc View Source Implicit(RemoteWebElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Slider The Slider . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.Core.Switch.html": {
    "href": "api/Legerity.IOS.Elements.Core.Switch.html",
    "title": "Class Switch | Legerity",
    "keywords": "Class Switch Defines a wrapper for the core iOS Switch control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper Switch Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class Switch : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source Switch(IOSElement) Initializes a new instance of the Switch class. Declaration public Switch(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle switch is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the switch off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the switch on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AppiumWebElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Switch The Switch . | Improve this Doc View Source Implicit(IOSElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description Switch The Switch . | Improve this Doc View Source Implicit(RemoteWebElement to Switch) Allows conversion of a to the Switch without direct casting. Declaration public static implicit operator Switch(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Switch The Switch . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.Core.TextField.html": {
    "href": "api/Legerity.IOS.Elements.Core.TextField.html",
    "title": "Class TextField | Legerity",
    "keywords": "Class TextField Defines a wrapper for the core iOS TextField control. Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper TextField Implements IElementWrapper < IOSElement > Inherited Members IOSElementWrapper.Driver IOSElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) IOSElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements.Core Assembly : Legerity.IOS.dll Syntax public class TextField : IOSElementWrapper, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source TextField(IOSElement) Initializes a new instance of the TextField class. Declaration public TextField(IOSElement element) Parameters Type Name Description IOSElement element The representing the TextField element. Properties | Improve this Doc View Source ClearTextButton Gets the element associated with the clear text button, if shown. Declaration public virtual Button ClearTextButton { get; } Property Value Type Description Button | Improve this Doc View Source Text Gets the text value of the text field. Declaration public virtual string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendText(String) Appends the specified text to the text field. Declaration public virtual void AppendText(string text) Parameters Type Name Description System.String text The text to append. | Improve this Doc View Source ClearText() Clears the text from the text field. Declaration public virtual void ClearText() | Improve this Doc View Source SetText(String) Sets the text of the text field to the specified text. Declaration public virtual void SetText(string text) Parameters Type Name Description System.String text The text to display. Operators | Improve this Doc View Source Implicit(AppiumWebElement to TextField) Allows conversion of a to the TextField without direct casting. Declaration public static implicit operator TextField(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TextField The TextField . | Improve this Doc View Source Implicit(IOSElement to TextField) Allows conversion of a to the TextField without direct casting. Declaration public static implicit operator TextField(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description TextField The TextField . | Improve this Doc View Source Implicit(RemoteWebElement to TextField) Allows conversion of a to the TextField without direct casting. Declaration public static implicit operator TextField(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextField The TextField . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Elements.html": {
    "href": "api/Legerity.IOS.Elements.html",
    "title": "Namespace Legerity.IOS.Elements | Legerity",
    "keywords": "Namespace Legerity.IOS.Elements Classes IOSElementWrapper Defines an element wrapper for a ."
  },
  "api/Legerity.IOS.Elements.IOSElementWrapper.html": {
    "href": "api/Legerity.IOS.Elements.IOSElementWrapper.html",
    "title": "Class IOSElementWrapper | Legerity",
    "keywords": "Class IOSElementWrapper Defines an element wrapper for a . Inheritance System.Object ElementWrapper < IOSElement > IOSElementWrapper Button Label ProgressView Slider Switch TextField Implements IElementWrapper < IOSElement > Inherited Members ElementWrapper<IOSElement>.Element ElementWrapper<IOSElement>.ElementDriver ElementWrapper<IOSElement>.IsVisible ElementWrapper<IOSElement>.IsEnabled ElementWrapper<IOSElement>.Click() ElementWrapper<IOSElement>.GetAttribute(String) ElementWrapper<IOSElement>.FindElement(By) ElementWrapper<IOSElement>.VerifyElementNotShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By) ElementWrapper<IOSElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<IOSElement>.VerifyElementsShown(By) ElementWrapper<IOSElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.IOS.Elements Assembly : Legerity.IOS.dll Syntax public class IOSElementWrapper : ElementWrapper<IOSElement>, IElementWrapper<IOSElement> Constructors | Improve this Doc View Source IOSElementWrapper(IOSElement) Initializes a new instance of the IOSElementWrapper class. Declaration public IOSElementWrapper(IOSElement element) Parameters Type Name Description IOSElement element The reference. Properties | Improve this Doc View Source Driver Gets the instance of the Appium driver for the iOS application. Declaration public IOSDriver<IOSElement> Driver { get; } Property Value Type Description IOSDriver < IOSElement > Methods | Improve this Doc View Source VerifyDriverElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration protected void VerifyDriverElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source VerifyDriverElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration protected void VerifyDriverElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to IOSElementWrapper) Allows conversion of a to the IOSElementWrapper without direct casting. Declaration public static implicit operator IOSElementWrapper(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description IOSElementWrapper The IOSElementWrapper . | Improve this Doc View Source Implicit(IOSElement to IOSElementWrapper) Allows conversion of a to the IOSElementWrapper without direct casting. Declaration public static implicit operator IOSElementWrapper(IOSElement element) Parameters Type Name Description IOSElement element The . Returns Type Description IOSElementWrapper The IOSElementWrapper . | Improve this Doc View Source Implicit(RemoteWebElement to IOSElementWrapper) Allows conversion of a to the IOSElementWrapper without direct casting. Declaration public static implicit operator IOSElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description IOSElementWrapper The IOSElementWrapper . Implements IElementWrapper<TElement> Extension Methods IOSElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) IOSElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.IOS.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.IOS.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.IOS.Extensions Assembly : Legerity.IOS.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetLabel(IWebElement) Retrieves the label attribute from the specified element. Declaration public static string GetLabel(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a label from. Returns Type Description System.String The label of the element. | Improve this Doc View Source GetLabel<TElement>(IElementWrapper<TElement>) Retrieves the label attribute from the specified element. Declaration public static string GetLabel<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a label from. Returns Type Description System.String The label of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetValue(IWebElement) Retrieves the value attribute from the specified element. Declaration public static string GetValue(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a value from. Returns Type Description System.String The value of the element. | Improve this Doc View Source GetValue<TElement>(IElementWrapper<TElement>) Retrieves the value attribute from the specified element. Declaration public static string GetValue<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a value from. Returns Type Description System.String The value of the element. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.IOS.Extensions.html": {
    "href": "api/Legerity.IOS.Extensions.html",
    "title": "Namespace Legerity.IOS.Extensions | Legerity",
    "keywords": "Namespace Legerity.IOS.Extensions Classes AttributeExtensions Defines a collection of extensions for retrieving element attributes. IOSElementWrapperExtensions Defines a collection of extensions for IOSElementWrapper objects. LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances."
  },
  "api/Legerity.IOS.Extensions.IOSElementWrapperExtensions.html": {
    "href": "api/Legerity.IOS.Extensions.IOSElementWrapperExtensions.html",
    "title": "Class IOSElementWrapperExtensions | Legerity",
    "keywords": "Class IOSElementWrapperExtensions Defines a collection of extensions for IOSElementWrapper objects. Inheritance System.Object IOSElementWrapperExtensions Namespace : Legerity.IOS.Extensions Assembly : Legerity.IOS.dll Syntax public static class IOSElementWrapperExtensions : object Methods | Improve this Doc View Source TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TElementWrapper : IOSElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. Type Parameters Name Description TElementWrapper The type of IOSElementWrapper . TResult The type of expected result from the wait condition. | Improve this Doc View Source WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TElementWrapper : IOSElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TElementWrapper The type of IOSElementWrapper . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.IOS.Extensions.LegerityTestClassExtensions.html": {
    "href": "api/Legerity.IOS.Extensions.LegerityTestClassExtensions.html",
    "title": "Class LegerityTestClassExtensions | Legerity",
    "keywords": "Class LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances. Inheritance System.Object LegerityTestClassExtensions Namespace : Legerity.IOS.Extensions Assembly : Legerity.IOS.dll Syntax public static class LegerityTestClassExtensions : object Methods | Improve this Doc View Source StartIOSApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the iOS application ready for testing. Declaration public static IOSDriver<IOSElement> StartIOSApp(this LegerityTestClass testClass, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description IOSDriver < IOSElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer true. | Improve this Doc View Source StartIOSApp(LegerityTestClass, IOSAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the iOS application ready for testing. Declaration public static IOSDriver<IOSElement> StartIOSApp(this LegerityTestClass testClass, IOSAppManagerOptions options, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. IOSAppManagerOptions options The optional options to configure the driver with. Settings this will override the Options if previously set. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description IOSDriver < IOSElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer true."
  },
  "api/Legerity.IOS.html": {
    "href": "api/Legerity.IOS.html",
    "title": "Namespace Legerity.IOS | Legerity",
    "keywords": "Namespace Legerity.IOS Classes IOSAppManagerOptions Defines a specific AppiumManagerOptions for an iOS application. IOSByExtras Defines a collection of extra locator constraints for ."
  },
  "api/Legerity.IOS.IOSAppManagerOptions.html": {
    "href": "api/Legerity.IOS.IOSAppManagerOptions.html",
    "title": "Class IOSAppManagerOptions | Legerity",
    "keywords": "Class IOSAppManagerOptions Defines a specific AppiumManagerOptions for an iOS application. Inheritance System.Object AppManagerOptions AppiumManagerOptions IOSAppManagerOptions Inherited Members AppiumManagerOptions.AdditionalOptions AppiumManagerOptions.AppiumOptions AppManagerOptions.DriverUri AppManagerOptions.ImplicitWait AppManagerOptions.DriverOptions Namespace : Legerity.IOS Assembly : Legerity.Core.dll Syntax public class IOSAppManagerOptions : AppiumManagerOptions Constructors | Improve this Doc View Source IOSAppManagerOptions() Initializes a new instance of the IOSAppManagerOptions class. Declaration public IOSAppManagerOptions() | Improve this Doc View Source IOSAppManagerOptions(String, String, String, String) Initializes a new instance of the IOSAppManagerOptions class. Declaration public IOSAppManagerOptions(string appId, string osVersion, string deviceName, string deviceId) Parameters Type Name Description System.String appId The ID of the application under test, e.g. com.instagram.ios. System.String osVersion The version of iOS to run the application on. System.String deviceName The name of the iOS device to run the application on. System.String deviceId The ID of the Android device to run the application on. | Improve this Doc View Source IOSAppManagerOptions(String, String, String, String, (String, Object)[]) Initializes a new instance of the IOSAppManagerOptions class. Declaration public IOSAppManagerOptions(string appId, string osVersion, string deviceName, string deviceId, params (string, object)[] additionalOptions) Parameters Type Name Description System.String appId The ID of the application under test, e.g. com.instagram.ios. System.String osVersion The version of iOS to run the application on. System.String deviceName The name of the iOS device to run the application on. System.String deviceId The ID of the iOS device to run the application on. System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . Properties | Improve this Doc View Source AppId Gets or sets the ID of the application under test. Declaration public string AppId { get; set; } Property Value Type Description System.String | Improve this Doc View Source AutomationName Gets or sets the name of the automation tool to use to run the application. Defaults to XCUITest . If a value is provided in the additional options, this value will override it. Declaration public string AutomationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source DeviceId Gets or sets the ID of the iOS device to run the application on. Declaration public string DeviceId { get; set; } Property Value Type Description System.String | Improve this Doc View Source DeviceName Gets or sets the name of the iOS device to run the application on. Declaration public string DeviceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source LaunchAppiumServer Gets or sets a value indicating whether to launch the Appium server instance. Declaration public bool LaunchAppiumServer { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source OSVersion Gets or sets the version of iOS to run the application on. Declaration public string OSVersion { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Configure() Configures the AppiumOptions with the specified additional options. Declaration public override void Configure() Overrides AppiumManagerOptions.Configure() | Improve this Doc View Source Configure((String, Object)[]) Configures the with the specified additional options. Declaration public void Configure((string, object)[] additionalOptions) Parameters Type Name Description System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides AppManagerOptions.ToString()"
  },
  "api/Legerity.IOS.IOSByExtras.html": {
    "href": "api/Legerity.IOS.IOSByExtras.html",
    "title": "Class IOSByExtras | Legerity",
    "keywords": "Class IOSByExtras Defines a collection of extra locator constraints for . Inheritance System.Object IOSByExtras Namespace : Legerity.IOS Assembly : Legerity.IOS.dll Syntax public static class IOSByExtras : object Methods | Improve this Doc View Source Label(String) Gets a mechanism to find elements by the label. Declaration public static By Label(string label) Parameters Type Name Description System.String label The label to find. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source PartialLabel(String) Gets a mechanism to find elements by a partial label. Declaration public static By PartialLabel(string label) Parameters Type Name Description System.String label The label to find. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source PartialValue(String) Gets a mechanism to find elements by a partial value. Declaration public static By PartialValue(string value) Parameters Type Name Description System.String value The value to find. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source Value(String) Gets a mechanism to find elements by the value. Declaration public static By Value(string value) Parameters Type Name Description System.String value The value to find. Returns Type Description By A object the driver can use to find elements."
  },
  "api/Legerity.LegerityException.html": {
    "href": "api/Legerity.LegerityException.html",
    "title": "Class LegerityException | Legerity",
    "keywords": "Class LegerityException Defines a framework specific base exception. Inheritance System.Object LegerityException AppiumServerLoadFailedException DriverLoadFailedException DriverNotInitializedException ElementNotShownException ElementShownException ElementsNotShownException PageNotShownException WinAppDriverLoadFailedException WinAppDriverNotFoundException Namespace : Legerity Assembly : Legerity.Core.dll Syntax public class LegerityException : Exception"
  },
  "api/Legerity.LegerityTestClass.html": {
    "href": "api/Legerity.LegerityTestClass.html",
    "title": "Class LegerityTestClass | Legerity",
    "keywords": "Class LegerityTestClass Defines a base class for running tests with the Legerity framework. Inheritance System.Object LegerityTestClass Namespace : Legerity Assembly : Legerity.Core.dll Syntax public abstract class LegerityTestClass : object Constructors | Improve this Doc View Source LegerityTestClass() Initializes a new instance of the LegerityTestClass class. The Options will need to be set before calling StartApp(Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) . Declaration protected LegerityTestClass() | Improve this Doc View Source LegerityTestClass(AppManagerOptions) Initializes a new instance of the LegerityTestClass class with application launch option. Declaration protected LegerityTestClass(AppManagerOptions options) Parameters Type Name Description AppManagerOptions options The application launch options. Properties | Improve this Doc View Source App Gets the instance of the started application. This could be a , , , or web driver. Declaration protected RemoteWebDriver App { get; } Property Value Type Description RemoteWebDriver Remarks This instance should not be used in parallelized test runs. Instead, use the instance returned by the StartApp(Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) or StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) method. | Improve this Doc View Source Apps Gets or sets the instances of started applications. Declaration protected IReadOnlyCollection<RemoteWebDriver> Apps { get; } Property Value Type Description IReadOnlyCollection < RemoteWebDriver > Remarks This is useful for accessing drivers in parallelized tests. | Improve this Doc View Source Options Gets or sets the model that represents the configuration options for the AppManager . Declaration protected AppManagerOptions Options { get; set; } Property Value Type Description AppManagerOptions Methods | Improve this Doc View Source StartApp(Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the application ready for testing. Declaration public virtual RemoteWebDriver StartApp(Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description RemoteWebDriver The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer or LaunchAppiumServer true. The WinAppDriver could not be found when running with LaunchWinAppDriver true. The WinAppDriver failed to load when running with LaunchWinAppDriver true. | Improve this Doc View Source StartApp(AppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the application ready for testing. Declaration public virtual RemoteWebDriver StartApp(AppManagerOptions options, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description AppManagerOptions options The optional options to configure the driver with. Settings this will override the Options if previously set. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description RemoteWebDriver The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The Appium server could not be found when running with LaunchAppiumServer or LaunchAppiumServer true. The WinAppDriver could not be found when running with LaunchWinAppDriver true. The WinAppDriver failed to load when running with LaunchWinAppDriver true. | Improve this Doc View Source StopApp() Stops the App and any running Appium or WinAppDriver server. Declaration public virtual void StopApp() | Improve this Doc View Source StopApp(RemoteWebDriver, Boolean) Stops an application, with an option to stop the running Appium or WinAppDriver server. Declaration public virtual void StopApp(RemoteWebDriver app, bool stopServer = false) Parameters Type Name Description RemoteWebDriver app The instance to stop running. System.Boolean stopServer An optional value indicating whether to stop the running Appium or WinAppDriver server. Default, false . | Improve this Doc View Source StopApp(Boolean) Stops the App , with an option to stop the running Appium or WinAppDriver server. Declaration public virtual void StopApp(bool stopServer) Parameters Type Name Description System.Boolean stopServer An optional value indicating whether to stop the running Appium or WinAppDriver server. | Improve this Doc View Source StopApps(Boolean) Stops all running application drivers, with an option to stop the running Appium or WinAppDriver server. Declaration public virtual void StopApps(bool stopServer = true) Parameters Type Name Description System.Boolean stopServer An optional value indicating whether to stop the running Appium or WinAppDriver server. Default, true . Extension Methods LegerityTestClassExtensions.StartAndroidApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) LegerityTestClassExtensions.StartAndroidApp(LegerityTestClass, AndroidAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) LegerityTestClassExtensions.StartIOSApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) LegerityTestClassExtensions.StartIOSApp(LegerityTestClass, IOSAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) LegerityTestClassExtensions.StartWindowsApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) LegerityTestClassExtensions.StartWindowsApp(LegerityTestClass, WindowsAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Pages.BasePage.html": {
    "href": "api/Legerity.Pages.BasePage.html",
    "title": "Class BasePage | Legerity",
    "keywords": "Class BasePage Defines a base page for creating tests following the page object pattern. Inheritance System.Object BasePage Namespace : Legerity.Pages Assembly : Legerity.Core.dll Syntax public abstract class BasePage : object Constructors | Improve this Doc View Source BasePage() Initializes a new instance of the BasePage class using the App instance that verifies the page has loaded within 2 seconds. Declaration protected BasePage() Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown in 2 seconds. | Improve this Doc View Source BasePage(RemoteWebDriver) Initializes a new instance of the BasePage class using a instance that verifies the page has loaded within 2 seconds. Declaration protected BasePage(RemoteWebDriver app) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown in 2 seconds. | Improve this Doc View Source BasePage(RemoteWebDriver, Nullable<TimeSpan>) Initializes a new instance of the BasePage class using a instance that verifies the page has loaded within the given timeout. Declaration protected BasePage(RemoteWebDriver app, TimeSpan? traitTimeout) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown in the given timeout. | Improve this Doc View Source BasePage(Nullable<TimeSpan>) Initializes a new instance of the BasePage class using the App instance that verifies the page has loaded within the given timeout. Declaration protected BasePage(TimeSpan? traitTimeout) Parameters Type Name Description System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown in the given timeout. Properties | Improve this Doc View Source AndroidApp Gets the instance of the started Android application. Declaration protected AndroidDriver<AndroidElement> AndroidApp { get; } Property Value Type Description AndroidDriver < AndroidElement > | Improve this Doc View Source App Gets the instance of the started application. The App instance serves as base for the drivers and can be referenced for basic Selenium functions. This could be a , , , or web driver. Declaration public RemoteWebDriver App { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source IOSApp Gets the instance of the started iOS application. Declaration protected IOSDriver<IOSElement> IOSApp { get; } Property Value Type Description IOSDriver < IOSElement > | Improve this Doc View Source Trait Gets a given trait of the page to verify that the page is in view. Declaration protected abstract By Trait { get; } Property Value Type Description By | Improve this Doc View Source WaitTimeout Gets or sets the amount of time the driver should wait when searching for elements if they are not immediately present. Declaration public TimeSpan WaitTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source WebApp Gets the instance of the started web application. Declaration protected RemoteWebDriver WebApp { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source WindowsApp Gets the instance of the started Windows application. Declaration protected WindowsDriver<WindowsElement> WindowsApp { get; } Property Value Type Description WindowsDriver < WindowsElement > Methods | Improve this Doc View Source FindElement(By) Finds the first element in the page that matches the locator. Declaration public RemoteWebElement FindElement(By locator) Parameters Type Name Description By locator The locator to find the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindElementById(String) Finds the first element in the page that matches the specified ID. Declaration public RemoteWebElement FindElementById(string id) Parameters Type Name Description System.String id The ID of the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindElementByName(String) Finds the first of element in the page that matches the specified name. Declaration public RemoteWebElement FindElementByName(string name) Parameters Type Name Description System.String name The name of the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindElementByXPath(String) Finds the first element in the page that matches the specified XPath. Declaration public RemoteWebElement FindElementByXPath(string xpath) Parameters Type Name Description System.String xpath The XPath to find the element. Returns Type Description RemoteWebElement A . | Improve this Doc View Source FindElements(By) Finds all the elements in the page that matches the locator. Declaration public ReadOnlyCollection<RemoteWebElement> FindElements(By locator) Parameters Type Name Description By locator The locator to find the elements. Returns Type Description ReadOnlyCollection < RemoteWebElement > A readonly collection of . | Improve this Doc View Source FindElementsByXPath(String) Finds all the elements in the page that matches the specified XPath. Declaration public ReadOnlyCollection<RemoteWebElement> FindElementsByXPath(string xpath) Parameters Type Name Description System.String xpath The XPath to find the elements. Returns Type Description ReadOnlyCollection < RemoteWebElement > A readonly collection of . | Improve this Doc View Source VerifyElementNotShown(By) Determines whether the given element is not shown. Declaration public void VerifyElementNotShown(By locator) Parameters Type Name Description By locator The locator for the element to locate. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. | Improve this Doc View Source VerifyElementShown(By) Determines whether the given element is shown. Declaration public void VerifyElementShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. ElementNotShownException Thrown when the element is not shown. | Improve this Doc View Source VerifyElementShown(By, Nullable<TimeSpan>) Determines whether the given element is shown with the specified timeout. Declaration public void VerifyElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator for the element to find. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator element if it is not immediately present. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. ElementNotShownException Thrown when the element is not shown. | Improve this Doc View Source VerifyPageShown() Determines whether the current page is shown immediately. Declaration public void VerifyPageShown() Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown. | Improve this Doc View Source VerifyPageShown(Nullable<TimeSpan>) Determines whether the current page is shown with the specified timeout. Declaration public void VerifyPageShown(TimeSpan? timeout) Parameters Type Name Description System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Exceptions Type Condition DriverNotInitializedException Thrown when AppManager.StartApp() has not been called. PageNotShownException Thrown when the page is not shown. Extension Methods PageExtensions.TryWaitUntil<TPage>(TPage, Func<TPage, Boolean>, Nullable<TimeSpan>, Int32, Action<Exception>) PageExtensions.WaitUntil<TPage, TResult>(TPage, Func<TPage, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Pages.html": {
    "href": "api/Legerity.Pages.html",
    "title": "Namespace Legerity.Pages | Legerity",
    "keywords": "Namespace Legerity.Pages Classes BasePage Defines a base page for creating tests following the page object pattern."
  },
  "api/Legerity.Web.Authentication.Pages.AzureAdLoginPage.html": {
    "href": "api/Legerity.Web.Authentication.Pages.AzureAdLoginPage.html",
    "title": "Class AzureAdLoginPage | Legerity",
    "keywords": "Class AzureAdLoginPage Defines a page object for the Azure Active Directory login page. Inheritance System.Object AzureAdLoginPage Namespace : Legerity.Web.Authentication.Pages Assembly : Legerity.Web.Authentication.dll Syntax public class AzureAdLoginPage : BasePage Constructors | Improve this Doc View Source AzureAdLoginPage() Initializes a new instance of the AzureAdLoginPage class using the instance that verifies the page has loaded within 2 seconds. Declaration public AzureAdLoginPage() | Improve this Doc View Source AzureAdLoginPage(RemoteWebDriver) Initializes a new instance of the AzureAdLoginPage class using a instance that verifies the page has loaded within 2 seconds. Declaration public AzureAdLoginPage(RemoteWebDriver app) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. | Improve this Doc View Source AzureAdLoginPage(RemoteWebDriver, Nullable<TimeSpan>) Initializes a new instance of the AzureAdLoginPage class using a instance that verifies the page has loaded within the given timeout. Declaration public AzureAdLoginPage(RemoteWebDriver app, TimeSpan? traitTimeout) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. | Improve this Doc View Source AzureAdLoginPage(Nullable<TimeSpan>) Initializes a new instance of the AzureAdLoginPage class using the instance that verifies the page has loaded within the given timeout. Declaration public AzureAdLoginPage(TimeSpan? traitTimeout) Parameters Type Name Description System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Fields | Improve this Doc View Source Title The expected title of the Azure AD login page. Declaration public const string Title = null Field Value Type Description System.String Properties | Improve this Doc View Source EmailInput Gets the input element for providing an email address. Declaration public virtual TextInput EmailInput { get; } Property Value Type Description TextInput | Improve this Doc View Source PasswordInput Gets the input element for providing a password. Declaration public virtual TextInput PasswordInput { get; } Property Value Type Description TextInput | Improve this Doc View Source SignInButton Gets the button element for continuing the sign-in flow through the Azure AD login UI. Declaration public virtual Button SignInButton { get; } Property Value Type Description Button | Improve this Doc View Source Trait Gets a given trait of the page to verify that the page is in view. Declaration protected override By Trait { get; } Property Value Type Description By | Improve this Doc View Source UsePasswordButton Gets the optional \"Use Password\" button that appears when password-less authentication is enabled. Declaration public virtual Button UsePasswordButton { get; } Property Value Type Description Button Methods | Improve this Doc View Source Login(String, String) Login an Azure Active Directory user by email and password. Declaration public AzureAdLoginPage Login(string email, string password) Parameters Type Name Description System.String email The email address to authenticate with. System.String password The password associated with the email address to authenticate with. Returns Type Description AzureAdLoginPage The AzureAdLoginPage instance."
  },
  "api/Legerity.Web.Authentication.Pages.FacebookLoginPage.html": {
    "href": "api/Legerity.Web.Authentication.Pages.FacebookLoginPage.html",
    "title": "Class FacebookLoginPage | Legerity",
    "keywords": "Class FacebookLoginPage Defines a page object for the Facebook login page. Inheritance System.Object FacebookLoginPage Namespace : Legerity.Web.Authentication.Pages Assembly : Legerity.Web.Authentication.dll Syntax public class FacebookLoginPage : BasePage Constructors | Improve this Doc View Source FacebookLoginPage() Initializes a new instance of the FacebookLoginPage class using the instance that verifies the page has loaded within 2 seconds. Declaration public FacebookLoginPage() | Improve this Doc View Source FacebookLoginPage(RemoteWebDriver) Initializes a new instance of the FacebookLoginPage class using a instance that verifies the page has loaded within 2 seconds. Declaration public FacebookLoginPage(RemoteWebDriver app) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. | Improve this Doc View Source FacebookLoginPage(RemoteWebDriver, Nullable<TimeSpan>) Initializes a new instance of the FacebookLoginPage class using a instance that verifies the page has loaded within the given timeout. Declaration public FacebookLoginPage(RemoteWebDriver app, TimeSpan? traitTimeout) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. | Improve this Doc View Source FacebookLoginPage(Nullable<TimeSpan>) Initializes a new instance of the FacebookLoginPage class using the instance that verifies the page has loaded within the given timeout. Declaration public FacebookLoginPage(TimeSpan? traitTimeout) Parameters Type Name Description System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Fields | Improve this Doc View Source Title The expected title of the Facebook login page. Declaration public const string Title = null Field Value Type Description System.String Properties | Improve this Doc View Source EmailInput Gets the input element for providing an email address. Declaration public virtual TextInput EmailInput { get; } Property Value Type Description TextInput | Improve this Doc View Source PasswordInput Gets the input element for providing a password. Declaration public virtual TextInput PasswordInput { get; } Property Value Type Description TextInput | Improve this Doc View Source SignInButton Gets the button element for continuing the sign-in flow through the Facebook login UI. Declaration public virtual Button SignInButton { get; } Property Value Type Description Button | Improve this Doc View Source Trait Gets a given trait of the page to verify that the page is in view. Declaration protected override By Trait { get; } Property Value Type Description By Methods | Improve this Doc View Source Login(String, String) Login a Facebook user by email and password. Declaration public FacebookLoginPage Login(string email, string password) Parameters Type Name Description System.String email The email address to authenticate with. System.String password The password associated with the email address to authenticate with. Returns Type Description FacebookLoginPage The FacebookLoginPage instance."
  },
  "api/Legerity.Web.Authentication.Pages.GoogleLoginPage.html": {
    "href": "api/Legerity.Web.Authentication.Pages.GoogleLoginPage.html",
    "title": "Class GoogleLoginPage | Legerity",
    "keywords": "Class GoogleLoginPage Defines a page object for the Google login page. Inheritance System.Object GoogleLoginPage Namespace : Legerity.Web.Authentication.Pages Assembly : Legerity.Web.Authentication.dll Syntax public class GoogleLoginPage : BasePage Constructors | Improve this Doc View Source GoogleLoginPage() Initializes a new instance of the GoogleLoginPage class using the instance that verifies the page has loaded within 2 seconds. Declaration public GoogleLoginPage() | Improve this Doc View Source GoogleLoginPage(RemoteWebDriver) Initializes a new instance of the GoogleLoginPage class using a instance that verifies the page has loaded within 2 seconds. Declaration public GoogleLoginPage(RemoteWebDriver app) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. | Improve this Doc View Source GoogleLoginPage(RemoteWebDriver, Nullable<TimeSpan>) Initializes a new instance of the GoogleLoginPage class using a instance that verifies the page has loaded within the given timeout. Declaration public GoogleLoginPage(RemoteWebDriver app, TimeSpan? traitTimeout) Parameters Type Name Description RemoteWebDriver app The instance of the started application driver that will be used to drive the page interaction. System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. | Improve this Doc View Source GoogleLoginPage(Nullable<TimeSpan>) Initializes a new instance of the GoogleLoginPage class using the instance that verifies the page has loaded within the given timeout. Declaration public GoogleLoginPage(TimeSpan? traitTimeout) Parameters Type Name Description System.Nullable < TimeSpan > traitTimeout The amount of time the driver should wait when searching for the Trait if it is not immediately present. Fields | Improve this Doc View Source Title The expected title of the Google login page. Declaration public const string Title = null Field Value Type Description System.String Properties | Improve this Doc View Source EmailInput Gets the input element for providing an email address. Declaration public virtual TextInput EmailInput { get; } Property Value Type Description TextInput | Improve this Doc View Source NextButton Gets the button element for continuing the sign-in flow through the Google login UI. Declaration public virtual Button NextButton { get; } Property Value Type Description Button | Improve this Doc View Source PasswordInput Gets the input element for providing a password. Declaration public virtual TextInput PasswordInput { get; } Property Value Type Description TextInput | Improve this Doc View Source SignInButton Gets the button element for completing the sign-in flow through the Google login UI. Declaration public virtual Button SignInButton { get; } Property Value Type Description Button | Improve this Doc View Source Trait Gets a given trait of the page to verify that the page is in view. Declaration protected override By Trait { get; } Property Value Type Description By Methods | Improve this Doc View Source Login(String, String) Login a Google user by email and password. Declaration public GoogleLoginPage Login(string email, string password) Parameters Type Name Description System.String email The email address to authenticate with. System.String password The password associated with the email address to authenticate with. Returns Type Description GoogleLoginPage The GoogleLoginPage instance."
  },
  "api/Legerity.Web.Authentication.Pages.html": {
    "href": "api/Legerity.Web.Authentication.Pages.html",
    "title": "Namespace Legerity.Web.Authentication.Pages | Legerity",
    "keywords": "Namespace Legerity.Web.Authentication.Pages Classes AzureAdLoginPage Defines a page object for the Azure Active Directory login page. FacebookLoginPage Defines a page object for the Facebook login page. GoogleLoginPage Defines a page object for the Google login page."
  },
  "api/Legerity.Web.Elements.Core.Button.html": {
    "href": "api/Legerity.Web.Elements.Core.Button.html",
    "title": "Class Button | Legerity",
    "keywords": "Class Button Defines a wrapper for the core web Button control. Inheritance System.Object WebElementWrapper Button RadioButton Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Button : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Button(IWebElement) Initializes a new instance of the Button class. Declaration public Button(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Button(RemoteWebElement) Initializes a new instance of the Button class. Declaration public Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Operators | Improve this Doc View Source Implicit(RemoteWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Button The Button . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.CheckBox.html": {
    "href": "api/Legerity.Web.Elements.Core.CheckBox.html",
    "title": "Class CheckBox | Legerity",
    "keywords": "Class CheckBox Defines a wrapper for the core web Input checkbox control. Inheritance System.Object WebElementWrapper CheckBox Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class CheckBox : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source CheckBox(IWebElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source CheckBox(RemoteWebElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source IsChecked Gets a value indicating whether the check box is in the checked state. Declaration public virtual bool IsChecked { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CheckOff() Checks the check box off. Declaration public virtual void CheckOff() | Improve this Doc View Source CheckOn() Checks the check box on. Declaration public virtual void CheckOn() Operators | Improve this Doc View Source Implicit(RemoteWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CheckBox The CheckBox . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.DateInput.html": {
    "href": "api/Legerity.Web.Elements.Core.DateInput.html",
    "title": "Class DateInput | Legerity",
    "keywords": "Class DateInput Defines a wrapper for the core web Input date control. Inheritance System.Object WebElementWrapper TextInput DateInput Implements IElementWrapper < RemoteWebElement > Inherited Members TextInput.Text TextInput.SetText(String) TextInput.AppendText(String) TextInput.ClearText() WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class DateInput : TextInput, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source DateInput(IWebElement) Initializes a new instance of the DateInput class. Declaration public DateInput(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source DateInput(RemoteWebElement) Initializes a new instance of the DateInput class. Declaration public DateInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source SelectedDate Gets the value of the date picker as a . Declaration public virtual DateTime? SelectedDate { get; } Property Value Type Description System.Nullable < DateTime > | Improve this Doc View Source Value Gets the value of the date picker. Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetDate(DateTime) Sets the date to the specified date. Declaration public virtual void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set. Operators | Improve this Doc View Source Implicit(RemoteWebElement to DateInput) Allows conversion of a to the DateInput without direct casting. Declaration public static implicit operator DateInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description DateInput The DateInput . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.FileInput.html": {
    "href": "api/Legerity.Web.Elements.Core.FileInput.html",
    "title": "Class FileInput | Legerity",
    "keywords": "Class FileInput Defines a wrapper for the core web Input file control. Inheritance System.Object WebElementWrapper FileInput Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class FileInput : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source FileInput(IWebElement) Initializes a new instance of the FileInput class. Declaration public FileInput(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source FileInput(RemoteWebElement) Initializes a new instance of the FileInput class. Declaration public FileInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source FilePath Gets the file path for the selected file. Declaration public virtual string FilePath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ClearFile() Clears the selected file. Declaration public virtual void ClearFile() | Improve this Doc View Source SetAbsoluteFilePath(String) Sets the selected file by an absolute file path. Declaration public virtual void SetAbsoluteFilePath(string filePath) Parameters Type Name Description System.String filePath The file path. Operators | Improve this Doc View Source Implicit(RemoteWebElement to FileInput) Allows conversion of a to the FileInput without direct casting. Declaration public static implicit operator FileInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description FileInput The FileInput . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.Form.html": {
    "href": "api/Legerity.Web.Elements.Core.Form.html",
    "title": "Class Form | Legerity",
    "keywords": "Class Form Defines a wrapper for the core web Form control. Inheritance System.Object WebElementWrapper Form Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Form : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Form(IWebElement) Initializes a new instance of the Form class. Declaration public Form(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Form(RemoteWebElement) Initializes a new instance of the Form class. Declaration public Form(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Operators | Improve this Doc View Source Implicit(RemoteWebElement to Form) Allows conversion of a to the Form without direct casting. Declaration public static implicit operator Form(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Form The Form . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.html": {
    "href": "api/Legerity.Web.Elements.Core.html",
    "title": "Namespace Legerity.Web.Elements.Core | Legerity",
    "keywords": "Namespace Legerity.Web.Elements.Core Classes Button Defines a wrapper for the core web Button control. CheckBox Defines a wrapper for the core web Input checkbox control. DateInput Defines a wrapper for the core web Input date control. FileInput Defines a wrapper for the core web Input file control. Form Defines a wrapper for the core web Form control. Image Defines a wrapper for the core web Image control. List Defines a wrapper for the core web ol or ul control. NumberInput Defines a wrapper for the core web Input number control. Option Defines a wrapper for the core web Option control. RadioButton Defines a wrapper for the core web Input radio control. RangeInput Defines a wrapper for the core web Input range control. Select Defines a wrapper for the core web Select control. Table Defines a wrapper for the core web Table control. TableRow Defines a wrapper for the core web Table Row (tr) control. TextArea Defines a wrapper for the core web TextArea control. TextInput Defines a wrapper for the core web Input text control."
  },
  "api/Legerity.Web.Elements.Core.Image.html": {
    "href": "api/Legerity.Web.Elements.Core.Image.html",
    "title": "Class Image | Legerity",
    "keywords": "Class Image Defines a wrapper for the core web Image control. Inheritance System.Object WebElementWrapper Image Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Image : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Image(IWebElement) Initializes a new instance of the Image class. Declaration public Image(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Image(RemoteWebElement) Initializes a new instance of the Image class. Declaration public Image(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source AltText Gets the alt text of the image. Declaration public virtual string AltText { get; } Property Value Type Description System.String | Improve this Doc View Source Height Gets the height of the image. Declaration public virtual double Height { get; } Property Value Type Description System.Double | Improve this Doc View Source Source Gets the source URI of the image. Declaration public virtual string Source { get; } Property Value Type Description System.String | Improve this Doc View Source Width Gets the width of the image. Declaration public virtual double Width { get; } Property Value Type Description System.Double Operators | Improve this Doc View Source Implicit(RemoteWebElement to Image) Allows conversion of a to the Image without direct casting. Declaration public static implicit operator Image(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Image The Image . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.List.html": {
    "href": "api/Legerity.Web.Elements.Core.List.html",
    "title": "Class List | Legerity",
    "keywords": "Class List Defines a wrapper for the core web ol or ul control. Inheritance System.Object WebElementWrapper List Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class List : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source List(IWebElement) Initializes a new instance of the List class. Declaration public List(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source List(RemoteWebElement) Initializes a new instance of the List class. Declaration public List(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the list. Declaration public virtual ReadOnlyCollection<IWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < IWebElement > Operators | Improve this Doc View Source Implicit(RemoteWebElement to List) Allows conversion of a to the List without direct casting. Declaration public static implicit operator List(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description List The List . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.NumberInput.html": {
    "href": "api/Legerity.Web.Elements.Core.NumberInput.html",
    "title": "Class NumberInput | Legerity",
    "keywords": "Class NumberInput Defines a wrapper for the core web Input number control. Inheritance System.Object WebElementWrapper TextInput NumberInput Implements IElementWrapper < RemoteWebElement > Inherited Members TextInput.Text TextInput.SetText(String) TextInput.AppendText(String) TextInput.ClearText() WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class NumberInput : TextInput, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source NumberInput(IWebElement) Initializes a new instance of the NumberInput class. Declaration public NumberInput(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source NumberInput(RemoteWebElement) Initializes a new instance of the NumberInput class. Declaration public NumberInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Maximum Gets the maximum value of the NumberBox. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the NumberBox. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the NumberBox. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Decrement() Decreases the number box value. Declaration public virtual void Decrement() | Improve this Doc View Source Increment() Increases the number box value. Declaration public virtual void Increment() | Improve this Doc View Source SetValue(Double) Sets the value of the NumberBox. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(RemoteWebElement to NumberInput) Allows conversion of a to the NumberInput without direct casting. Declaration public static implicit operator NumberInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description NumberInput The NumberInput . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.Option.html": {
    "href": "api/Legerity.Web.Elements.Core.Option.html",
    "title": "Class Option | Legerity",
    "keywords": "Class Option Defines a wrapper for the core web Option control. Inheritance System.Object WebElementWrapper Option Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Option : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Option(IWebElement) Initializes a new instance of the Option class. Declaration public Option(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Option(RemoteWebElement) Initializes a new instance of the Option class. Declaration public Option(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source DisplayValue Gets the display value of the option. Declaration public virtual string DisplayValue { get; } Property Value Type Description System.String | Improve this Doc View Source IsSelected Gets a value indicating whether the option is selected. Declaration public virtual bool IsSelected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Gets the value of the option. Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Select() Selects the option. Declaration public virtual void Select() Operators | Improve this Doc View Source Implicit(RemoteWebElement to Option) Allows conversion of a to the Option without direct casting. Declaration public static implicit operator Option(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Option The Option . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.RadioButton.html": {
    "href": "api/Legerity.Web.Elements.Core.RadioButton.html",
    "title": "Class RadioButton | Legerity",
    "keywords": "Class RadioButton Defines a wrapper for the core web Input radio control. Inheritance System.Object WebElementWrapper Button RadioButton Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class RadioButton : Button, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source RadioButton(IWebElement) Initializes a new instance of the RadioButton class. Declaration public RadioButton(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source RadioButton(RemoteWebElement) Initializes a new instance of the RadioButton class. Declaration public RadioButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Group Gets the name of the group for the radio button. Declaration public virtual string Group { get; } Property Value Type Description System.String | Improve this Doc View Source IsSelected Gets a value indicating whether the radio button is selected. Declaration public virtual bool IsSelected { get; } Property Value Type Description System.Boolean Operators | Improve this Doc View Source Implicit(RemoteWebElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadioButton The RadioButton . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.RangeInput.html": {
    "href": "api/Legerity.Web.Elements.Core.RangeInput.html",
    "title": "Class RangeInput | Legerity",
    "keywords": "Class RangeInput Defines a wrapper for the core web Input range control. Inheritance System.Object WebElementWrapper TextInput RangeInput Implements IElementWrapper < RemoteWebElement > Inherited Members TextInput.Text TextInput.SetText(String) TextInput.AppendText(String) TextInput.ClearText() WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class RangeInput : TextInput, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source RangeInput(IWebElement) Initializes a new instance of the RangeInput class. Declaration public RangeInput(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source RangeInput(RemoteWebElement) Initializes a new instance of the RangeInput class. Declaration public RangeInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Maximum Gets the maximum value of the range input. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the range input. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the range input. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Decrement() Decreases the range input value. Declaration public virtual void Decrement() | Improve this Doc View Source Increment() Increases the range input value. Declaration public virtual void Increment() | Improve this Doc View Source SetValue(Double) Sets the value of the range input. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(RemoteWebElement to RangeInput) Allows conversion of a to the RangeInput without direct casting. Declaration public static implicit operator RangeInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RangeInput The RangeInput . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.Select.html": {
    "href": "api/Legerity.Web.Elements.Core.Select.html",
    "title": "Class Select | Legerity",
    "keywords": "Class Select Defines a wrapper for the core web Select control. Inheritance System.Object WebElementWrapper Select Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Select : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Select(IWebElement) Initializes a new instance of the Select class. Declaration public Select(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Select(RemoteWebElement) Initializes a new instance of the Select class. Declaration public Select(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source IsMultiple Gets a value indicating whether multiple items can be selected. Declaration public virtual bool IsMultiple { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Options Gets the collection of items associated with the select. Declaration public virtual IEnumerable<Option> Options { get; } Property Value Type Description IEnumerable < Option > | Improve this Doc View Source SelectedOption Gets the selected item when in a single selection state. Declaration public virtual Option SelectedOption { get; } Property Value Type Description Option | Improve this Doc View Source SelectedOptions Gets the selected items when in a multiple selection state. Declaration public virtual IEnumerable<Option> SelectedOptions { get; } Property Value Type Description IEnumerable < Option > Methods | Improve this Doc View Source SelectOptionByDisplayValue(String) Selects an item in the select element with the specified display value. Declaration public virtual void SelectOptionByDisplayValue(string displayValue) Parameters Type Name Description System.String displayValue The display value of the item to select. | Improve this Doc View Source SelectOptionByPartialDisplayValue(String) Selects an item in the select element with the specified partial display value. Declaration public virtual void SelectOptionByPartialDisplayValue(string partialDisplayValue) Parameters Type Name Description System.String partialDisplayValue The partial display value of the item to select. | Improve this Doc View Source SelectOptionByPartialValue(String) Selects an item in the select element with the specified partial value. Declaration public virtual void SelectOptionByPartialValue(string partialValue) Parameters Type Name Description System.String partialValue The partial value of the item to select. | Improve this Doc View Source SelectOptionByValue(String) Selects an item in the select element with the specified value. Declaration public virtual void SelectOptionByValue(string value) Parameters Type Name Description System.String value The value of the item to select. Operators | Improve this Doc View Source Implicit(RemoteWebElement to Select) Allows conversion of a to the Select without direct casting. Declaration public static implicit operator Select(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Select The Select . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.Table.html": {
    "href": "api/Legerity.Web.Elements.Core.Table.html",
    "title": "Class Table | Legerity",
    "keywords": "Class Table Defines a wrapper for the core web Table control. Inheritance System.Object WebElementWrapper Table Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class Table : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source Table(IWebElement) Initializes a new instance of the Table class. Declaration public Table(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Table(RemoteWebElement) Initializes a new instance of the Table class. Declaration public Table(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source DataRows Gets the collection of rows associated with the table only containing the data values (not headers). Declaration public virtual IEnumerable<TableRow> DataRows { get; } Property Value Type Description IEnumerable < TableRow > | Improve this Doc View Source Headers Gets the header names for the table. Declaration public virtual IEnumerable<string> Headers { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source IsFirstRowHeaders Gets or sets a value indicating whether the first row in the table is a header row. Declaration public virtual bool IsFirstRowHeaders { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Rows Gets the collection of rows associated with the table. If a header row exists, that will be included. Declaration public virtual IEnumerable<TableRow> Rows { get; } Property Value Type Description IEnumerable < TableRow > Methods | Improve this Doc View Source GetColumnDataByHeader(String) Retrieves the column values for a specific column by header name. Declaration public virtual IEnumerable<string> GetColumnDataByHeader(string header) Parameters Type Name Description System.String header The column header name. Returns Type Description IEnumerable < System.String > A collection of values for each row in the column. | Improve this Doc View Source GetColumnDataByIndex(Int32) Retrieves the column values for a specific column by index. Declaration public virtual IEnumerable<string> GetColumnDataByIndex(int idx) Parameters Type Name Description System.Int32 idx The specified column index of data to retrieve. Returns Type Description IEnumerable < System.String > A collection of values for each row in the column. | Improve this Doc View Source GetRowDataByIndex(Int32) Retrieves the column names and associated column values for a specific row in the table by index. Declaration public virtual IReadOnlyDictionary<string, string> GetRowDataByIndex(int idx) Parameters Type Name Description System.Int32 idx The specified row data index to retrieve data for. Returns Type Description IReadOnlyDictionary < System.String , System.String > A dictionary of key-value pairs containing the column header and the column value for the row. Operators | Improve this Doc View Source Implicit(RemoteWebElement to Table) Allows conversion of a to the Table without direct casting. Declaration public static implicit operator Table(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Table The Table . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.TableRow.html": {
    "href": "api/Legerity.Web.Elements.Core.TableRow.html",
    "title": "Class TableRow | Legerity",
    "keywords": "Class TableRow Defines a wrapper for the core web Table Row (tr) control. Inheritance System.Object WebElementWrapper TableRow Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class TableRow : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source TableRow(IWebElement) Initializes a new instance of the TableRow class. Declaration public TableRow(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TableRow(RemoteWebElement) Initializes a new instance of the TableRow class. Declaration public TableRow(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Values Gets all of the values for each column in the row. Declaration public virtual IEnumerable<string> Values { get; } Property Value Type Description IEnumerable < System.String > Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.TextArea.html": {
    "href": "api/Legerity.Web.Elements.Core.TextArea.html",
    "title": "Class TextArea | Legerity",
    "keywords": "Class TextArea Defines a wrapper for the core web TextArea control. Inheritance System.Object WebElementWrapper TextInput TextArea Implements IElementWrapper < RemoteWebElement > Inherited Members TextInput.Text TextInput.SetText(String) TextInput.AppendText(String) TextInput.ClearText() WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class TextArea : TextInput, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source TextArea(IWebElement) Initializes a new instance of the TextArea class. Declaration public TextArea(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TextArea(RemoteWebElement) Initializes a new instance of the TextArea class. Declaration public TextArea(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Cols Gets the visible width. Declaration public virtual int Cols { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rows Gets the number of visible text lines. Declaration public virtual int Rows { get; } Property Value Type Description System.Int32 Operators | Improve this Doc View Source Implicit(RemoteWebElement to TextArea) Allows conversion of a to the TextArea without direct casting. Declaration public static implicit operator TextArea(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextArea The TextArea . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.Core.TextInput.html": {
    "href": "api/Legerity.Web.Elements.Core.TextInput.html",
    "title": "Class TextInput | Legerity",
    "keywords": "Class TextInput Defines a wrapper for the core web Input text control. Inheritance System.Object WebElementWrapper TextInput DateInput NumberInput RangeInput TextArea Implements IElementWrapper < RemoteWebElement > Inherited Members WebElementWrapper.Element WebElementWrapper.ElementDriver WebElementWrapper.Driver WebElementWrapper.IsEnabled WebElementWrapper.IsVisible WebElementWrapper.FindElement(By) WebElementWrapper.FindElements(By) WebElementWrapper.VerifyElementNotShown(By) WebElementWrapper.Click() WebElementWrapper.GetAttribute(String) WebElementWrapper.VerifyElementShown(By) WebElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) WebElementWrapper.VerifyElementsShown(By) WebElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Web.Elements.Core Assembly : Legerity.Web.dll Syntax public class TextInput : WebElementWrapper, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source TextInput(IWebElement) Initializes a new instance of the TextInput class. Declaration public TextInput(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TextInput(RemoteWebElement) Initializes a new instance of the TextInput class. Declaration public TextInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Text Gets the text value of the text input. Declaration public virtual string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendText(String) Appends the specified text to the text box. Declaration public virtual void AppendText(string text) Parameters Type Name Description System.String text The text to append. | Improve this Doc View Source ClearText() Clears the text from the text box. Declaration public virtual void ClearText() | Improve this Doc View Source SetText(String) Sets the text of the text box to the specified text. Declaration public virtual void SetText(string text) Parameters Type Name Description System.String text The text to display. Operators | Improve this Doc View Source Implicit(RemoteWebElement to TextInput) Allows conversion of a to the TextInput without direct casting. Declaration public static implicit operator TextInput(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextInput The TextInput . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Elements.html": {
    "href": "api/Legerity.Web.Elements.html",
    "title": "Namespace Legerity.Web.Elements | Legerity",
    "keywords": "Namespace Legerity.Web.Elements Classes WebElementWrapper Defines an element wrapper for a ."
  },
  "api/Legerity.Web.Elements.WebElementWrapper.html": {
    "href": "api/Legerity.Web.Elements.WebElementWrapper.html",
    "title": "Class WebElementWrapper | Legerity",
    "keywords": "Class WebElementWrapper Defines an element wrapper for a . Inheritance System.Object WebElementWrapper Button CheckBox FileInput Form Image List Option Select Table TableRow TextInput Implements IElementWrapper < RemoteWebElement > Namespace : Legerity.Web.Elements Assembly : Legerity.Web.dll Syntax public class WebElementWrapper : object, IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source WebElementWrapper(IWebElement) Initializes a new instance of the WebElementWrapper class. Declaration public WebElementWrapper(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source WebElementWrapper(RemoteWebElement) Initializes a new instance of the WebElementWrapper class. Declaration public WebElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Driver Gets the instance of the driver for the web application. Declaration public RemoteWebDriver Driver { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source Element Gets the original reference object. Declaration public RemoteWebElement Element { get; } Property Value Type Description RemoteWebElement | Improve this Doc View Source ElementDriver Gets the driver used to find this element. Declaration public IWebDriver ElementDriver { get; } Property Value Type Description IWebDriver | Improve this Doc View Source IsEnabled Gets a value indicating whether the element is enabled. Declaration public virtual bool IsEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisible Gets a value indicating whether the element is visible. Declaration public virtual bool IsVisible { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Click() Clicks the element. Declaration public virtual void Click() | Improve this Doc View Source FindElement(By) Finds a child element by the specified locator. Declaration public RemoteWebElement FindElement(By locator) Parameters Type Name Description By locator The locator to find a child element by. Returns Type Description RemoteWebElement The . | Improve this Doc View Source FindElements(By) Finds a collection of child elements by the specified locator. Declaration public ReadOnlyCollection<RemoteWebElement> FindElements(By locator) Parameters Type Name Description By locator The locator to find a child element by. Returns Type Description ReadOnlyCollection < RemoteWebElement > The readonly collection of . | Improve this Doc View Source GetAttribute(String) Gets the value of the specified attribute for this element. Declaration public string GetAttribute(string attributeName) Parameters Type Name Description System.String attributeName The name of the attribute. Returns Type Description System.String The attribute's current value if it exists; otherwise, null. | Improve this Doc View Source VerifyElementNotShown(By) Determines whether the given element is not shown. Declaration public void VerifyElementNotShown(By locator) Parameters Type Name Description By locator The locator for the element to locate. | Improve this Doc View Source VerifyElementShown(By) Determines whether the given element is shown. Declaration public void VerifyElementShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition ElementNotShownException Thrown when the element is not shown. | Improve this Doc View Source VerifyElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration public void VerifyElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementNotShownException Thrown when the element is not shown. | Improve this Doc View Source VerifyElementsShown(By) Determines whether the specified elements are shown. Declaration public void VerifyElementsShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source VerifyElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration public void VerifyElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(RemoteWebElement to WebElementWrapper) Allows conversion of a to the WebElementWrapper without direct casting. Declaration public static implicit operator WebElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description WebElementWrapper The WebElementWrapper . Implements IElementWrapper<TElement> Extension Methods WebElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WebElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Web.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.Web.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.Web.Extensions Assembly : Legerity.Web.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetClass(IWebElement) Retrieves the class attribute from the specified element. Declaration public static string GetClass(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a class from. Returns Type Description System.String The class of the element. | Improve this Doc View Source GetClass<TElement>(IElementWrapper<TElement>) Retrieves the class attribute from the specified element. Declaration public static string GetClass<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a class from. Returns Type Description System.String The class of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetHeight(IWebElement) Retrieves the height attribute from the specified element. Declaration public static double GetHeight(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a height from. Returns Type Description System.Double The height of the element. | Improve this Doc View Source GetHeight<TElement>(IElementWrapper<TElement>) Retrieves the height attribute from the specified element. Declaration public static double GetHeight<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a height from. Returns Type Description System.Double The height of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetMaximum(IWebElement) Retrieves the maximum attribute from the specified element. Declaration public static double GetMaximum(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a maximum value from. Returns Type Description System.Double The maximum value of the element. | Improve this Doc View Source GetMaximum<TElement>(IElementWrapper<TElement>) Retrieves the maximum attribute from the specified element. Declaration public static double GetMaximum<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a maximum from. Returns Type Description System.Double The maximum value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetMinimum(IWebElement) Retrieves the minimum attribute from the specified element. Declaration public static double GetMinimum(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a minimum value from. Returns Type Description System.Double The minimum value of the element. | Improve this Doc View Source GetMinimum<TElement>(IElementWrapper<TElement>) Retrieves the minimum attribute from the specified element. Declaration public static double GetMinimum<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a minimum from. Returns Type Description System.Double The minimum value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetName(IWebElement) Retrieves the name attribute from the specified element. Declaration public static string GetName(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a name from. Returns Type Description System.String The name of the element. | Improve this Doc View Source GetName<TElement>(IElementWrapper<TElement>) Retrieves the name attribute from the specified element. Declaration public static string GetName<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a name from. Returns Type Description System.String The name of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetValue(IWebElement) Retrieves the value attribute from the specified element. Declaration public static string GetValue(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a value from. Returns Type Description System.String The value of the element. | Improve this Doc View Source GetValue<TElement>(IElementWrapper<TElement>) Retrieves the value attribute from the specified element. Declaration public static string GetValue<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a value from. Returns Type Description System.String The value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetWidth(IWebElement) Retrieves the width attribute from the specified element. Declaration public static double GetWidth(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a width from. Returns Type Description System.Double The width of the element. | Improve this Doc View Source GetWidth<TElement>(IElementWrapper<TElement>) Retrieves the width attribute from the specified element. Declaration public static double GetWidth<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a width from. Returns Type Description System.Double The width of the element. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.Web.Extensions.html": {
    "href": "api/Legerity.Web.Extensions.html",
    "title": "Namespace Legerity.Web.Extensions | Legerity",
    "keywords": "Namespace Legerity.Web.Extensions Classes AttributeExtensions Defines a collection of extensions for retrieving element attributes. IWebElementExtensions Defines a collection of extensions for the class. WebElementWrapperExtensions Defines a collection of extensions for WebElementWrapper objects."
  },
  "api/Legerity.Web.Extensions.IWebElementExtensions.html": {
    "href": "api/Legerity.Web.Extensions.IWebElementExtensions.html",
    "title": "Class IWebElementExtensions | Legerity",
    "keywords": "Class IWebElementExtensions Defines a collection of extensions for the class. Inheritance System.Object IWebElementExtensions Namespace : Legerity.Web.Extensions Assembly : Legerity.Web.dll Syntax public static class IWebElementExtensions : object Methods | Improve this Doc View Source GetInnerHtml(IWebElement) Retrieves the inner HTML of the specified . Declaration public static string GetInnerHtml(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the inner HTML from. Returns Type Description System.String A string representing the inner HTML. | Improve this Doc View Source GetInnerHtml<TElement>(IElementWrapper<TElement>) Retrieves the value attribute from the specified element. Declaration public static string GetInnerHtml<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the inner HTML from. Returns Type Description System.String The inner HTML of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source HasClass(IWebElement, String) Determines whether the specified has the specified className . Declaration public static bool HasClass(this IWebElement element, string className) Parameters Type Name Description IWebElement element The to check. System.String className The name of the class the element should have. Returns Type Description System.Boolean True if the element has the class; otherwise, false. | Improve this Doc View Source HasClass<TElement>(IElementWrapper<TElement>, String) Determines whether the specified IElementWrapper<TElement> has the specified className . Declaration public static bool HasClass<TElement>(this IElementWrapper<TElement> element, string className) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to check. System.String className The name of the class the element should have. Returns Type Description System.Boolean True if the element has the class; otherwise, false. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.Web.Extensions.WebElementWrapperExtensions.html": {
    "href": "api/Legerity.Web.Extensions.WebElementWrapperExtensions.html",
    "title": "Class WebElementWrapperExtensions | Legerity",
    "keywords": "Class WebElementWrapperExtensions Defines a collection of extensions for WebElementWrapper objects. Inheritance System.Object WebElementWrapperExtensions Namespace : Legerity.Web.Extensions Assembly : Legerity.Web.dll Syntax public static class WebElementWrapperExtensions : object Methods | Improve this Doc View Source TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TElementWrapper : WebElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. Type Parameters Name Description TElementWrapper The type of WebElementWrapper . TResult The type of expected result from the wait condition. | Improve this Doc View Source WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TElementWrapper : WebElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TElementWrapper The type of WebElementWrapper . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Web.html": {
    "href": "api/Legerity.Web.html",
    "title": "Namespace Legerity.Web | Legerity",
    "keywords": "Namespace Legerity.Web Classes WebAppManagerOptions Defines a specific AppManagerOptions for a Web application. WebByExtras Defines a collection of extra locator constraints for . Enums WebAppDriverType Defines the values associated with the web app driver type."
  },
  "api/Legerity.Web.WebAppDriverType.html": {
    "href": "api/Legerity.Web.WebAppDriverType.html",
    "title": "Enum WebAppDriverType | Legerity",
    "keywords": "Enum WebAppDriverType Defines the values associated with the web app driver type. Namespace : Legerity.Web Assembly : Legerity.Core.dll Syntax public enum WebAppDriverType : int Fields Name Description Chrome Chrome. Setting this will cause the application driver to launch for Google Chrome. Edge Edge. Setting this will cause the application driver to launch for Microsoft's Legacy Edge. EdgeChromium Edge Chromium. Setting this will cause the application driver to launch for Microsoft's Chromium Edge. Firefox Firefox. Setting this will cause the application driver to launch for Mozilla Firefox. InternetExplorer Internet Explorer. This will cause the application driver to launch for Microsoft's Internet Explorer. None None. Setting this will cause the application driver to not start. Opera Opera. Setting this will cause the application driver to launch for Opera. Safari Safari. Setting this will cause the application driver to launch for Apple's Safari."
  },
  "api/Legerity.Web.WebAppManagerOptions.html": {
    "href": "api/Legerity.Web.WebAppManagerOptions.html",
    "title": "Class WebAppManagerOptions | Legerity",
    "keywords": "Class WebAppManagerOptions Defines a specific AppManagerOptions for a Web application. Inheritance System.Object AppManagerOptions WebAppManagerOptions Inherited Members AppManagerOptions.DriverUri AppManagerOptions.ImplicitWait AppManagerOptions.DriverOptions Namespace : Legerity.Web Assembly : Legerity.Core.dll Syntax public class WebAppManagerOptions : AppManagerOptions Constructors | Improve this Doc View Source WebAppManagerOptions() Initializes a new instance of the WebAppManagerOptions class. Declaration public WebAppManagerOptions() | Improve this Doc View Source WebAppManagerOptions(WebAppDriverType, String) Initializes a new instance of the WebAppManagerOptions class. Declaration public WebAppManagerOptions(WebAppDriverType driverType, string driverDirectoryPath) Parameters Type Name Description WebAppDriverType driverType The type of web application driver to start. System.String driverDirectoryPath The path to the web application driver directory. Properties | Improve this Doc View Source DesiredSize Gets or sets the desired size of the window for the web application. The default value is 1280x800. If Maximize is set to true, this value is ignored. Declaration public Size DesiredSize { get; set; } Property Value Type Description Size | Improve this Doc View Source DriverType Gets or sets the type of web application driver to start. Declaration public WebAppDriverType DriverType { get; set; } Property Value Type Description WebAppDriverType | Improve this Doc View Source Maximize Gets or sets a value indicating whether to maximize the window for the web application. Declaration public bool Maximize { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Url Gets or sets the URL of the web application to load. Declaration public string Url { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides AppManagerOptions.ToString()"
  },
  "api/Legerity.Web.WebByExtras.html": {
    "href": "api/Legerity.Web.WebByExtras.html",
    "title": "Class WebByExtras | Legerity",
    "keywords": "Class WebByExtras Defines a collection of extra locator constraints for . Inheritance System.Object WebByExtras Namespace : Legerity.Web Assembly : Legerity.Web.dll Syntax public static class WebByExtras : object Methods | Improve this Doc View Source InputType(String) Gets a mechanism to find elements by the HTML input tag with a specified type. Declaration public static By InputType(string inputType) Parameters Type Name Description System.String inputType The input type to find. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source ListItem() Gets a mechanism to find elements by the HTML li tag. Declaration public static By ListItem() Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source Option() Gets a mechanism to find elements by the HTML option tag. Declaration public static By Option() Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source TableDataRow() Gets a mechanism to find table row elements where a HTML tr tag has HTML td elements within it. Declaration public static By TableDataRow() Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source TableHeaderCell() Gets a mechanism to find elements by the HTML th tag. Declaration public static By TableHeaderCell() Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source TableRow() Gets a mechanism to find elements by the HTML tr tag. Declaration public static By TableRow() Returns Type Description By A object the driver can use to find elements."
  },
  "api/Legerity.Windows.Elements.Core.AppBarButton.html": {
    "href": "api/Legerity.Windows.Elements.Core.AppBarButton.html",
    "title": "Class AppBarButton | Legerity",
    "keywords": "Class AppBarButton Defines a wrapper for the core UWP AppBarButton control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button AppBarButton AppBarToggleButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class AppBarButton : Button, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source AppBarButton(WindowsElement) Initializes a new instance of the AppBarButton class. Declaration public AppBarButton(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to AppBarButton) Allows conversion of a to the AppBarButton without direct casting. Declaration public static implicit operator AppBarButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description AppBarButton The AppBarButton . | Improve this Doc View Source Implicit(RemoteWebElement to AppBarButton) Allows conversion of a to the AppBarButton without direct casting. Declaration public static implicit operator AppBarButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AppBarButton The AppBarButton . | Improve this Doc View Source Implicit(WindowsElement to AppBarButton) Allows conversion of a to the AppBarButton without direct casting. Declaration public static implicit operator AppBarButton(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description AppBarButton The AppBarButton . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.AppBarToggleButton.html": {
    "href": "api/Legerity.Windows.Elements.Core.AppBarToggleButton.html",
    "title": "Class AppBarToggleButton | Legerity",
    "keywords": "Class AppBarToggleButton Defines a wrapper for the core UWP AppBarToggleButton control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button AppBarButton AppBarToggleButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class AppBarToggleButton : AppBarButton, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source AppBarToggleButton(WindowsElement) Initializes a new instance of the AppBarToggleButton class. Declaration public AppBarToggleButton(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle button is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the button off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the button on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AppiumWebElement to AppBarToggleButton) Allows conversion of a to the AppBarToggleButton without direct casting. Declaration public static implicit operator AppBarToggleButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description AppBarToggleButton The AppBarToggleButton . | Improve this Doc View Source Implicit(RemoteWebElement to AppBarToggleButton) Allows conversion of a to the AppBarToggleButton without direct casting. Declaration public static implicit operator AppBarToggleButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AppBarToggleButton The AppBarToggleButton . | Improve this Doc View Source Implicit(WindowsElement to AppBarToggleButton) Allows conversion of a to the AppBarToggleButton without direct casting. Declaration public static implicit operator AppBarToggleButton(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description AppBarToggleButton The AppBarToggleButton . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.AutoSuggestBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.AutoSuggestBox.html",
    "title": "Class AutoSuggestBox | Legerity",
    "keywords": "Class AutoSuggestBox Defines a wrapper for the core UWP AutoSuggestBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper AutoSuggestBox Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class AutoSuggestBox : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source AutoSuggestBox(WindowsElement) Initializes a new instance of the AutoSuggestBox class. Declaration public AutoSuggestBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source SuggestionList Gets the element associated with the suggestion list when the SuggestionsPopup is shown. Declaration public virtual ListView SuggestionList { get; } Property Value Type Description ListView | Improve this Doc View Source SuggestionsPopup Gets the element associated with the suggestions popup. Declaration public virtual AppiumWebElement SuggestionsPopup { get; } Property Value Type Description AppiumWebElement | Improve this Doc View Source Text Gets the value of the auto-suggest box. Declaration public virtual string Text { get; } Property Value Type Description System.String | Improve this Doc View Source TextBox Gets the element associated with the text box. Declaration public virtual TextBox TextBox { get; } Property Value Type Description TextBox Methods | Improve this Doc View Source SelectSuggestion(String) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestion(string suggestion) Parameters Type Name Description System.String suggestion The suggestion to select. Exceptions Type Condition ElementNotShownException Thrown when the suggestions popup is not shown. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SelectSuggestion(String, String, Int32) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestion(string value, string suggestion, int popupWaitTimeout = 2000) Parameters Type Name Description System.String value The initial value to set. System.String suggestion The suggestion to select. System.Int32 popupWaitTimeout The timeout to wait for the suggestions popup to appear. Defaults to 2000ms. Exceptions Type Condition ElementNotShownException Thrown when the suggestions popup is not shown. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SelectSuggestionByPartialSuggestion(String, String, Int32) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestionByPartialSuggestion(string value, string partialSuggestion, int popupWaitTimeout = 2000) Parameters Type Name Description System.String value The initial value to set. System.String partialSuggestion The partial suggestion match to select. System.Int32 popupWaitTimeout The timeout to wait for the suggestions popup to appear. Defaults to 2000ms. Exceptions Type Condition ElementNotShownException Thrown when the suggestions popup is not shown. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetText(String) Sets the value of the auto-suggest box. Declaration public virtual void SetText(string value) Parameters Type Name Description System.String value The value to set. Operators | Improve this Doc View Source Implicit(AppiumWebElement to AutoSuggestBox) Allows conversion of a to the AutoSuggestBox without direct casting. Declaration public static implicit operator AutoSuggestBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description AutoSuggestBox The AutoSuggestBox . | Improve this Doc View Source Implicit(RemoteWebElement to AutoSuggestBox) Allows conversion of a to the AutoSuggestBox without direct casting. Declaration public static implicit operator AutoSuggestBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AutoSuggestBox The AutoSuggestBox . | Improve this Doc View Source Implicit(WindowsElement to AutoSuggestBox) Allows conversion of a to the AutoSuggestBox without direct casting. Declaration public static implicit operator AutoSuggestBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description AutoSuggestBox The AutoSuggestBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.Button.html": {
    "href": "api/Legerity.Windows.Elements.Core.Button.html",
    "title": "Class Button | Legerity",
    "keywords": "Class Button Defines a wrapper for the core UWP Button control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button AppBarButton HyperlinkButton RadioButton ToggleButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class Button : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source Button(WindowsElement) Initializes a new instance of the Button class. Declaration public Button(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(RemoteWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Button The Button . | Improve this Doc View Source Implicit(WindowsElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Button The Button . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.CalendarDatePicker.html": {
    "href": "api/Legerity.Windows.Elements.Core.CalendarDatePicker.html",
    "title": "Class CalendarDatePicker | Legerity",
    "keywords": "Class CalendarDatePicker Defines a wrapper for the core UWP CalendarDatePicker control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper CalendarDatePicker Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class CalendarDatePicker : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source CalendarDatePicker(WindowsElement) Initializes a new instance of the CalendarDatePicker class. Declaration public CalendarDatePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source CalendarViewFlyout Gets the element associated with the calendar flyout. Declaration public virtual CalendarView CalendarViewFlyout { get; } Property Value Type Description CalendarView | Improve this Doc View Source SelectedDate Gets the value of the calendar date picker as a . Declaration public virtual DateTime? SelectedDate { get; } Property Value Type Description System.Nullable < DateTime > | Improve this Doc View Source Value Gets the value of the calendar date picker. Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetDate(DateTime) Sets the selected date of the calendar view. Declaration public virtual void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set to. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to CalendarDatePicker) Allows conversion of a to the CalendarDatePicker without direct casting. Declaration public static implicit operator CalendarDatePicker(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description CalendarDatePicker The CalendarDatePicker . | Improve this Doc View Source Implicit(RemoteWebElement to CalendarDatePicker) Allows conversion of a to the CalendarDatePicker without direct casting. Declaration public static implicit operator CalendarDatePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CalendarDatePicker The CalendarDatePicker . | Improve this Doc View Source Implicit(WindowsElement to CalendarDatePicker) Allows conversion of a to the CalendarDatePicker without direct casting. Declaration public static implicit operator CalendarDatePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description CalendarDatePicker The CalendarDatePicker . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.CalendarView.html": {
    "href": "api/Legerity.Windows.Elements.Core.CalendarView.html",
    "title": "Class CalendarView | Legerity",
    "keywords": "Class CalendarView Defines a wrapper for the core UWP CalendarView control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper CalendarView Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class CalendarView : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source CalendarView(WindowsElement) Initializes a new instance of the CalendarView class. Declaration public CalendarView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Days Gets the collection of days associated with the current month in the calendar view. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Days { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source HeaderButton Gets the element associated with the header button (change month, year). Declaration public virtual Button HeaderButton { get; } Property Value Type Description Button | Improve this Doc View Source NextMonthButton Gets the element associated with the next month button. Declaration public virtual Button NextMonthButton { get; } Property Value Type Description Button | Improve this Doc View Source PreviousMonthButton Gets the element associated with the previous month button. Declaration public virtual Button PreviousMonthButton { get; } Property Value Type Description Button | Improve this Doc View Source SelectedDate Gets the value of the calendar view as a . Declaration public virtual DateTime? SelectedDate { get; } Property Value Type Description System.Nullable < DateTime > | Improve this Doc View Source Value Gets the value of the calendar view. Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetDate(DateTime) Sets the selected date of the calendar view. Declaration public void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set to. Operators | Improve this Doc View Source Implicit(AppiumWebElement to CalendarView) Allows conversion of a to the CalendarView without direct casting. Declaration public static implicit operator CalendarView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description CalendarView The CalendarView . | Improve this Doc View Source Implicit(RemoteWebElement to CalendarView) Allows conversion of a to the CalendarView without direct casting. Declaration public static implicit operator CalendarView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CalendarView The CalendarView . | Improve this Doc View Source Implicit(WindowsElement to CalendarView) Allows conversion of a to the CalendarView without direct casting. Declaration public static implicit operator CalendarView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description CalendarView The CalendarView . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.CheckBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.CheckBox.html",
    "title": "Class CheckBox | Legerity",
    "keywords": "Class CheckBox Defines a wrapper for the core UWP CheckBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper CheckBox Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class CheckBox : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source CheckBox(WindowsElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsChecked Gets a value indicating whether the check box is in the checked state. Declaration public virtual bool IsChecked { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIndeterminate Gets a value indicating whether the check box is in the indeterminate state. Declaration public virtual bool IsIndeterminate { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CheckOff() Checks the check box off. Declaration public virtual void CheckOff() | Improve this Doc View Source CheckOn() Checks the check box on. Declaration public virtual void CheckOn() Operators | Improve this Doc View Source Implicit(AppiumWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description CheckBox The CheckBox . | Improve this Doc View Source Implicit(RemoteWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CheckBox The CheckBox . | Improve this Doc View Source Implicit(WindowsElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description CheckBox The CheckBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ComboBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.ComboBox.html",
    "title": "Class ComboBox | Legerity",
    "keywords": "Class ComboBox Defines a wrapper for the core UWP ComboBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ComboBox Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ComboBox : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ComboBox(WindowsElement) Initializes a new instance of the ComboBox class. Declaration public ComboBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source SelectedItem Gets the currently selected item. Declaration public virtual string SelectedItem { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SelectItem(String) Selects an item in the combo-box with the specified item name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item to select. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SelectItemByPartialName(String) Selects an item in the combo-box with the specified partial item name. Declaration public virtual void SelectItemByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to select. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to ComboBox) Allows conversion of a to the ComboBox without direct casting. Declaration public static implicit operator ComboBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ComboBox The ComboBox . | Improve this Doc View Source Implicit(RemoteWebElement to ComboBox) Allows conversion of a to the ComboBox without direct casting. Declaration public static implicit operator ComboBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ComboBox The ComboBox . | Improve this Doc View Source Implicit(WindowsElement to ComboBox) Allows conversion of a to the ComboBox without direct casting. Declaration public static implicit operator ComboBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ComboBox The ComboBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.CommandBar.html": {
    "href": "api/Legerity.Windows.Elements.Core.CommandBar.html",
    "title": "Class CommandBar | Legerity",
    "keywords": "Class CommandBar Defines a wrapper for the core UWP CommandBar control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper CommandBar Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class CommandBar : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source CommandBar(WindowsElement) Initializes a new instance of the CommandBar class. Declaration public CommandBar(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source PrimaryButtons Gets the collection of primary buttons. Declaration public virtual IEnumerable<AppBarButton> PrimaryButtons { get; } Property Value Type Description IEnumerable < AppBarButton > | Improve this Doc View Source SecondaryButtons Gets the collection of secondary buttons. Note, this property will only return a result when the secondary buttons are shown in the flyout. Declaration public virtual IEnumerable<AppBarButton> SecondaryButtons { get; } Property Value Type Description IEnumerable < AppBarButton > | Improve this Doc View Source SecondaryMenuButton Gets the AppBarButton for opening the secondary button menu. Declaration public virtual AppBarButton SecondaryMenuButton { get; } Property Value Type Description AppBarButton Methods | Improve this Doc View Source ClickPrimaryButton(String) Clicks a primary button in the command bar with the specified button name or Automation ID. Declaration public virtual void ClickPrimaryButton(string name) Parameters Type Name Description System.String name The name of the button to click. | Improve this Doc View Source ClickPrimaryButtonByPartialName(String) Clicks a primary button in the command bar with the specified partial button name or Automation ID. Declaration public virtual void ClickPrimaryButtonByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the button to click. | Improve this Doc View Source ClickSecondaryButton(String) Clicks a secondary button in the command bar with the specified button name. Declaration public virtual void ClickSecondaryButton(string name) Parameters Type Name Description System.String name The name of the button to click. Exceptions Type Condition ElementNotShownException Thrown when the more button is not shown. | Improve this Doc View Source ClickSecondaryButtonByPartialName(String) Clicks a secondary button in the command bar with the specified partial button name. Declaration public virtual void ClickSecondaryButtonByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the button to click. Exceptions Type Condition ElementNotShownException Thrown when the more button is not shown. | Improve this Doc View Source OpenSecondaryButtonMenu() Opens the menu associated with the secondary button options. Declaration public virtual void OpenSecondaryButtonMenu() Exceptions Type Condition ElementNotShownException Thrown when the more button is not shown. Operators | Improve this Doc View Source Implicit(AppiumWebElement to CommandBar) Allows conversion of a to the CommandBar without direct casting. Declaration public static implicit operator CommandBar(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description CommandBar The CommandBar . | Improve this Doc View Source Implicit(RemoteWebElement to CommandBar) Allows conversion of a to the CommandBar without direct casting. Declaration public static implicit operator CommandBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CommandBar The CommandBar . | Improve this Doc View Source Implicit(WindowsElement to CommandBar) Allows conversion of a to the CommandBar without direct casting. Declaration public static implicit operator CommandBar(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description CommandBar The CommandBar . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.DatePicker.html": {
    "href": "api/Legerity.Windows.Elements.Core.DatePicker.html",
    "title": "Class DatePicker | Legerity",
    "keywords": "Class DatePicker Defines a wrapper for the core UWP DatePicker control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper DatePicker Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class DatePicker : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source DatePicker(WindowsElement) Initializes a new instance of the DatePicker class. Declaration public DatePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source SelectedDate Gets the value of the date picker as a . Declaration public virtual DateTime? SelectedDate { get; } Property Value Type Description System.Nullable < DateTime > | Improve this Doc View Source Value Gets the value of the date picker. Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetDate(DateTime) Sets the date to the specified date. Declaration public virtual void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set. Operators | Improve this Doc View Source Implicit(AppiumWebElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description DatePicker The DatePicker . | Improve this Doc View Source Implicit(RemoteWebElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description DatePicker The DatePicker . | Improve this Doc View Source Implicit(WindowsElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description DatePicker The DatePicker . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.FlipView.html": {
    "href": "api/Legerity.Windows.Elements.Core.FlipView.html",
    "title": "Class FlipView | Legerity",
    "keywords": "Class FlipView Defines a wrapper for the core UWP FlipView control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper FlipView Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class FlipView : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source FlipView(WindowsElement) Initializes a new instance of the FlipView class. Declaration public FlipView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the flip view. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source NextButton Gets the element associated with the next item button. Declaration public virtual Button NextButton { get; } Property Value Type Description Button | Improve this Doc View Source PreviousButton Gets the element associated with the previous item button. Declaration public virtual Button PreviousButton { get; } Property Value Type Description Button | Improve this Doc View Source SelectedIndex Gets the currently selected item index. Declaration public virtual int SelectedIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SelectedItem Gets the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source SelectItem(String) Selects an item in the flip view by the specified name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item. | Improve this Doc View Source SelectItemByIndex(Int32) Selects an items in the flip view by index. Declaration public virtual void SelectItemByIndex(int index) Parameters Type Name Description System.Int32 index The index of the item to select. | Improve this Doc View Source SelectNext() Selects the next item in the flip view. Declaration public virtual void SelectNext() | Improve this Doc View Source SelectPrevious() Selects the previous item in the flip view. Declaration public virtual void SelectPrevious() Operators | Improve this Doc View Source Implicit(AppiumWebElement to FlipView) Allows conversion of a to the FlipView without direct casting. Declaration public static implicit operator FlipView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description FlipView The FlipView . | Improve this Doc View Source Implicit(RemoteWebElement to FlipView) Allows conversion of a to the FlipView without direct casting. Declaration public static implicit operator FlipView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description FlipView The FlipView . | Improve this Doc View Source Implicit(WindowsElement to FlipView) Allows conversion of a to the FlipView without direct casting. Declaration public static implicit operator FlipView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description FlipView The FlipView . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.GridView.html": {
    "href": "api/Legerity.Windows.Elements.Core.GridView.html",
    "title": "Class GridView | Legerity",
    "keywords": "Class GridView Defines a wrapper for the core UWP GridView control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper GridView Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class GridView : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source GridView(WindowsElement) Initializes a new instance of the GridView class. Declaration public GridView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the grid view. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source SelectedIndex Gets the currently selected item index. Declaration public virtual int SelectedIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SelectedItem Gets the element associated with the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source ClickItem(String) Clicks on an item in the list view with the specified item name. Declaration public virtual void ClickItem(string name) Parameters Type Name Description System.String name The name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source ClickItemByIndex(Int32) Clicks on an item in the list view with the specified item index. Declaration public virtual void ClickItemByIndex(int index) Parameters Type Name Description System.Int32 index The index of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source ClickItemByPartialName(String) Clicks on an item in the list view with the specified partial item name. Declaration public virtual void ClickItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to GridView) Allows conversion of a to the GridView without direct casting. Declaration public static implicit operator GridView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description GridView The GridView . | Improve this Doc View Source Implicit(RemoteWebElement to GridView) Allows conversion of a to the GridView without direct casting. Declaration public static implicit operator GridView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description GridView The GridView . | Improve this Doc View Source Implicit(WindowsElement to GridView) Allows conversion of a to the GridView without direct casting. Declaration public static implicit operator GridView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description GridView The GridView . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.html": {
    "href": "api/Legerity.Windows.Elements.Core.html",
    "title": "Namespace Legerity.Windows.Elements.Core | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements.Core Classes AppBarButton Defines a wrapper for the core UWP AppBarButton control. AppBarToggleButton Defines a wrapper for the core UWP AppBarToggleButton control. AutoSuggestBox Defines a wrapper for the core UWP AutoSuggestBox control. Button Defines a wrapper for the core UWP Button control. CalendarDatePicker Defines a wrapper for the core UWP CalendarDatePicker control. CalendarView Defines a wrapper for the core UWP CalendarView control. CheckBox Defines a wrapper for the core UWP CheckBox control. ComboBox Defines a wrapper for the core UWP ComboBox control. CommandBar Defines a wrapper for the core UWP CommandBar control. DatePicker Defines a wrapper for the core UWP DatePicker control. FlipView Defines a wrapper for the core UWP FlipView control. GridView Defines a wrapper for the core UWP GridView control. Hub Defines a wrapper for the core UWP Hub control. HyperlinkButton Defines a wrapper for the core UWP HyperlinkButton control. InkToolbar Defines the ballpoint pen flyout components of the InkToolbar . InkToolbar.InkToolbarBallpointPenFlyout Defines a color flyout for the ballpoint pen in the InkToolbar . InkToolbar.InkToolbarColorFlyoutBase Defines a base for a color flyout in the InkToolbar . InkToolbar.InkToolbarHighlighterFlyout Defines a color flyout for the highlighter in the InkToolbar . InkToolbar.InkToolbarPencilFlyout Defines a color flyout for the pencil in the InkToolbar . ListBox Defines a wrapper for the core UWP ListBox control. ListView Defines a wrapper for the core UWP ListView control. MenuFlyoutItem Defines a wrapper for the UWP MenuFlyoutItem control. MenuFlyoutSubItem Defines a wrapper for the UWP MenuFlyoutSubItem control. PasswordBox Defines a wrapper for the core UWP PasswordBox control. Pivot Defines a wrapper for the core UWP Pivot control. ProgressBar Defines a wrapper for the core UWP ProgressBar control. ProgressRing Defines a wrapper for the core UWP ProgressRing control. RadioButton Defines a wrapper for the core UWP RadioButton control. ScrollViewer Defines a wrapper for the Windows ScrollViewer control. Slider Defines a wrapper for the core UWP Slider control. TextBlock Defines a wrapper for the core UWP TextBlock control. TextBox Defines a wrapper for the core UWP TextBox control. TimePicker Defines a wrapper for the core UWP TimePicker control. ToggleButton Defines a wrapper for the core UWP ToggleButton control. ToggleSwitch Defines a wrapper for the core UWP ToggleSwitch control. Enums ToggleState Defines the states of a toggle in a Windows element."
  },
  "api/Legerity.Windows.Elements.Core.Hub.html": {
    "href": "api/Legerity.Windows.Elements.Core.Hub.html",
    "title": "Class Hub | Legerity",
    "keywords": "Class Hub Defines a wrapper for the core UWP Hub control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Hub Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class Hub : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source Hub(WindowsElement) Initializes a new instance of the Hub class. Declaration public Hub(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the hub. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > Operators | Improve this Doc View Source Implicit(AppiumWebElement to Hub) Allows conversion of a to the Hub without direct casting. Declaration public static implicit operator Hub(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Hub The Hub . | Improve this Doc View Source Implicit(RemoteWebElement to Hub) Allows conversion of a to the Hub without direct casting. Declaration public static implicit operator Hub(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Hub The Hub . | Improve this Doc View Source Implicit(WindowsElement to Hub) Allows conversion of a to the Hub without direct casting. Declaration public static implicit operator Hub(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Hub The Hub . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.HyperlinkButton.html": {
    "href": "api/Legerity.Windows.Elements.Core.HyperlinkButton.html",
    "title": "Class HyperlinkButton | Legerity",
    "keywords": "Class HyperlinkButton Defines a wrapper for the core UWP HyperlinkButton control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button HyperlinkButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class HyperlinkButton : Button, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source HyperlinkButton(WindowsElement) Initializes a new instance of the HyperlinkButton class. Declaration public HyperlinkButton(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to HyperlinkButton) Allows conversion of a to the HyperlinkButton without direct casting. Declaration public static implicit operator HyperlinkButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description HyperlinkButton The HyperlinkButton . | Improve this Doc View Source Implicit(RemoteWebElement to HyperlinkButton) Allows conversion of a to the HyperlinkButton without direct casting. Declaration public static implicit operator HyperlinkButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description HyperlinkButton The HyperlinkButton . | Improve this Doc View Source Implicit(WindowsElement to HyperlinkButton) Allows conversion of a to the HyperlinkButton without direct casting. Declaration public static implicit operator HyperlinkButton(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description HyperlinkButton The HyperlinkButton . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.InkToolbar.html": {
    "href": "api/Legerity.Windows.Elements.Core.InkToolbar.html",
    "title": "Class InkToolbar | Legerity",
    "keywords": "Class InkToolbar Defines the ballpoint pen flyout components of the InkToolbar . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper InkToolbar Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class InkToolbar : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source InkToolbar(WindowsElement) Initializes a new instance of the InkToolbar class. Declaration public InkToolbar(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source BallpointPenButton Gets the element associated with the ballpoint pen button. Declaration public virtual RadioButton BallpointPenButton { get; } Property Value Type Description RadioButton | Improve this Doc View Source BallpointPenFlyout Gets the element associated with the ballpoint pen flyout. Declaration public virtual InkToolbar.InkToolbarBallpointPenFlyout BallpointPenFlyout { get; } Property Value Type Description InkToolbar.InkToolbarBallpointPenFlyout Remarks This is only available when the ballpoint pen button is selected. | Improve this Doc View Source HighlighterButton Gets the element associated with the highlighter button. Declaration public virtual RadioButton HighlighterButton { get; } Property Value Type Description RadioButton | Improve this Doc View Source HighlighterFlyout Gets the element associated with the highlighter flyout. Declaration public virtual InkToolbar.InkToolbarHighlighterFlyout HighlighterFlyout { get; } Property Value Type Description InkToolbar.InkToolbarHighlighterFlyout Remarks This is only available when the highlighter button is selected. | Improve this Doc View Source PencilButton Gets the element associated with the pencil button. Declaration public virtual RadioButton PencilButton { get; } Property Value Type Description RadioButton | Improve this Doc View Source PencilFlyout Gets the element associated with the pencil flyout. Declaration public virtual InkToolbar.InkToolbarPencilFlyout PencilFlyout { get; } Property Value Type Description InkToolbar.InkToolbarPencilFlyout Remarks This is only available when the pencil button is selected. | Improve this Doc View Source RulerButton Gets the element associated with the ruler button. Declaration public virtual ToggleButton RulerButton { get; } Property Value Type Description ToggleButton | Improve this Doc View Source SelectedBallpointPenColor Gets the currently selected ballpoint pen color. Declaration public virtual string SelectedBallpointPenColor { get; } Property Value Type Description System.String | Improve this Doc View Source SelectedHighlighterColor Gets the currently selected highlighter color. Declaration public virtual string SelectedHighlighterColor { get; } Property Value Type Description System.String | Improve this Doc View Source SelectedPencilColor Gets the currently selected pencil color. Declaration public virtual string SelectedPencilColor { get; } Property Value Type Description System.String Methods | Improve this Doc View Source OpenBallpointPenFlyout() Opens the ballpoint pen flyout. Declaration public virtual void OpenBallpointPenFlyout() Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source OpenHighlighterFlyout() Opens the pencil flyout. Declaration public virtual void OpenHighlighterFlyout() Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source OpenPencilFlyout() Opens the pencil flyout. Declaration public virtual void OpenPencilFlyout() Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source SelectBallpointPen() Selects the ballpoint pen option. Declaration public virtual void SelectBallpointPen() | Improve this Doc View Source SelectHighlighter() Selects the highlighter option. Declaration public virtual void SelectHighlighter() | Improve this Doc View Source SelectPencil() Selects the pencil option. Declaration public virtual void SelectPencil() | Improve this Doc View Source SetBallpointPenColor(String) Sets the toolbar to the ballpoint pen with the given color. Declaration public virtual void SetBallpointPenColor(string color) Parameters Type Name Description System.String color The color to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetBallpointPenColorByPartialName(String) Sets the toolbar to the ballpoint pen with the given partial color name. Declaration public virtual void SetBallpointPenColorByPartialName(string color) Parameters Type Name Description System.String color The partial color name to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetHighlighterColor(String) Sets the toolbar to the highlighter with the given color. Declaration public virtual void SetHighlighterColor(string color) Parameters Type Name Description System.String color The color to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetHighlighterColorByPartialName(String) Sets the toolbar to the highlighter with the given color. Declaration public virtual void SetHighlighterColorByPartialName(string color) Parameters Type Name Description System.String color The color to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetPencilColor(String) Sets the toolbar to the pencil with the given color. Declaration public virtual void SetPencilColor(string color) Parameters Type Name Description System.String color The color to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetPencilColorByPartialName(String) Sets the toolbar to the pencil with the given partial color name. Declaration public virtual void SetPencilColorByPartialName(string color) Parameters Type Name Description System.String color The partial color name to set. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to InkToolbar) Allows conversion of a to the InkToolbar without direct casting. Declaration public static implicit operator InkToolbar(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InkToolbar The InkToolbar . | Improve this Doc View Source Implicit(RemoteWebElement to InkToolbar) Allows conversion of a to the InkToolbar without direct casting. Declaration public static implicit operator InkToolbar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InkToolbar The InkToolbar . | Improve this Doc View Source Implicit(WindowsElement to InkToolbar) Allows conversion of a to the InkToolbar without direct casting. Declaration public static implicit operator InkToolbar(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InkToolbar The InkToolbar . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarBallpointPenFlyout.html": {
    "href": "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarBallpointPenFlyout.html",
    "title": "Class InkToolbar.InkToolbarBallpointPenFlyout | Legerity",
    "keywords": "Class InkToolbar.InkToolbarBallpointPenFlyout Defines a color flyout for the ballpoint pen in the InkToolbar . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper InkToolbar.InkToolbarColorFlyoutBase InkToolbar.InkToolbarBallpointPenFlyout Implements IElementWrapper < WindowsElement > Inherited Members InkToolbar.InkToolbarColorFlyoutBase.ColorGridView InkToolbar.InkToolbarColorFlyoutBase.SizeSlider InkToolbar.InkToolbarColorFlyoutBase.SelectedColor InkToolbar.InkToolbarColorFlyoutBase.SelectedSize InkToolbar.InkToolbarColorFlyoutBase.SetColor(String) InkToolbar.InkToolbarColorFlyoutBase.SetColorByPartialName(String) WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class InkToolbarBallpointPenFlyout : InkToolbar.InkToolbarColorFlyoutBase, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source InkToolbarBallpointPenFlyout(WindowsElement) Initializes a new instance of the InkToolbar.InkToolbarBallpointPenFlyout class. Declaration public InkToolbarBallpointPenFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to InkToolbar.InkToolbarBallpointPenFlyout) Allows conversion of a to the InkToolbar.InkToolbarBallpointPenFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarBallpointPenFlyout(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InkToolbar.InkToolbarBallpointPenFlyout The InkToolbar.InkToolbarBallpointPenFlyout . | Improve this Doc View Source Implicit(RemoteWebElement to InkToolbar.InkToolbarBallpointPenFlyout) Allows conversion of a to the InkToolbar.InkToolbarBallpointPenFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarBallpointPenFlyout(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InkToolbar.InkToolbarBallpointPenFlyout The InkToolbar.InkToolbarBallpointPenFlyout . | Improve this Doc View Source Implicit(WindowsElement to InkToolbar.InkToolbarBallpointPenFlyout) Allows conversion of a to the InkToolbar.InkToolbarBallpointPenFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarBallpointPenFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InkToolbar.InkToolbarBallpointPenFlyout The InkToolbar.InkToolbarBallpointPenFlyout . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarColorFlyoutBase.html": {
    "href": "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarColorFlyoutBase.html",
    "title": "Class InkToolbar.InkToolbarColorFlyoutBase | Legerity",
    "keywords": "Class InkToolbar.InkToolbarColorFlyoutBase Defines a base for a color flyout in the InkToolbar . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper InkToolbar.InkToolbarColorFlyoutBase InkToolbar.InkToolbarBallpointPenFlyout InkToolbar.InkToolbarHighlighterFlyout InkToolbar.InkToolbarPencilFlyout Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public abstract class InkToolbarColorFlyoutBase : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source InkToolbarColorFlyoutBase(WindowsElement) Initializes a new instance of the InkToolbar.InkToolbarColorFlyoutBase class. Declaration protected InkToolbarColorFlyoutBase(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source ColorGridView Gets the element associated with the color grid. Declaration public virtual GridView ColorGridView { get; } Property Value Type Description GridView | Improve this Doc View Source SelectedColor Gets the currently selected color. Declaration public virtual string SelectedColor { get; } Property Value Type Description System.String Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source SelectedSize Gets the currently selected size. Declaration public virtual double SelectedSize { get; } Property Value Type Description System.Double | Improve this Doc View Source SizeSlider Gets the element associated with the size of the ink. Declaration public virtual Slider SizeSlider { get; } Property Value Type Description Slider Methods | Improve this Doc View Source SetColor(String) Sets the color of the ink. Declaration public virtual void SetColor(string color) Parameters Type Name Description System.String color The color to select. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source SetColorByPartialName(String) Sets the color of the ink by partial color name match. Declaration public virtual void SetColorByPartialName(string partialColor) Parameters Type Name Description System.String partialColor The partial color name to select. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarHighlighterFlyout.html": {
    "href": "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarHighlighterFlyout.html",
    "title": "Class InkToolbar.InkToolbarHighlighterFlyout | Legerity",
    "keywords": "Class InkToolbar.InkToolbarHighlighterFlyout Defines a color flyout for the highlighter in the InkToolbar . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper InkToolbar.InkToolbarColorFlyoutBase InkToolbar.InkToolbarHighlighterFlyout Implements IElementWrapper < WindowsElement > Inherited Members InkToolbar.InkToolbarColorFlyoutBase.ColorGridView InkToolbar.InkToolbarColorFlyoutBase.SizeSlider InkToolbar.InkToolbarColorFlyoutBase.SelectedColor InkToolbar.InkToolbarColorFlyoutBase.SelectedSize InkToolbar.InkToolbarColorFlyoutBase.SetColor(String) InkToolbar.InkToolbarColorFlyoutBase.SetColorByPartialName(String) WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class InkToolbarHighlighterFlyout : InkToolbar.InkToolbarColorFlyoutBase, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source InkToolbarHighlighterFlyout(WindowsElement) Initializes a new instance of the InkToolbar.InkToolbarHighlighterFlyout class. Declaration public InkToolbarHighlighterFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to InkToolbar.InkToolbarHighlighterFlyout) Allows conversion of a to the InkToolbar.InkToolbarHighlighterFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarHighlighterFlyout(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InkToolbar.InkToolbarHighlighterFlyout The InkToolbar.InkToolbarHighlighterFlyout . | Improve this Doc View Source Implicit(RemoteWebElement to InkToolbar.InkToolbarHighlighterFlyout) Allows conversion of a to the InkToolbar.InkToolbarHighlighterFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarHighlighterFlyout(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InkToolbar.InkToolbarHighlighterFlyout The InkToolbar.InkToolbarHighlighterFlyout . | Improve this Doc View Source Implicit(WindowsElement to InkToolbar.InkToolbarHighlighterFlyout) Allows conversion of a to the InkToolbar.InkToolbarHighlighterFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarHighlighterFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InkToolbar.InkToolbarHighlighterFlyout The InkToolbar.InkToolbarHighlighterFlyout . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarPencilFlyout.html": {
    "href": "api/Legerity.Windows.Elements.Core.InkToolbar.InkToolbarPencilFlyout.html",
    "title": "Class InkToolbar.InkToolbarPencilFlyout | Legerity",
    "keywords": "Class InkToolbar.InkToolbarPencilFlyout Defines a color flyout for the pencil in the InkToolbar . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper InkToolbar.InkToolbarColorFlyoutBase InkToolbar.InkToolbarPencilFlyout Implements IElementWrapper < WindowsElement > Inherited Members InkToolbar.InkToolbarColorFlyoutBase.ColorGridView InkToolbar.InkToolbarColorFlyoutBase.SizeSlider InkToolbar.InkToolbarColorFlyoutBase.SelectedColor InkToolbar.InkToolbarColorFlyoutBase.SelectedSize InkToolbar.InkToolbarColorFlyoutBase.SetColor(String) InkToolbar.InkToolbarColorFlyoutBase.SetColorByPartialName(String) WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class InkToolbarPencilFlyout : InkToolbar.InkToolbarColorFlyoutBase, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source InkToolbarPencilFlyout(WindowsElement) Initializes a new instance of the InkToolbar.InkToolbarPencilFlyout class. Declaration public InkToolbarPencilFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to InkToolbar.InkToolbarPencilFlyout) Allows conversion of a to the InkToolbar.InkToolbarPencilFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarPencilFlyout(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InkToolbar.InkToolbarPencilFlyout The InkToolbar.InkToolbarPencilFlyout . | Improve this Doc View Source Implicit(RemoteWebElement to InkToolbar.InkToolbarPencilFlyout) Allows conversion of a to the InkToolbar.InkToolbarPencilFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarPencilFlyout(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InkToolbar.InkToolbarPencilFlyout The InkToolbar.InkToolbarPencilFlyout . | Improve this Doc View Source Implicit(WindowsElement to InkToolbar.InkToolbarPencilFlyout) Allows conversion of a to the InkToolbar.InkToolbarPencilFlyout without direct casting. Declaration public static implicit operator InkToolbar.InkToolbarPencilFlyout(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InkToolbar.InkToolbarPencilFlyout The InkToolbar.InkToolbarPencilFlyout . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ListBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.ListBox.html",
    "title": "Class ListBox | Legerity",
    "keywords": "Class ListBox Defines a wrapper for the core UWP ListBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ListBox Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ListBox : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ListBox(WindowsElement) Initializes a new instance of the ListBox class. Declaration public ListBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the list box. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source SelectedItem Gets the element associated with the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source ClickItem(String) Clicks on an item in the list box with the specified item name. Declaration public virtual void ClickItem(string name) Parameters Type Name Description System.String name The name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source ClickItemByPartialName(String) Clicks on an item in the list box with the specified partial item name. Declaration public virtual void ClickItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name match for the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to ListBox) Allows conversion of a to the ListBox without direct casting. Declaration public static implicit operator ListBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ListBox The ListBox . | Improve this Doc View Source Implicit(RemoteWebElement to ListBox) Allows conversion of a to the ListBox without direct casting. Declaration public static implicit operator ListBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ListBox The ListBox . | Improve this Doc View Source Implicit(WindowsElement to ListBox) Allows conversion of a to the ListBox without direct casting. Declaration public static implicit operator ListBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ListBox The ListBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ListView.html": {
    "href": "api/Legerity.Windows.Elements.Core.ListView.html",
    "title": "Class ListView | Legerity",
    "keywords": "Class ListView Defines a wrapper for the core UWP ListView control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ListView Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ListView : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ListView(WindowsElement) Initializes a new instance of the ListView class. Declaration public ListView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the list view. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source SelectedItem Gets the element associated with the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source ClickItem(String) Clicks on an item in the list view with the specified item name. Declaration public virtual void ClickItem(string name) Parameters Type Name Description System.String name The name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source ClickItemByPartialName(String) Clicks on an item in the list view with the specified partial item name. Declaration public virtual void ClickItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name match for the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to ListView) Allows conversion of a to the ListView without direct casting. Declaration public static implicit operator ListView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ListView The ListView . | Improve this Doc View Source Implicit(RemoteWebElement to ListView) Allows conversion of a to the ListView without direct casting. Declaration public static implicit operator ListView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ListView The ListView . | Improve this Doc View Source Implicit(WindowsElement to ListView) Allows conversion of a to the ListView without direct casting. Declaration public static implicit operator ListView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ListView The ListView . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.MenuFlyoutItem.html": {
    "href": "api/Legerity.Windows.Elements.Core.MenuFlyoutItem.html",
    "title": "Class MenuFlyoutItem | Legerity",
    "keywords": "Class MenuFlyoutItem Defines a wrapper for the UWP MenuFlyoutItem control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper MenuFlyoutItem Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class MenuFlyoutItem : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source MenuFlyoutItem(WindowsElement) Initializes a new instance of the MenuFlyoutItem class. Declaration public MenuFlyoutItem(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Operators | Improve this Doc View Source Implicit(AppiumWebElement to MenuFlyoutItem) Allows conversion of a to the MenuFlyoutItem without direct casting. Declaration public static implicit operator MenuFlyoutItem(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description MenuFlyoutItem The MenuFlyoutItem . | Improve this Doc View Source Implicit(RemoteWebElement to MenuFlyoutItem) Allows conversion of a to the MenuFlyoutItem without direct casting. Declaration public static implicit operator MenuFlyoutItem(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description MenuFlyoutItem The MenuFlyoutItem . | Improve this Doc View Source Implicit(WindowsElement to MenuFlyoutItem) Allows conversion of a to the MenuFlyoutItem without direct casting. Declaration public static implicit operator MenuFlyoutItem(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description MenuFlyoutItem The MenuFlyoutItem . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.MenuFlyoutSubItem.html": {
    "href": "api/Legerity.Windows.Elements.Core.MenuFlyoutSubItem.html",
    "title": "Class MenuFlyoutSubItem | Legerity",
    "keywords": "Class MenuFlyoutSubItem Defines a wrapper for the UWP MenuFlyoutSubItem control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper MenuFlyoutSubItem Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class MenuFlyoutSubItem : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source MenuFlyoutSubItem(WindowsElement) Initializes a new instance of the MenuFlyoutSubItem class. Declaration public MenuFlyoutSubItem(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source ChildMenuItems Gets the UI components associated with the child menu items. Declaration public virtual IEnumerable<MenuFlyoutItem> ChildMenuItems { get; } Property Value Type Description IEnumerable < MenuFlyoutItem > | Improve this Doc View Source ChildMenuSubItems Gets the UI components associated with the child menu sub-items. Declaration public virtual IEnumerable<MenuFlyoutSubItem> ChildMenuSubItems { get; } Property Value Type Description IEnumerable < MenuFlyoutSubItem > Methods | Improve this Doc View Source ClickChildOption(String) Clicks on a child menu option with the specified item name. Declaration public virtual MenuFlyoutItem ClickChildOption(string name) Parameters Type Name Description System.String name The name of the item to click. Returns Type Description MenuFlyoutItem The clicked MenuFlyoutItem . | Improve this Doc View Source ClickChildOptionByPartialName(String) Clicks on a child menu option with the specified partial item name. Declaration public virtual MenuFlyoutItem ClickChildOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Returns Type Description MenuFlyoutItem The clicked MenuFlyoutItem . | Improve this Doc View Source ClickChildSubOption(String) Clicks on a child menu sub option with the specified item name. Declaration public virtual MenuFlyoutSubItem ClickChildSubOption(string name) Parameters Type Name Description System.String name The name of the sub-item to click. Returns Type Description MenuFlyoutSubItem The clicked MenuFlyoutSubItem . | Improve this Doc View Source ClickChildSubOptionByPartialName(String) Clicks on a child menu sub option with the specified partial item name. Declaration public virtual MenuFlyoutSubItem ClickChildSubOptionByPartialName(string name) Parameters Type Name Description System.String name The name of the sub-item to click. Returns Type Description MenuFlyoutSubItem The clicked MenuFlyoutSubItem . Operators | Improve this Doc View Source Implicit(AppiumWebElement to MenuFlyoutSubItem) Allows conversion of a to the MenuFlyoutSubItem without direct casting. Declaration public static implicit operator MenuFlyoutSubItem(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description MenuFlyoutSubItem The MenuFlyoutSubItem . | Improve this Doc View Source Implicit(RemoteWebElement to MenuFlyoutSubItem) Allows conversion of a to the MenuFlyoutSubItem without direct casting. Declaration public static implicit operator MenuFlyoutSubItem(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description MenuFlyoutSubItem The MenuFlyoutSubItem . | Improve this Doc View Source Implicit(WindowsElement to MenuFlyoutSubItem) Allows conversion of a to the MenuFlyoutSubItem without direct casting. Declaration public static implicit operator MenuFlyoutSubItem(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description MenuFlyoutSubItem The MenuFlyoutSubItem . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.PasswordBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.PasswordBox.html",
    "title": "Class PasswordBox | Legerity",
    "keywords": "Class PasswordBox Defines a wrapper for the core UWP PasswordBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper TextBox PasswordBox Implements IElementWrapper < WindowsElement > Inherited Members TextBox.Text TextBox.IsReadonly TextBox.SetText(String) TextBox.AppendText(String) TextBox.ClearText() WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class PasswordBox : TextBox, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source PasswordBox(WindowsElement) Initializes a new instance of the PasswordBox class. Declaration public PasswordBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Password Gets the password text value in the password box. Declaration public virtual string Password { get; } Property Value Type Description System.String Remarks To get the password text value, the password box must be revealed using the RevealPassword() method. Otherwise, the text value will be hidden characters. | Improve this Doc View Source RevealButton Gets the element associated with the reveal password button. Declaration public virtual ToggleButton RevealButton { get; } Property Value Type Description ToggleButton Methods | Improve this Doc View Source HidePassword() Hides the password text in the password box. Declaration public virtual void HidePassword() | Improve this Doc View Source RevealPassword() Reveals the password text in the password box. Declaration public virtual void RevealPassword() Operators | Improve this Doc View Source Implicit(AppiumWebElement to PasswordBox) Allows conversion of a to the PasswordBox without direct casting. Declaration public static implicit operator PasswordBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description PasswordBox The PasswordBox . | Improve this Doc View Source Implicit(RemoteWebElement to PasswordBox) Allows conversion of a to the PasswordBox without direct casting. Declaration public static implicit operator PasswordBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description PasswordBox The PasswordBox . | Improve this Doc View Source Implicit(WindowsElement to PasswordBox) Allows conversion of a to the PasswordBox without direct casting. Declaration public static implicit operator PasswordBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description PasswordBox The PasswordBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.Pivot.html": {
    "href": "api/Legerity.Windows.Elements.Core.Pivot.html",
    "title": "Class Pivot | Legerity",
    "keywords": "Class Pivot Defines a wrapper for the core UWP Pivot control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Pivot Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class Pivot : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source Pivot(WindowsElement) Initializes a new instance of the Pivot class. Declaration public Pivot(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the pivot. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source SelectedItem Gets the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source ClickItem(String) Clicks on an item in the pivot with the specified item name. Declaration public virtual void ClickItem(string name) Parameters Type Name Description System.String name The name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. | Improve this Doc View Source ClickItemByPartialName(String) Clicks on an item in the pivot with the specified partial item name. Declaration public virtual void ClickItemByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to Pivot) Allows conversion of a to the Pivot without direct casting. Declaration public static implicit operator Pivot(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Pivot The Pivot . | Improve this Doc View Source Implicit(RemoteWebElement to Pivot) Allows conversion of a to the Pivot without direct casting. Declaration public static implicit operator Pivot(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Pivot The Pivot . | Improve this Doc View Source Implicit(WindowsElement to Pivot) Allows conversion of a to the Pivot without direct casting. Declaration public static implicit operator Pivot(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Pivot The Pivot . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ProgressBar.html": {
    "href": "api/Legerity.Windows.Elements.Core.ProgressBar.html",
    "title": "Class ProgressBar | Legerity",
    "keywords": "Class ProgressBar Defines a wrapper for the core UWP ProgressBar control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ProgressBar Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ProgressBar : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ProgressBar(WindowsElement) Initializes a new instance of the ProgressBar class. Declaration public ProgressBar(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsIndeterminate Gets a value indicating whether the control is in an indeterminate state. Declaration public bool IsIndeterminate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Percentage Gets the value of the progress bar. Declaration public virtual double Percentage { get; } Property Value Type Description System.Double Operators | Improve this Doc View Source Implicit(AppiumWebElement to ProgressBar) Allows conversion of a to the ProgressBar without direct casting. Declaration public static implicit operator ProgressBar(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ProgressBar The ProgressBar . | Improve this Doc View Source Implicit(RemoteWebElement to ProgressBar) Allows conversion of a to the ProgressBar without direct casting. Declaration public static implicit operator ProgressBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ProgressBar The ProgressBar . | Improve this Doc View Source Implicit(WindowsElement to ProgressBar) Allows conversion of a to the ProgressBar without direct casting. Declaration public static implicit operator ProgressBar(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ProgressBar The ProgressBar . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ProgressRing.html": {
    "href": "api/Legerity.Windows.Elements.Core.ProgressRing.html",
    "title": "Class ProgressRing | Legerity",
    "keywords": "Class ProgressRing Defines a wrapper for the core UWP ProgressRing control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ProgressRing Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ProgressRing : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ProgressRing(WindowsElement) Initializes a new instance of the ProgressRing class. Declaration public ProgressRing(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsIndeterminate Gets a value indicating whether the control is in an indeterminate state. Declaration public bool IsIndeterminate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Percentage Gets the value of the progress ring. Declaration public virtual double Percentage { get; } Property Value Type Description System.Double Operators | Improve this Doc View Source Implicit(AppiumWebElement to ProgressRing) Allows conversion of a to the ProgressRing without direct casting. Declaration public static implicit operator ProgressRing(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ProgressRing The ProgressRing . | Improve this Doc View Source Implicit(RemoteWebElement to ProgressRing) Allows conversion of a to the ProgressRing without direct casting. Declaration public static implicit operator ProgressRing(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ProgressRing The ProgressRing . | Improve this Doc View Source Implicit(WindowsElement to ProgressRing) Allows conversion of a to the ProgressRing without direct casting. Declaration public static implicit operator ProgressRing(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ProgressRing The ProgressRing . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.RadioButton.html": {
    "href": "api/Legerity.Windows.Elements.Core.RadioButton.html",
    "title": "Class RadioButton | Legerity",
    "keywords": "Class RadioButton Defines a wrapper for the core UWP RadioButton control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button RadioButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class RadioButton : Button, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source RadioButton(WindowsElement) Initializes a new instance of the RadioButton class. Declaration public RadioButton(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsSelected Gets a value indicating whether the radio button is selected. Declaration public virtual bool IsSelected { get; } Property Value Type Description System.Boolean Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadioButton The RadioButton . | Improve this Doc View Source Implicit(RemoteWebElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadioButton The RadioButton . | Improve this Doc View Source Implicit(WindowsElement to RadioButton) Allows conversion of a to the RadioButton without direct casting. Declaration public static implicit operator RadioButton(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadioButton The RadioButton . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ScrollViewer.html": {
    "href": "api/Legerity.Windows.Elements.Core.ScrollViewer.html",
    "title": "Class ScrollViewer | Legerity",
    "keywords": "Class ScrollViewer Defines a wrapper for the Windows ScrollViewer control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ScrollViewer Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ScrollViewer : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ScrollViewer(WindowsElement) Initializes a new instance of the ScrollViewer class. Declaration public ScrollViewer(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Methods | Improve this Doc View Source ScrollToBottom() Scrolls the scroll viewer to the bottom. Declaration public virtual void ScrollToBottom() | Improve this Doc View Source ScrollToTop() Scrolls the scroll viewer to the top. Declaration public virtual void ScrollToTop() Operators | Improve this Doc View Source Implicit(AppiumWebElement to ScrollViewer) Allows conversion of a to the ScrollViewer without direct casting. Declaration public static implicit operator ScrollViewer(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ScrollViewer The ScrollViewer . | Improve this Doc View Source Implicit(RemoteWebElement to ScrollViewer) Allows conversion of a to the ScrollViewer without direct casting. Declaration public static implicit operator ScrollViewer(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ScrollViewer The ScrollViewer . | Improve this Doc View Source Implicit(WindowsElement to ScrollViewer) Allows conversion of a to the ScrollViewer without direct casting. Declaration public static implicit operator ScrollViewer(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ScrollViewer The ScrollViewer . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.Slider.html": {
    "href": "api/Legerity.Windows.Elements.Core.Slider.html",
    "title": "Class Slider | Legerity",
    "keywords": "Class Slider Defines a wrapper for the core UWP Slider control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Slider Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class Slider : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source Slider(WindowsElement) Initializes a new instance of the Slider class. Declaration public Slider(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximum Gets the maximum value of the slider. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the slider. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source SmallChange Gets the small change (step) value of the slider. Declaration public virtual double SmallChange { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the slider. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source SetValue(Double) Sets the value of the slider. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Slider The Slider . | Improve this Doc View Source Implicit(RemoteWebElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Slider The Slider . | Improve this Doc View Source Implicit(WindowsElement to Slider) Allows conversion of a to the Slider without direct casting. Declaration public static implicit operator Slider(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Slider The Slider . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.TextBlock.html": {
    "href": "api/Legerity.Windows.Elements.Core.TextBlock.html",
    "title": "Class TextBlock | Legerity",
    "keywords": "Class TextBlock Defines a wrapper for the core UWP TextBlock control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper TextBlock Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class TextBlock : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source TextBlock(WindowsElement) Initializes a new instance of the TextBlock class. Declaration public TextBlock(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Text Gets the text value of the text block. Declaration public virtual string Text { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(AppiumWebElement to TextBlock) Allows conversion of a to the TextBlock without direct casting. Declaration public static implicit operator TextBlock(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TextBlock The TextBlock . | Improve this Doc View Source Implicit(RemoteWebElement to TextBlock) Allows conversion of a to the TextBlock without direct casting. Declaration public static implicit operator TextBlock(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextBlock The TextBlock . | Improve this Doc View Source Implicit(WindowsElement to TextBlock) Allows conversion of a to the TextBlock without direct casting. Declaration public static implicit operator TextBlock(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description TextBlock The TextBlock . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.TextBox.html": {
    "href": "api/Legerity.Windows.Elements.Core.TextBox.html",
    "title": "Class TextBox | Legerity",
    "keywords": "Class TextBox Defines a wrapper for the core UWP TextBox control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper TextBox PasswordBox Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class TextBox : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source TextBox(WindowsElement) Initializes a new instance of the TextBox class. Declaration public TextBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsReadonly Gets a value indicating whether the text box is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Text Gets the text value of the text box. Declaration public virtual string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendText(String) Appends the specified text to the text box. Declaration public virtual void AppendText(string text) Parameters Type Name Description System.String text The text to append. | Improve this Doc View Source ClearText() Clears the text from the text box. Declaration public virtual void ClearText() | Improve this Doc View Source SetText(String) Sets the text of the text box to the specified text. Declaration public virtual void SetText(string text) Parameters Type Name Description System.String text The text to display. Operators | Improve this Doc View Source Implicit(AppiumWebElement to TextBox) Allows conversion of a to the TextBox without direct casting. Declaration public static implicit operator TextBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TextBox The TextBox . | Improve this Doc View Source Implicit(RemoteWebElement to TextBox) Allows conversion of a to the TextBox without direct casting. Declaration public static implicit operator TextBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextBox The TextBox . | Improve this Doc View Source Implicit(WindowsElement to TextBox) Allows conversion of a to the TextBox without direct casting. Declaration public static implicit operator TextBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description TextBox The TextBox . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.TimePicker.html": {
    "href": "api/Legerity.Windows.Elements.Core.TimePicker.html",
    "title": "Class TimePicker | Legerity",
    "keywords": "Class TimePicker Defines a wrapper for the core UWP TimePicker control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper TimePicker Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class TimePicker : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source TimePicker(WindowsElement) Initializes a new instance of the TimePicker class. Declaration public TimePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Methods | Improve this Doc View Source SetTime(TimeSpan) Sets the time to the specified time. Declaration public virtual void SetTime(TimeSpan time) Parameters Type Name Description TimeSpan time The time to set. Operators | Improve this Doc View Source Implicit(AppiumWebElement to TimePicker) Allows conversion of a to the TimePicker without direct casting. Declaration public static implicit operator TimePicker(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TimePicker The TimePicker . | Improve this Doc View Source Implicit(RemoteWebElement to TimePicker) Allows conversion of a to the TimePicker without direct casting. Declaration public static implicit operator TimePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TimePicker The TimePicker . | Improve this Doc View Source Implicit(WindowsElement to TimePicker) Allows conversion of a to the TimePicker without direct casting. Declaration public static implicit operator TimePicker(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description TimePicker The TimePicker . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ToggleButton.html": {
    "href": "api/Legerity.Windows.Elements.Core.ToggleButton.html",
    "title": "Class ToggleButton | Legerity",
    "keywords": "Class ToggleButton Defines a wrapper for the core UWP ToggleButton control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper Button ToggleButton Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ToggleButton : Button, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ToggleButton(WindowsElement) Initializes a new instance of the ToggleButton class. Declaration public ToggleButton(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle button is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the button off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the button on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AppiumWebElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ToggleButton The ToggleButton . | Improve this Doc View Source Implicit(RemoteWebElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ToggleButton The ToggleButton . | Improve this Doc View Source Implicit(WindowsElement to ToggleButton) Allows conversion of a to the ToggleButton without direct casting. Declaration public static implicit operator ToggleButton(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ToggleButton The ToggleButton . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.Core.ToggleState.html": {
    "href": "api/Legerity.Windows.Elements.Core.ToggleState.html",
    "title": "Enum ToggleState | Legerity",
    "keywords": "Enum ToggleState Defines the states of a toggle in a Windows element. Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public enum ToggleState : int Fields Name Description Checked The toggle is checked. Indeterminate The toggle is indeterminate. Unchecked The toggle is not checked."
  },
  "api/Legerity.Windows.Elements.Core.ToggleSwitch.html": {
    "href": "api/Legerity.Windows.Elements.Core.ToggleSwitch.html",
    "title": "Class ToggleSwitch | Legerity",
    "keywords": "Class ToggleSwitch Defines a wrapper for the core UWP ToggleSwitch control. Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper ToggleSwitch Implements IElementWrapper < WindowsElement > Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Core Assembly : Legerity.Windows.dll Syntax public class ToggleSwitch : WindowsElementWrapper, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source ToggleSwitch(WindowsElement) Initializes a new instance of the ToggleSwitch class. Declaration public ToggleSwitch(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle switch is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the switch off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the switch on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(AppiumWebElement to ToggleSwitch) Allows conversion of a to the ToggleSwitch without direct casting. Declaration public static implicit operator ToggleSwitch(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description ToggleSwitch The ToggleSwitch . | Improve this Doc View Source Implicit(RemoteWebElement to ToggleSwitch) Allows conversion of a to the ToggleSwitch without direct casting. Declaration public static implicit operator ToggleSwitch(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ToggleSwitch The ToggleSwitch . | Improve this Doc View Source Implicit(WindowsElement to ToggleSwitch) Allows conversion of a to the ToggleSwitch without direct casting. Declaration public static implicit operator ToggleSwitch(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description ToggleSwitch The ToggleSwitch . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.html": {
    "href": "api/Legerity.Windows.Elements.html",
    "title": "Namespace Legerity.Windows.Elements | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements Classes WindowsElementWrapper Defines an element wrapper for a ."
  },
  "api/Legerity.Windows.Elements.MADE.DropDownList.html": {
    "href": "api/Legerity.Windows.Elements.MADE.DropDownList.html",
    "title": "Class DropDownList | Legerity",
    "keywords": "Class DropDownList Defines a wrapper for the MADE.NET UWP DropDownList control. Inheritance System.Object WindowsElementWrapper DropDownList Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.MADE Assembly : Legerity.MADE.dll Syntax public class DropDownList : WindowsElementWrapper Constructors | Improve this Doc View Source DropDownList(WindowsElement) Initializes a new instance of the DropDownList class. Declaration public DropDownList(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source DropDown Gets the ListView element associated with the drop down content. Declaration public virtual ListView DropDown { get; } Property Value Type Description ListView Methods | Improve this Doc View Source IsDropDownOpen() Determines whether the drop down is open. Declaration public virtual bool IsDropDownOpen() Returns Type Description System.Boolean True if the drop down is open; otherwise, false. | Improve this Doc View Source OpenDropDown() Opens the drop down if it is not already open. Declaration public virtual void OpenDropDown() | Improve this Doc View Source SelectItem(String) Selects an item in the combo-box with the specified item name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item to select. | Improve this Doc View Source SelectItemByPartialName(String) Selects an item in the combo-box with the specified partial item name. Declaration public virtual void SelectItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name match for the item to select. Operators | Improve this Doc View Source Implicit(AppiumWebElement to DropDownList) Allows conversion of a to the DropDownList without direct casting. Declaration public static implicit operator DropDownList(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description DropDownList The DropDownList . | Improve this Doc View Source Implicit(RemoteWebElement to DropDownList) Allows conversion of a to the DropDownList without direct casting. Declaration public static implicit operator DropDownList(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description DropDownList The DropDownList . | Improve this Doc View Source Implicit(WindowsElement to DropDownList) Allows conversion of a to the DropDownList without direct casting. Declaration public static implicit operator DropDownList(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description DropDownList The DropDownList ."
  },
  "api/Legerity.Windows.Elements.MADE.html": {
    "href": "api/Legerity.Windows.Elements.MADE.html",
    "title": "Namespace Legerity.Windows.Elements.MADE | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements.MADE Classes DropDownList Defines a wrapper for the MADE.NET UWP DropDownList control. InputValidator Defines a wrapper for the MADE.NET UWP InputValidator control."
  },
  "api/Legerity.Windows.Elements.MADE.InputValidator.html": {
    "href": "api/Legerity.Windows.Elements.MADE.InputValidator.html",
    "title": "Class InputValidator | Legerity",
    "keywords": "Class InputValidator Defines a wrapper for the MADE.NET UWP InputValidator control. Inheritance System.Object WindowsElementWrapper InputValidator Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.MADE Assembly : Legerity.MADE.dll Syntax public class InputValidator : WindowsElementWrapper Constructors | Improve this Doc View Source InputValidator(WindowsElement) Initializes a new instance of the InputValidator class. Declaration public InputValidator(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Message Gets the validation feedback message associated with the ValidationFeedback element. Declaration public virtual string Message { get; } Property Value Type Description System.String | Improve this Doc View Source ValidationFeedback Gets the TextBlock associated with the validation feedback message. Declaration public virtual TextBlock ValidationFeedback { get; } Property Value Type Description TextBlock Methods | Improve this Doc View Source FeedbackMessage() Retrieves the feedback message text if the ValidationFeedback is shown. Declaration public virtual string FeedbackMessage() Returns Type Description System.String The feedback message text of the ValidationFeedback element. | Improve this Doc View Source Input(By) Retrieves the input element with the given locator. Declaration public AppiumWebElement Input(By locator) Parameters Type Name Description By locator The locator to find the input element. Returns Type Description AppiumWebElement The if found; otherwise, throws . Operators | Improve this Doc View Source Implicit(AppiumWebElement to InputValidator) Allows conversion of a to the InputValidator without direct casting. Declaration public static implicit operator InputValidator(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InputValidator The InputValidator . | Improve this Doc View Source Implicit(RemoteWebElement to InputValidator) Allows conversion of a to the InputValidator without direct casting. Declaration public static implicit operator InputValidator(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InputValidator The InputValidator . | Improve this Doc View Source Implicit(WindowsElement to InputValidator) Allows conversion of a to the InputValidator without direct casting. Declaration public static implicit operator InputValidator(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InputValidator The InputValidator ."
  },
  "api/Legerity.Windows.Elements.Telerik.html": {
    "href": "api/Legerity.Windows.Elements.Telerik.html",
    "title": "Namespace Legerity.Windows.Elements.Telerik | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements.Telerik Classes RadAutoCompleteBox Defines a wrapper for the Telerik UWP RadAutoCompleteBox control. RadBulletGraph Defines a wrapper for the Telerik UWP RadBulletGraph control. RadBusyIndicator Defines a wrapper for the Telerik UWP RadBusyIndicator control. RadNumericBox Defines a wrapper for the Telerik UWP RadNumericBox control."
  },
  "api/Legerity.Windows.Elements.Telerik.RadAutoCompleteBox.html": {
    "href": "api/Legerity.Windows.Elements.Telerik.RadAutoCompleteBox.html",
    "title": "Class RadAutoCompleteBox | Legerity",
    "keywords": "Class RadAutoCompleteBox Defines a wrapper for the Telerik UWP RadAutoCompleteBox control. Inheritance System.Object WindowsElementWrapper RadAutoCompleteBox Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Telerik Assembly : Legerity.Telerik.Uwp.dll Syntax public class RadAutoCompleteBox : WindowsElementWrapper Constructors | Improve this Doc View Source RadAutoCompleteBox(WindowsElement) Initializes a new instance of the RadAutoCompleteBox class. Declaration public RadAutoCompleteBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Text Gets the value of the auto-suggest box. Declaration public virtual string Text { get; } Property Value Type Description System.String | Improve this Doc View Source TextBox Gets the element associated with the text box. Declaration public virtual TextBox TextBox { get; } Property Value Type Description TextBox Methods | Improve this Doc View Source SelectSuggestion(String) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestion(string suggestion) Parameters Type Name Description System.String suggestion The suggestion to select. | Improve this Doc View Source SelectSuggestion(String, String) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestion(string value, string suggestion) Parameters Type Name Description System.String value The initial value to set. System.String suggestion The suggestion to select. | Improve this Doc View Source SelectSuggestionByPartialSuggestion(String, String) Selects a suggestion from the auto-suggest box. Declaration public virtual void SelectSuggestionByPartialSuggestion(string value, string partialSuggestion) Parameters Type Name Description System.String value The initial value to set. System.String partialSuggestion The partial suggestion match to select. | Improve this Doc View Source SetText(String) Sets the value of the auto-suggest box. Declaration public virtual void SetText(string value) Parameters Type Name Description System.String value The value to set. Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadAutoCompleteBox) Allows conversion of a to the RadAutoCompleteBox without direct casting. Declaration public static implicit operator RadAutoCompleteBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadAutoCompleteBox The RadAutoCompleteBox . | Improve this Doc View Source Implicit(RemoteWebElement to RadAutoCompleteBox) Allows conversion of a to the RadAutoCompleteBox without direct casting. Declaration public static implicit operator RadAutoCompleteBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadAutoCompleteBox The RadAutoCompleteBox . | Improve this Doc View Source Implicit(WindowsElement to RadAutoCompleteBox) Allows conversion of a to the RadAutoCompleteBox without direct casting. Declaration public static implicit operator RadAutoCompleteBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadAutoCompleteBox The RadAutoCompleteBox ."
  },
  "api/Legerity.Windows.Elements.Telerik.RadBulletGraph.html": {
    "href": "api/Legerity.Windows.Elements.Telerik.RadBulletGraph.html",
    "title": "Class RadBulletGraph | Legerity",
    "keywords": "Class RadBulletGraph Defines a wrapper for the Telerik UWP RadBulletGraph control. Inheritance System.Object WindowsElementWrapper RadBulletGraph Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Telerik Assembly : Legerity.Telerik.Uwp.dll Syntax public class RadBulletGraph : WindowsElementWrapper Constructors | Improve this Doc View Source RadBulletGraph(WindowsElement) Initializes a new instance of the RadBulletGraph class. Declaration public RadBulletGraph(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Maximum Gets the maximum value of the bullet graph. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the bullet graph. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the bullet graph. Declaration public virtual double Value { get; } Property Value Type Description System.Double Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadBulletGraph) Allows conversion of a to the RadBulletGraph without direct casting. Declaration public static implicit operator RadBulletGraph(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadBulletGraph The RadBulletGraph . | Improve this Doc View Source Implicit(RemoteWebElement to RadBulletGraph) Allows conversion of a to the RadBulletGraph without direct casting. Declaration public static implicit operator RadBulletGraph(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadBulletGraph The RadBulletGraph . | Improve this Doc View Source Implicit(WindowsElement to RadBulletGraph) Allows conversion of a to the RadBulletGraph without direct casting. Declaration public static implicit operator RadBulletGraph(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadBulletGraph The RadBulletGraph ."
  },
  "api/Legerity.Windows.Elements.Telerik.RadBusyIndicator.html": {
    "href": "api/Legerity.Windows.Elements.Telerik.RadBusyIndicator.html",
    "title": "Class RadBusyIndicator | Legerity",
    "keywords": "Class RadBusyIndicator Defines a wrapper for the Telerik UWP RadBusyIndicator control. Inheritance System.Object WindowsElementWrapper RadBusyIndicator Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Telerik Assembly : Legerity.Telerik.Uwp.dll Syntax public class RadBusyIndicator : WindowsElementWrapper Constructors | Improve this Doc View Source RadBusyIndicator(WindowsElement) Initializes a new instance of the RadBusyIndicator class. Declaration public RadBusyIndicator(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the busy indicator is on. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadBusyIndicator) Allows conversion of a to the RadBusyIndicator without direct casting. Declaration public static implicit operator RadBusyIndicator(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadBusyIndicator The RadBusyIndicator . | Improve this Doc View Source Implicit(RemoteWebElement to RadBusyIndicator) Allows conversion of a to the RadBusyIndicator without direct casting. Declaration public static implicit operator RadBusyIndicator(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadBusyIndicator The RadBusyIndicator . | Improve this Doc View Source Implicit(WindowsElement to RadBusyIndicator) Allows conversion of a to the RadBusyIndicator without direct casting. Declaration public static implicit operator RadBusyIndicator(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadBusyIndicator The RadBusyIndicator ."
  },
  "api/Legerity.Windows.Elements.Telerik.RadNumericBox.html": {
    "href": "api/Legerity.Windows.Elements.Telerik.RadNumericBox.html",
    "title": "Class RadNumericBox | Legerity",
    "keywords": "Class RadNumericBox Defines a wrapper for the Telerik UWP RadNumericBox control. Inheritance System.Object WindowsElementWrapper RadNumericBox Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.Telerik Assembly : Legerity.Telerik.Uwp.dll Syntax public class RadNumericBox : WindowsElementWrapper Constructors | Improve this Doc View Source RadNumericBox(WindowsElement) Initializes a new instance of the RadNumericBox class. Declaration public RadNumericBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source DecreaseButton Gets the element associated with the decrease button. Declaration public virtual Button DecreaseButton { get; } Property Value Type Description Button | Improve this Doc View Source Increase Gets the element associated with the increase button. Declaration public virtual Button Increase { get; } Property Value Type Description Button | Improve this Doc View Source InputBox Gets the element associated with the input text box. Declaration public virtual TextBox InputBox { get; } Property Value Type Description TextBox | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximum Gets the maximum value of the RadNumericBox. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the RadNumericBox. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source SmallChange Gets the small change (step) value of the RadNumericBox. Declaration public virtual double SmallChange { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the RadNumericBox. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Decrement() Decreases the number box value by the SmallChange value. Declaration public virtual void Decrement() | Improve this Doc View Source Increment() Increases the number box value by the SmallChange value. Declaration public virtual void Increment() | Improve this Doc View Source SetValue(Double) Sets the value of the RadNumericBox. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadNumericBox) Allows conversion of a to the RadNumericBox without direct casting. Declaration public static implicit operator RadNumericBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadNumericBox The RadNumericBox . | Improve this Doc View Source Implicit(RemoteWebElement to RadNumericBox) Allows conversion of a to the RadNumericBox without direct casting. Declaration public static implicit operator RadNumericBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadNumericBox The RadNumericBox . | Improve this Doc View Source Implicit(WindowsElement to RadNumericBox) Allows conversion of a to the RadNumericBox without direct casting. Declaration public static implicit operator RadNumericBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadNumericBox The RadNumericBox ."
  },
  "api/Legerity.Windows.Elements.WCT.BladeView.html": {
    "href": "api/Legerity.Windows.Elements.WCT.BladeView.html",
    "title": "Class BladeView | Legerity",
    "keywords": "Class BladeView Defines a wrapper for the Windows Community Toolkit BladeView control. Inheritance System.Object WindowsElementWrapper BladeView Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class BladeView : WindowsElementWrapper Constructors | Improve this Doc View Source BladeView(WindowsElement) Initializes a new instance of the BladeView class. Declaration public BladeView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Blades Gets the UI components associated with the child blades. Declaration public virtual IEnumerable<BladeViewItem> Blades { get; } Property Value Type Description IEnumerable < BladeViewItem > Methods | Improve this Doc View Source CloseBlade(String) Closes an open blade by name. Declaration public virtual void CloseBlade(string name) Parameters Type Name Description System.String name The name of the blade to close. | Improve this Doc View Source CloseBladeByPartialName(String) Closes an open blade by partial name. Declaration public virtual void CloseBladeByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the blade to close. | Improve this Doc View Source GetBlade(String) Retrieves a BladeViewItem by the given name. Declaration public virtual BladeViewItem GetBlade(string name) Parameters Type Name Description System.String name The name of the blade to retrieve. Returns Type Description BladeViewItem A BladeViewItem instance if found; otherwise, null. | Improve this Doc View Source GetBladeByPartialName(String) Retrieves a BladeViewItem by the given partial name. Declaration public virtual BladeViewItem GetBladeByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the blade to retrieve. Returns Type Description BladeViewItem A BladeViewItem instance if found; otherwise, null. Operators | Improve this Doc View Source Implicit(AppiumWebElement to BladeView) Allows conversion of a to the BladeView without direct casting. Declaration public static implicit operator BladeView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description BladeView The BladeView . | Improve this Doc View Source Implicit(RemoteWebElement to BladeView) Allows conversion of a to the BladeView without direct casting. Declaration public static implicit operator BladeView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description BladeView The BladeView . | Improve this Doc View Source Implicit(WindowsElement to BladeView) Allows conversion of a to the BladeView without direct casting. Declaration public static implicit operator BladeView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description BladeView The BladeView ."
  },
  "api/Legerity.Windows.Elements.WCT.BladeViewItem.html": {
    "href": "api/Legerity.Windows.Elements.WCT.BladeViewItem.html",
    "title": "Class BladeViewItem | Legerity",
    "keywords": "Class BladeViewItem Defines a wrapper for the Windows Community Toolkit BladeViewItem control. Inheritance System.Object WindowsElementWrapper BladeViewItem Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class BladeViewItem : WindowsElementWrapper Constructors | Improve this Doc View Source BladeViewItem(BladeView, WindowsElement) Initializes a new instance of the BladeViewItem class. Declaration public BladeViewItem(BladeView parentBladeView, WindowsElement element) Parameters Type Name Description BladeView parentBladeView The parent BladeView . WindowsElement element The reference. | Improve this Doc View Source BladeViewItem(WindowsElement) Initializes a new instance of the BladeViewItem class. Declaration public BladeViewItem(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source CloseButton Gets the Button element associated with the blade close option. Declaration public virtual Button CloseButton { get; } Property Value Type Description Button | Improve this Doc View Source EnlargeButton Gets the Button element associated with the blade enlarge option. Declaration public virtual Button EnlargeButton { get; } Property Value Type Description Button | Improve this Doc View Source ParentMenuBar Gets the original parent BladeView reference object. Declaration public BladeView ParentMenuBar { get; } Property Value Type Description BladeView Methods | Improve this Doc View Source Close() Closes the blade item. Declaration public virtual void Close() Operators | Improve this Doc View Source Implicit(AppiumWebElement to BladeViewItem) Allows conversion of a to the BladeViewItem without direct casting. Declaration public static implicit operator BladeViewItem(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description BladeViewItem The BladeViewItem . | Improve this Doc View Source Implicit(RemoteWebElement to BladeViewItem) Allows conversion of a to the BladeViewItem without direct casting. Declaration public static implicit operator BladeViewItem(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description BladeViewItem The BladeViewItem . | Improve this Doc View Source Implicit(WindowsElement to BladeViewItem) Allows conversion of a to the BladeViewItem without direct casting. Declaration public static implicit operator BladeViewItem(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description BladeViewItem The BladeViewItem ."
  },
  "api/Legerity.Windows.Elements.WCT.Carousel.html": {
    "href": "api/Legerity.Windows.Elements.WCT.Carousel.html",
    "title": "Class Carousel | Legerity",
    "keywords": "Class Carousel Defines a wrapper for the Windows Community Toolkit Carousel control. Inheritance System.Object WindowsElementWrapper Carousel Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class Carousel : WindowsElementWrapper Constructors | Improve this Doc View Source Carousel(WindowsElement) Initializes a new instance of the Carousel class. Declaration public Carousel(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Items Gets the collection of items associated with the carousel. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Items { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > | Improve this Doc View Source SelectedIndex Gets the index of the element associated with the currently selected item. Declaration public virtual int SelectedIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SelectedItem Gets the element associated with the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement Methods | Improve this Doc View Source SelectItem(Int32) Clicks on an item in the carousel at the specified index. Declaration public virtual void SelectItem(int index) Parameters Type Name Description System.Int32 index The index of the item to click. | Improve this Doc View Source SelectItem(String) Clicks on an item in the carousel with the specified item name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item to click. | Improve this Doc View Source SelectItemByPartialName(String) Clicks on an item in the carousel with the specified partial item name. Declaration public virtual void SelectItemByPartialName(string partialName) Parameters Type Name Description System.String partialName The partial name of the item to click. Operators | Improve this Doc View Source Implicit(AppiumWebElement to Carousel) Allows conversion of a to the ListView without direct casting. Declaration public static implicit operator Carousel(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Carousel The ListView . | Improve this Doc View Source Implicit(RemoteWebElement to Carousel) Allows conversion of a to the Carousel without direct casting. Declaration public static implicit operator Carousel(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Carousel The Carousel . | Improve this Doc View Source Implicit(WindowsElement to Carousel) Allows conversion of a to the ListView without direct casting. Declaration public static implicit operator Carousel(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Carousel The ListView ."
  },
  "api/Legerity.Windows.Elements.WCT.Expander.html": {
    "href": "api/Legerity.Windows.Elements.WCT.Expander.html",
    "title": "Class Expander | Legerity",
    "keywords": "Class Expander Defines a wrapper for the Windows Community Toolkit Expander control. Inheritance System.Object WindowsElementWrapper Expander Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class Expander : WindowsElementWrapper Constructors | Improve this Doc View Source Expander(WindowsElement) Initializes a new instance of the Expander class. Declaration public Expander(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsExpanded Gets a value indicating whether the expander has the content expanded (visible). Declaration public virtual bool IsExpanded { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ToggleButton Gets the ToggleButton associated with the expander. Declaration public virtual ToggleButton ToggleButton { get; } Property Value Type Description ToggleButton Methods | Improve this Doc View Source Collapse() Collapses the content of the expander. Declaration public virtual void Collapse() | Improve this Doc View Source Expand() Expands the content of the expander. Declaration public virtual void Expand() Operators | Improve this Doc View Source Implicit(AppiumWebElement to Expander) Allows conversion of a to the Expander without direct casting. Declaration public static implicit operator Expander(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description Expander The Expander . | Improve this Doc View Source Implicit(RemoteWebElement to Expander) Allows conversion of a to the Expander without direct casting. Declaration public static implicit operator Expander(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Expander The Expander . | Improve this Doc View Source Implicit(WindowsElement to Expander) Allows conversion of a to the Expander without direct casting. Declaration public static implicit operator Expander(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description Expander The Expander ."
  },
  "api/Legerity.Windows.Elements.WCT.html": {
    "href": "api/Legerity.Windows.Elements.WCT.html",
    "title": "Namespace Legerity.Windows.Elements.WCT | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements.WCT Classes BladeView Defines a wrapper for the Windows Community Toolkit BladeView control. BladeViewItem Defines a wrapper for the Windows Community Toolkit BladeViewItem control. Carousel Defines a wrapper for the Windows Community Toolkit Carousel control. Expander Defines a wrapper for the Windows Community Toolkit Expander control. InAppNotification Defines a wrapper for the Windows Community Toolkit InAppNotification control. RadialGauge Defines a wrapper for the Windows Community Toolkit RadialGauge control."
  },
  "api/Legerity.Windows.Elements.WCT.InAppNotification.html": {
    "href": "api/Legerity.Windows.Elements.WCT.InAppNotification.html",
    "title": "Class InAppNotification | Legerity",
    "keywords": "Class InAppNotification Defines a wrapper for the Windows Community Toolkit InAppNotification control. Inheritance System.Object WindowsElementWrapper InAppNotification Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class InAppNotification : WindowsElementWrapper Constructors | Improve this Doc View Source InAppNotification(WindowsElement) Initializes a new instance of the InAppNotification class. Declaration public InAppNotification(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source DismissButton Gets the dismiss button. Declaration public virtual Button DismissButton { get; } Property Value Type Description Button | Improve this Doc View Source Message Gets the message displayed. Note, this only works if the Content is based on a or if the ContentTemplate includes a TextBlock element with the message. Declaration public virtual string Message { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Dismiss() Dismissed the in-app notification. Declaration public virtual void Dismiss() Operators | Improve this Doc View Source Implicit(AppiumWebElement to InAppNotification) Allows conversion of a to the InAppNotification without direct casting. Declaration public static implicit operator InAppNotification(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InAppNotification The InAppNotification . | Improve this Doc View Source Implicit(RemoteWebElement to InAppNotification) Allows conversion of a to the InAppNotification without direct casting. Declaration public static implicit operator InAppNotification(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InAppNotification The InAppNotification . | Improve this Doc View Source Implicit(WindowsElement to InAppNotification) Allows conversion of a to the InAppNotification without direct casting. Declaration public static implicit operator InAppNotification(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InAppNotification The InAppNotification ."
  },
  "api/Legerity.Windows.Elements.WCT.RadialGauge.html": {
    "href": "api/Legerity.Windows.Elements.WCT.RadialGauge.html",
    "title": "Class RadialGauge | Legerity",
    "keywords": "Class RadialGauge Defines a wrapper for the Windows Community Toolkit RadialGauge control. Inheritance System.Object WindowsElementWrapper RadialGauge Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WCT Assembly : Legerity.WCT.dll Syntax public class RadialGauge : WindowsElementWrapper Constructors | Improve this Doc View Source RadialGauge(WindowsElement) Initializes a new instance of the RadialGauge class. Declaration public RadialGauge(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximum Gets the maximum value of the gauge. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the gauge. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source SmallChange Gets the small change (step) value of the gauge. Declaration public virtual double SmallChange { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the gauge. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source SetValue(Double) Sets the value of the gauge. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to RadialGauge) Allows conversion of a to the RadialGauge without direct casting. Declaration public static implicit operator RadialGauge(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RadialGauge The RadialGauge . | Improve this Doc View Source Implicit(RemoteWebElement to RadialGauge) Allows conversion of a to the RadialGauge without direct casting. Declaration public static implicit operator RadialGauge(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RadialGauge The RadialGauge . | Improve this Doc View Source Implicit(WindowsElement to RadialGauge) Allows conversion of a to the RadialGauge without direct casting. Declaration public static implicit operator RadialGauge(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RadialGauge The RadialGauge ."
  },
  "api/Legerity.Windows.Elements.WindowsElementWrapper.html": {
    "href": "api/Legerity.Windows.Elements.WindowsElementWrapper.html",
    "title": "Class WindowsElementWrapper | Legerity",
    "keywords": "Class WindowsElementWrapper Defines an element wrapper for a . Inheritance System.Object ElementWrapper < WindowsElement > WindowsElementWrapper AutoSuggestBox Button CalendarDatePicker CalendarView CheckBox ComboBox CommandBar DatePicker FlipView GridView Hub InkToolbar InkToolbar.InkToolbarColorFlyoutBase ListBox ListView MenuFlyoutItem MenuFlyoutSubItem Pivot ProgressBar ProgressRing ScrollViewer Slider TextBlock TextBox TimePicker ToggleSwitch DropDownList InputValidator RadAutoCompleteBox RadBulletGraph RadBusyIndicator RadNumericBox BladeView BladeViewItem Carousel Expander InAppNotification RadialGauge InfoBar MenuBar MenuBarItem NavigationView NavigationViewItem NumberBox RatingControl TabView Implements IElementWrapper < WindowsElement > Inherited Members ElementWrapper<WindowsElement>.Element ElementWrapper<WindowsElement>.ElementDriver ElementWrapper<WindowsElement>.IsVisible ElementWrapper<WindowsElement>.IsEnabled ElementWrapper<WindowsElement>.Click() ElementWrapper<WindowsElement>.GetAttribute(String) ElementWrapper<WindowsElement>.FindElement(By) ElementWrapper<WindowsElement>.VerifyElementNotShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By) ElementWrapper<WindowsElement>.VerifyElementShown(By, Nullable<TimeSpan>) ElementWrapper<WindowsElement>.VerifyElementsShown(By) ElementWrapper<WindowsElement>.VerifyElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements Assembly : Legerity.Windows.dll Syntax public class WindowsElementWrapper : ElementWrapper<WindowsElement>, IElementWrapper<WindowsElement> Constructors | Improve this Doc View Source WindowsElementWrapper(WindowsElement) Initializes a new instance of the WindowsElementWrapper class. Declaration public WindowsElementWrapper(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source Driver Gets the instance of the Appium driver for the Windows application. Declaration public WindowsDriver<WindowsElement> Driver { get; } Property Value Type Description WindowsDriver < WindowsElement > Methods | Improve this Doc View Source VerifyDriverElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration protected void VerifyDriverElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementNotShownException Thrown when an element is not shown for the expected locator. | Improve this Doc View Source VerifyDriverElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration protected void VerifyDriverElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition ElementsNotShownException Thrown when no elements are shown for the expected locator. Operators | Improve this Doc View Source Implicit(AppiumWebElement to WindowsElementWrapper) Allows conversion of a to the WindowsElementWrapper without direct casting. Declaration public static implicit operator WindowsElementWrapper(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description WindowsElementWrapper The WindowsElementWrapper . | Improve this Doc View Source Implicit(RemoteWebElement to WindowsElementWrapper) Allows conversion of a to the WindowsElementWrapper without direct casting. Declaration public static implicit operator WindowsElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description WindowsElementWrapper The WindowsElementWrapper . | Improve this Doc View Source Implicit(WindowsElement to WindowsElementWrapper) Allows conversion of a to the WindowsElementWrapper without direct casting. Declaration public static implicit operator WindowsElementWrapper(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description WindowsElementWrapper The WindowsElementWrapper . Implements IElementWrapper<TElement> Extension Methods WindowsElementWrapperExtensions.TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) WindowsElementWrapperExtensions.WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32)"
  },
  "api/Legerity.Windows.Elements.WinUI.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.html",
    "title": "Namespace Legerity.Windows.Elements.WinUI | Legerity",
    "keywords": "Namespace Legerity.Windows.Elements.WinUI Classes InfoBar Defines a wrapper for the WinUI InfoBar control. MenuBar Defines a wrapper for the WinUI UWP MenuBar control. MenuBarItem Defines a wrapper for the WinUI MenuBarItem control. NavigationView Defines a wrapper for the WinUI NavigationView control. NavigationViewItem Defines a wrapper for the WinUI NavigationViewItem control. NumberBox Defines a wrapper for the WinUI NumberBox control. RatingControl Defines a wrapper for the WinUI Rating control. TabView Defines a wrapper for the WinUI TabView control."
  },
  "api/Legerity.Windows.Elements.WinUI.InfoBar.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.InfoBar.html",
    "title": "Class InfoBar | Legerity",
    "keywords": "Class InfoBar Defines a wrapper for the WinUI InfoBar control. Inheritance System.Object WindowsElementWrapper InfoBar Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class InfoBar : WindowsElementWrapper Constructors | Improve this Doc View Source InfoBar(WindowsElement) Initializes a new instance of the InfoBar class. Declaration public InfoBar(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source CloseButton Gets the element associated with the close Button . Declaration public virtual Button CloseButton { get; } Property Value Type Description Button | Improve this Doc View Source IsOpen Gets a value indicating whether the info bar is open. Declaration public virtual bool IsOpen { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Message Gets the message of the info bar. Declaration public virtual string Message { get; } Property Value Type Description System.String | Improve this Doc View Source MessageTextBlock Gets the element associated with the message TextBlock . Declaration public virtual TextBlock MessageTextBlock { get; } Property Value Type Description TextBlock | Improve this Doc View Source Title Gets the title of the info bar. Declaration public virtual string Title { get; } Property Value Type Description System.String | Improve this Doc View Source TitleTextBlock Gets the element associated with the title TextBlock . Declaration public virtual TextBlock TitleTextBlock { get; } Property Value Type Description TextBlock Methods | Improve this Doc View Source Close() Closes the info bar. Declaration public virtual void Close() Operators | Improve this Doc View Source Implicit(AppiumWebElement to InfoBar) Allows conversion of a to the InfoBar without direct casting. Declaration public static implicit operator InfoBar(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description InfoBar The InfoBar . | Improve this Doc View Source Implicit(RemoteWebElement to InfoBar) Allows conversion of a to the InfoBar without direct casting. Declaration public static implicit operator InfoBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description InfoBar The InfoBar . | Improve this Doc View Source Implicit(WindowsElement to InfoBar) Allows conversion of a to the InfoBar without direct casting. Declaration public static implicit operator InfoBar(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description InfoBar The InfoBar ."
  },
  "api/Legerity.Windows.Elements.WinUI.MenuBar.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.MenuBar.html",
    "title": "Class MenuBar | Legerity",
    "keywords": "Class MenuBar Defines a wrapper for the WinUI UWP MenuBar control. Inheritance System.Object WindowsElementWrapper MenuBar Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class MenuBar : WindowsElementWrapper Constructors | Improve this Doc View Source MenuBar(WindowsElement) Initializes a new instance of the MenuBar class. Declaration public MenuBar(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source MenuItems Gets the UI components associated with the menu items. Declaration public virtual IEnumerable<MenuBarItem> MenuItems { get; } Property Value Type Description IEnumerable < MenuBarItem > Methods | Improve this Doc View Source ClickOption(String) Clicks on a child menu option with the specified item name. Declaration public virtual MenuBarItem ClickOption(string name) Parameters Type Name Description System.String name The name of the item to click. Returns Type Description MenuBarItem The clicked MenuBarItem . | Improve this Doc View Source ClickOptionByPartialName(String) Clicks on a child menu option with the specified partial item name. Declaration public virtual MenuBarItem ClickOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Returns Type Description MenuBarItem The clicked MenuBarItem . Operators | Improve this Doc View Source Implicit(AppiumWebElement to MenuBar) Allows conversion of a to the MenuBar without direct casting. Declaration public static implicit operator MenuBar(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description MenuBar The MenuBar . | Improve this Doc View Source Implicit(RemoteWebElement to MenuBar) Allows conversion of a to the MenuBar without direct casting. Declaration public static implicit operator MenuBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description MenuBar The MenuBar . | Improve this Doc View Source Implicit(WindowsElement to MenuBar) Allows conversion of a to the MenuBar without direct casting. Declaration public static implicit operator MenuBar(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description MenuBar The MenuBar ."
  },
  "api/Legerity.Windows.Elements.WinUI.MenuBarItem.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.MenuBarItem.html",
    "title": "Class MenuBarItem | Legerity",
    "keywords": "Class MenuBarItem Defines a wrapper for the WinUI MenuBarItem control. Inheritance System.Object WindowsElementWrapper MenuBarItem Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class MenuBarItem : WindowsElementWrapper Constructors | Improve this Doc View Source MenuBarItem(MenuBar, WindowsElement) Initializes a new instance of the MenuBarItem class. Declaration public MenuBarItem(MenuBar parentMenuBar, WindowsElement element) Parameters Type Name Description MenuBar parentMenuBar The parent MenuBar . WindowsElement element The reference. | Improve this Doc View Source MenuBarItem(WindowsElement) Initializes a new instance of the MenuBarItem class. Declaration public MenuBarItem(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source ChildMenuItems Gets the UI components associated with the child menu items. Declaration public virtual IEnumerable<MenuFlyoutItem> ChildMenuItems { get; } Property Value Type Description IEnumerable < MenuFlyoutItem > | Improve this Doc View Source ChildMenuSubItems Gets the UI components associated with the child menu sub-items. Declaration public virtual IEnumerable<MenuFlyoutSubItem> ChildMenuSubItems { get; } Property Value Type Description IEnumerable < MenuFlyoutSubItem > | Improve this Doc View Source ParentMenuBar Gets the original parent MenuBar reference object. Declaration public virtual MenuBar ParentMenuBar { get; } Property Value Type Description MenuBar Methods | Improve this Doc View Source ClickChildOption(String) Clicks on a child menu option with the specified item name. Declaration public virtual MenuFlyoutItem ClickChildOption(string name) Parameters Type Name Description System.String name The name of the item to click. Returns Type Description MenuFlyoutItem The clicked MenuFlyoutItem . | Improve this Doc View Source ClickChildOptionByPartialName(String) Clicks on a child menu option with the specified partial item name. Declaration public virtual MenuFlyoutItem ClickChildOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Returns Type Description MenuFlyoutItem The clicked MenuFlyoutItem . | Improve this Doc View Source ClickChildSubOption(String) Clicks on a child menu sub option with the specified item name. Declaration public virtual MenuFlyoutSubItem ClickChildSubOption(string name) Parameters Type Name Description System.String name The name of the sub-item to click. Returns Type Description MenuFlyoutSubItem The clicked MenuFlyoutSubItem . | Improve this Doc View Source ClickChildSubOptionByPartialName(String) Clicks on a child menu sub option with the specified partial item name. Declaration public virtual MenuFlyoutSubItem ClickChildSubOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the sub-item to click. Returns Type Description MenuFlyoutSubItem The clicked MenuFlyoutSubItem . Operators | Improve this Doc View Source Implicit(AppiumWebElement to MenuBarItem) Allows conversion of a to the MenuBarItem without direct casting. Declaration public static implicit operator MenuBarItem(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description MenuBarItem The MenuBarItem . | Improve this Doc View Source Implicit(RemoteWebElement to MenuBarItem) Allows conversion of a to the MenuBarItem without direct casting. Declaration public static implicit operator MenuBarItem(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description MenuBarItem The MenuBarItem . | Improve this Doc View Source Implicit(WindowsElement to MenuBarItem) Allows conversion of a to the MenuBarItem without direct casting. Declaration public static implicit operator MenuBarItem(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description MenuBarItem The MenuBarItem ."
  },
  "api/Legerity.Windows.Elements.WinUI.NavigationView.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.NavigationView.html",
    "title": "Class NavigationView | Legerity",
    "keywords": "Class NavigationView Defines a wrapper for the WinUI NavigationView control. Inheritance System.Object WindowsElementWrapper NavigationView Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class NavigationView : WindowsElementWrapper Constructors | Improve this Doc View Source NavigationView(WindowsElement) Initializes a new instance of the NavigationView class. Declaration public NavigationView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source BackButton Gets the UI component associated with the navigation back button. Declaration public virtual Button BackButton { get; } Property Value Type Description Button | Improve this Doc View Source ExpectedCompactPaneWidth Gets or sets the expected compact pane width used to determine the pane open state. Declaration public virtual int ExpectedCompactPaneWidth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPaneOpen Gets a value indicating whether the pane is currently open. Declaration public virtual bool IsPaneOpen { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MenuItems Gets the UI components associated with the menu items. Declaration public virtual IEnumerable<NavigationViewItem> MenuItems { get; } Property Value Type Description IEnumerable < NavigationViewItem > | Improve this Doc View Source MenuItemsView Gets the UI component associated with displaying the menu items. Declaration public virtual AppiumWebElement MenuItemsView { get; } Property Value Type Description AppiumWebElement | Improve this Doc View Source SelectedMenuItem Gets the currently selected menu item. Declaration public virtual NavigationViewItem SelectedMenuItem { get; } Property Value Type Description NavigationViewItem | Improve this Doc View Source SettingsMenuItem Gets the UI component associated with the settings menu item. Declaration public virtual AppiumWebElement SettingsMenuItem { get; } Property Value Type Description AppiumWebElement | Improve this Doc View Source ToggleNavigationPaneButton Gets the UI component associated with the navigation pane toggle button. Declaration public virtual Button ToggleNavigationPaneButton { get; } Property Value Type Description Button Methods | Improve this Doc View Source ClickMenuOption(String) Clicks on a menu option in the navigation view with the specified item name. Declaration public virtual NavigationViewItem ClickMenuOption(string name) Parameters Type Name Description System.String name The name of the item to click. Returns Type Description NavigationViewItem The clicked NavigationViewItem . | Improve this Doc View Source ClickMenuOptionByPartialName(String) Clicks on a menu option in the navigation view with the specified partial item name. Declaration public virtual NavigationViewItem ClickMenuOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Returns Type Description NavigationViewItem The clicked NavigationViewItem . | Improve this Doc View Source CloseNavigationPane() Collapses the navigation pane. Declaration public virtual void CloseNavigationPane() | Improve this Doc View Source GoBack() Navigates the view back. Declaration public virtual void GoBack() | Improve this Doc View Source OpenNavigationPane() Opens the navigation pane. Declaration public virtual void OpenNavigationPane() | Improve this Doc View Source OpenSettings() Opens the settings option. Declaration public virtual void OpenSettings() | Improve this Doc View Source VerifyPaneOpen(Int32) Determines whether the navigation pane is open based on the specified compact pane width. Declaration public virtual bool VerifyPaneOpen(int expectedCompactPaneWidth) Parameters Type Name Description System.Int32 expectedCompactPaneWidth The expected compact pane width when closed. Returns Type Description System.Boolean True if the pane is open; otherwise, false. Operators | Improve this Doc View Source Implicit(AppiumWebElement to NavigationView) Allows conversion of a to the NavigationView without direct casting. Declaration public static implicit operator NavigationView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description NavigationView The NavigationView . | Improve this Doc View Source Implicit(RemoteWebElement to NavigationView) Allows conversion of a to the NavigationView without direct casting. Declaration public static implicit operator NavigationView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description NavigationView The NavigationView . | Improve this Doc View Source Implicit(WindowsElement to NavigationView) Allows conversion of a to the NavigationView without direct casting. Declaration public static implicit operator NavigationView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description NavigationView The NavigationView ."
  },
  "api/Legerity.Windows.Elements.WinUI.NavigationViewItem.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.NavigationViewItem.html",
    "title": "Class NavigationViewItem | Legerity",
    "keywords": "Class NavigationViewItem Defines a wrapper for the WinUI NavigationViewItem control. Inheritance System.Object WindowsElementWrapper NavigationViewItem Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class NavigationViewItem : WindowsElementWrapper Constructors | Improve this Doc View Source NavigationViewItem(NavigationView, NavigationViewItem, WindowsElement) Initializes a new instance of the NavigationViewItem class. Declaration public NavigationViewItem(NavigationView parentNavigationView, NavigationViewItem parentItem, WindowsElement element) Parameters Type Name Description NavigationView parentNavigationView The parent NavigationView . NavigationViewItem parentItem The parent NavigationViewItem . WindowsElement element The reference. | Improve this Doc View Source NavigationViewItem(NavigationView, WindowsElement) Initializes a new instance of the NavigationViewItem class. Declaration public NavigationViewItem(NavigationView parentNavigationView, WindowsElement element) Parameters Type Name Description NavigationView parentNavigationView The parent NavigationView . WindowsElement element The reference. | Improve this Doc View Source NavigationViewItem(NavigationViewItem, WindowsElement) Initializes a new instance of the NavigationViewItem class. Declaration public NavigationViewItem(NavigationViewItem parentItem, WindowsElement element) Parameters Type Name Description NavigationViewItem parentItem The parent NavigationViewItem . WindowsElement element The reference. | Improve this Doc View Source NavigationViewItem(WindowsElement) Initializes a new instance of the NavigationViewItem class. Declaration public NavigationViewItem(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source ChildMenuItems Gets the UI components associated with the child menu items. Declaration public virtual IEnumerable<NavigationViewItem> ChildMenuItems { get; } Property Value Type Description IEnumerable < NavigationViewItem > | Improve this Doc View Source ParentItem Gets the original parent NavigationViewItem reference object. Declaration public NavigationViewItem ParentItem { get; } Property Value Type Description NavigationViewItem | Improve this Doc View Source ParentNavigationView Gets the original parent NavigationView reference object. Declaration public NavigationView ParentNavigationView { get; } Property Value Type Description NavigationView Methods | Improve this Doc View Source ClickChildOption(String) Clicks on a child menu option with the specified item name. Declaration public virtual NavigationViewItem ClickChildOption(string name) Parameters Type Name Description System.String name The name of the item to click. Returns Type Description NavigationViewItem The clicked NavigationViewItem . | Improve this Doc View Source ClickChildOptionByPartialName(String) Clicks on a child menu option with the specified partial item name. Declaration public virtual NavigationViewItem ClickChildOptionByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Returns Type Description NavigationViewItem The clicked NavigationViewItem . Operators | Improve this Doc View Source Implicit(AppiumWebElement to NavigationViewItem) Allows conversion of a to the NavigationViewItem without direct casting. Declaration public static implicit operator NavigationViewItem(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description NavigationViewItem The NavigationViewItem . | Improve this Doc View Source Implicit(RemoteWebElement to NavigationViewItem) Allows conversion of a to the NavigationViewItem without direct casting. Declaration public static implicit operator NavigationViewItem(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description NavigationViewItem The NavigationViewItem . | Improve this Doc View Source Implicit(WindowsElement to NavigationViewItem) Allows conversion of a to the NavigationViewItem without direct casting. Declaration public static implicit operator NavigationViewItem(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description NavigationViewItem The NavigationViewItem ."
  },
  "api/Legerity.Windows.Elements.WinUI.NumberBox.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.NumberBox.html",
    "title": "Class NumberBox | Legerity",
    "keywords": "Class NumberBox Defines a wrapper for the WinUI NumberBox control. Inheritance System.Object WindowsElementWrapper NumberBox Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class NumberBox : WindowsElementWrapper Constructors | Improve this Doc View Source NumberBox(WindowsElement) Initializes a new instance of the NumberBox class. Declaration public NumberBox(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source InlineDownButton Gets the element associated with the inline down button. Declaration public virtual Button InlineDownButton { get; } Property Value Type Description Button | Improve this Doc View Source InlineUpButton Gets the element associated with the inline up button. Declaration public virtual Button InlineUpButton { get; } Property Value Type Description Button | Improve this Doc View Source InputBox Gets the element associated with the input text box. Declaration public virtual TextBox InputBox { get; } Property Value Type Description TextBox | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximum Gets the maximum value of the NumberBox. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum value of the NumberBox. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source SmallChange Gets the small change (step) value of the NumberBox. Declaration public virtual double SmallChange { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the NumberBox. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Decrement() Decreases the number box value by the SmallChange value. Declaration public virtual void Decrement() | Improve this Doc View Source Increment() Increases the number box value by the SmallChange value. Declaration public virtual void Increment() | Improve this Doc View Source SetValue(Double) Sets the value of the NumberBox. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to NumberBox) Allows conversion of a to the NumberBox without direct casting. Declaration public static implicit operator NumberBox(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description NumberBox The NumberBox . | Improve this Doc View Source Implicit(RemoteWebElement to NumberBox) Allows conversion of a to the NumberBox without direct casting. Declaration public static implicit operator NumberBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description NumberBox The NumberBox . | Improve this Doc View Source Implicit(WindowsElement to NumberBox) Allows conversion of a to the NumberBox without direct casting. Declaration public static implicit operator NumberBox(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description NumberBox The NumberBox ."
  },
  "api/Legerity.Windows.Elements.WinUI.RatingControl.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.RatingControl.html",
    "title": "Class RatingControl | Legerity",
    "keywords": "Class RatingControl Defines a wrapper for the WinUI Rating control. Inheritance System.Object WindowsElementWrapper RatingControl Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class RatingControl : WindowsElementWrapper Constructors | Improve this Doc View Source RatingControl(WindowsElement) Initializes a new instance of the RatingControl class. Declaration public RatingControl(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source IsReadonly Gets a value indicating whether the control is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximum Gets the maximum rating value. Declaration public virtual double Maximum { get; } Property Value Type Description System.Double | Improve this Doc View Source Minimum Gets the minimum rating value. Declaration public virtual double Minimum { get; } Property Value Type Description System.Double | Improve this Doc View Source Value Gets the value of the rating out of 5. Declaration public virtual double Value { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source SetValue(Double) Sets the value of the slider. Declaration public virtual void SetValue(double value) Parameters Type Name Description System.Double value The value. Operators | Improve this Doc View Source Implicit(AppiumWebElement to RatingControl) Allows conversion of a to the RatingControl without direct casting. Declaration public static implicit operator RatingControl(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description RatingControl The RatingControl . | Improve this Doc View Source Implicit(RemoteWebElement to RatingControl) Allows conversion of a to the RatingControl without direct casting. Declaration public static implicit operator RatingControl(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description RatingControl The RatingControl . | Improve this Doc View Source Implicit(WindowsElement to RatingControl) Allows conversion of a to the RatingControl without direct casting. Declaration public static implicit operator RatingControl(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description RatingControl The RatingControl ."
  },
  "api/Legerity.Windows.Elements.WinUI.TabView.html": {
    "href": "api/Legerity.Windows.Elements.WinUI.TabView.html",
    "title": "Class TabView | Legerity",
    "keywords": "Class TabView Defines a wrapper for the WinUI TabView control. Inheritance System.Object WindowsElementWrapper TabView Inherited Members WindowsElementWrapper.Driver WindowsElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) WindowsElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Windows.Elements.WinUI Assembly : Legerity.WinUI.dll Syntax public class TabView : WindowsElementWrapper Constructors | Improve this Doc View Source TabView(WindowsElement) Initializes a new instance of the TabView class. Declaration public TabView(WindowsElement element) Parameters Type Name Description WindowsElement element The reference. Properties | Improve this Doc View Source AddTabButton Gets the element associated with the add tab button. Declaration public virtual Button AddTabButton { get; } Property Value Type Description Button | Improve this Doc View Source SelectedItem Gets the element associated with the currently selected item. Declaration public virtual AppiumWebElement SelectedItem { get; } Property Value Type Description AppiumWebElement | Improve this Doc View Source Tabs Gets the collection of items associated with the pivot. Declaration public virtual ReadOnlyCollection<AppiumWebElement> Tabs { get; } Property Value Type Description ReadOnlyCollection < AppiumWebElement > Methods | Improve this Doc View Source CloseTab(String) Closes a tab in the view with the specified item name. Declaration public virtual void CloseTab(string name) Parameters Type Name Description System.String name The name of the item to close. | Improve this Doc View Source CloseTabByPartialName(String) Closes a tab in the view with the specified partial item name. Declaration public virtual void CloseTabByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to close. | Improve this Doc View Source CreateTab() Adds a new tab to the tab view. Declaration public virtual void CreateTab() | Improve this Doc View Source SelectTab(String) Clicks on a tab in the view with the specified item name. Declaration public virtual void SelectTab(string name) Parameters Type Name Description System.String name The name of the item to click. | Improve this Doc View Source SelectTabByPartialName(String) Clicks on a tab in the view with the specified partial item name. Declaration public virtual void SelectTabByPartialName(string name) Parameters Type Name Description System.String name The partial name of the item to click. Operators | Improve this Doc View Source Implicit(AppiumWebElement to TabView) Allows conversion of a to the TabView without direct casting. Declaration public static implicit operator TabView(AppiumWebElement element) Parameters Type Name Description AppiumWebElement element The . Returns Type Description TabView The TabView . | Improve this Doc View Source Implicit(RemoteWebElement to TabView) Allows conversion of a to the TabView without direct casting. Declaration public static implicit operator TabView(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TabView The TabView . | Improve this Doc View Source Implicit(WindowsElement to TabView) Allows conversion of a to the TabView without direct casting. Declaration public static implicit operator TabView(WindowsElement element) Parameters Type Name Description WindowsElement element The . Returns Type Description TabView The TabView ."
  },
  "api/Legerity.Windows.Exceptions.html": {
    "href": "api/Legerity.Windows.Exceptions.html",
    "title": "Namespace Legerity.Windows.Exceptions | Legerity",
    "keywords": "Namespace Legerity.Windows.Exceptions Classes WinAppDriverLoadFailedException Defines an exception for when the WinAppDriver could not be loaded. WinAppDriverNotFoundException Defines an exception for when the WinAppDriver cannot be found."
  },
  "api/Legerity.Windows.Exceptions.WinAppDriverLoadFailedException.html": {
    "href": "api/Legerity.Windows.Exceptions.WinAppDriverLoadFailedException.html",
    "title": "Class WinAppDriverLoadFailedException | Legerity",
    "keywords": "Class WinAppDriverLoadFailedException Defines an exception for when the WinAppDriver could not be loaded. Inheritance System.Object LegerityException WinAppDriverLoadFailedException Namespace : Legerity.Windows.Exceptions Assembly : Legerity.Core.dll Syntax public class WinAppDriverLoadFailedException : LegerityException Properties | Improve this Doc View Source Path Gets or sets the path where the WinAppDriver should have loaded from. Declaration public string Path { get; set; } Property Value Type Description System.String"
  },
  "api/Legerity.Windows.Exceptions.WinAppDriverNotFoundException.html": {
    "href": "api/Legerity.Windows.Exceptions.WinAppDriverNotFoundException.html",
    "title": "Class WinAppDriverNotFoundException | Legerity",
    "keywords": "Class WinAppDriverNotFoundException Defines an exception for when the WinAppDriver cannot be found. Inheritance System.Object LegerityException WinAppDriverNotFoundException Namespace : Legerity.Windows.Exceptions Assembly : Legerity.Core.dll Syntax public class WinAppDriverNotFoundException : LegerityException Properties | Improve this Doc View Source Path Gets or sets the path where the WinAppDriver should be located. Declaration public string Path { get; set; } Property Value Type Description System.String"
  },
  "api/Legerity.Windows.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.Windows.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.Windows.Extensions Assembly : Legerity.Windows.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetAutomationId(IWebElement) Retrieves the AutomationId attribute from the specified element. Declaration public static string GetAutomationId(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve an AutomationId from. Returns Type Description System.String The AutomationId of the element. | Improve this Doc View Source GetAutomationId<TElement>(IElementWrapper<TElement>) Retrieves the AutomationId attribute from the specified element. Declaration public static string GetAutomationId<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve an AutomationId from. Returns Type Description System.String The AutomationId of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetHelpText(IWebElement) Retrieves the HelpText attribute from the specified element. Declaration public static string GetHelpText(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the HelpText from. Returns Type Description System.String The HelpText of the element. | Improve this Doc View Source GetHelpText<TElement>(IElementWrapper<TElement>) Retrieves the HelpText attribute from the specified element. Declaration public static string GetHelpText<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the HelpText from. Returns Type Description System.String The HelpText of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetRangeMaximum(IWebElement) Retrieves the RangeValue.Maximum attribute from the specified element. Declaration public static double GetRangeMaximum(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the range max value from. Returns Type Description System.Double The range max value of the element. | Improve this Doc View Source GetRangeMaximum<TElement>(IElementWrapper<TElement>) Retrieves the RangeValue.Maximum attribute from the specified element. Declaration public static double GetRangeMaximum<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the range max value from. Returns Type Description System.Double The range max value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetRangeMinimum(IWebElement) Retrieves the RangeValue.Minimum attribute from the specified element. Declaration public static double GetRangeMinimum(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the range min value from. Returns Type Description System.Double The range min value of the element. | Improve this Doc View Source GetRangeMinimum<TElement>(IElementWrapper<TElement>) Retrieves the RangeValue.Minimum attribute from the specified element. Declaration public static double GetRangeMinimum<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the range min value from. Returns Type Description System.Double The range min value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetRangeSmallChange(IWebElement) Retrieves the RangeValue.SmallChange attribute from the specified element. Declaration public static double GetRangeSmallChange(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the range step value from. Returns Type Description System.Double The range step value of the element. | Improve this Doc View Source GetRangeSmallChange<TElement>(IElementWrapper<TElement>) Retrieves the RangeValue.SmallChange attribute from the specified element. Declaration public static double GetRangeSmallChange<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the range step value from. Returns Type Description System.Double The range step value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetRangeValue(IWebElement) Retrieves the RangeValue.Value attribute from the specified element. Declaration public static double GetRangeValue(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the range value from. Returns Type Description System.Double The range value of the element. | Improve this Doc View Source GetRangeValue<TElement>(IElementWrapper<TElement>) Retrieves the RangeValue.Value attribute from the specified element. Declaration public static double GetRangeValue<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the range value from. Returns Type Description System.Double The range value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetToggleState(IWebElement) Retrieves the Toggle.ToggleState attribute from the specified element. Declaration public static ToggleState GetToggleState(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a toggle state from. Returns Type Description ToggleState The ToggleState of the element. | Improve this Doc View Source GetToggleState<TElement>(IElementWrapper<TElement>) Retrieves the Toggle.ToggleState attribute from the specified element. Declaration public static ToggleState GetToggleState<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a toggle state from. Returns Type Description ToggleState The ToggleState of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source GetValue(IWebElement) Retrieves the Value.Value attribute from the specified element. Declaration public static string GetValue(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve a value from. Returns Type Description System.String The value of the element. | Improve this Doc View Source GetValue<TElement>(IElementWrapper<TElement>) Retrieves the Value.Value attribute from the specified element. Declaration public static string GetValue<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve a value from. Returns Type Description System.String The value of the element. Type Parameters Name Description TElement The type of . | Improve this Doc View Source IsRangeReadonly(IWebElement) Retrieves the RangeValue.IsReadOnly attribute from the specified element. Declaration public static bool IsRangeReadonly(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the readonly state from. Returns Type Description System.Boolean A value indicating whether the item is readonly. | Improve this Doc View Source IsRangeReadonly<TElement>(IElementWrapper<TElement>) Retrieves the RangeValue.IsReadOnly attribute from the specified element. Declaration public static bool IsRangeReadonly<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the readonly state from. Returns Type Description System.Boolean A value indicating whether the item is readonly. Type Parameters Name Description TElement The type of . | Improve this Doc View Source IsReadonly(IWebElement) Retrieves the Value.IsReadonly attribute from the specified element. Declaration public static bool IsReadonly(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the readonly state from. Returns Type Description System.Boolean A value indicating whether the item is readonly. | Improve this Doc View Source IsReadonly<TElement>(IElementWrapper<TElement>) Retrieves the Value.IsReadonly attribute from the specified element. Declaration public static bool IsReadonly<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the readonly state from. Returns Type Description System.Boolean A value indicating whether the item is readonly. Type Parameters Name Description TElement The type of . | Improve this Doc View Source IsSelected(IWebElement) Retrieves the SelectionItem.IsSelected attribute from the specified element. Declaration public static bool IsSelected(this IWebElement element) Parameters Type Name Description IWebElement element The to retrieve the selected state from. Returns Type Description System.Boolean A value indicating whether the item is selected. | Improve this Doc View Source IsSelected<TElement>(IElementWrapper<TElement>) Retrieves the SelectionItem.IsSelected attribute from the specified element. Declaration public static bool IsSelected<TElement>(this IElementWrapper<TElement> element) where TElement : IWebElement Parameters Type Name Description IElementWrapper <TElement> element The IElementWrapper<TElement> to retrieve the selected state from. Returns Type Description System.Boolean A value indicating whether the item is selected. Type Parameters Name Description TElement The type of ."
  },
  "api/Legerity.Windows.Extensions.html": {
    "href": "api/Legerity.Windows.Extensions.html",
    "title": "Namespace Legerity.Windows.Extensions | Legerity",
    "keywords": "Namespace Legerity.Windows.Extensions Classes AttributeExtensions Defines a collection of extensions for retrieving element attributes. LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances. WindowsElementExtensions Defines a collection of extensions for objects. WindowsElementWrapperExtensions Defines a collection of extensions for WindowsElementWrapper objects."
  },
  "api/Legerity.Windows.Extensions.LegerityTestClassExtensions.html": {
    "href": "api/Legerity.Windows.Extensions.LegerityTestClassExtensions.html",
    "title": "Class LegerityTestClassExtensions | Legerity",
    "keywords": "Class LegerityTestClassExtensions Defines a collection of extensions for LegerityTestClass instances. Inheritance System.Object LegerityTestClassExtensions Namespace : Legerity.Windows.Extensions Assembly : Legerity.Windows.dll Syntax public static class LegerityTestClassExtensions : object Methods | Improve this Doc View Source StartWindowsApp(LegerityTestClass, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the Windows application ready for testing. Declaration public static WindowsDriver<WindowsElement> StartWindowsApp(this LegerityTestClass testClass, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description WindowsDriver < WindowsElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The WinAppDriver could not be found when running with LaunchWinAppDriver true. The WinAppDriver failed to load when running with LaunchWinAppDriver true. | Improve this Doc View Source StartWindowsApp(LegerityTestClass, WindowsAppManagerOptions, Func<IWebDriver, Boolean>, Nullable<TimeSpan>, Int32) Starts the Windows application ready for testing. Declaration public static WindowsDriver<WindowsElement> StartWindowsApp(this LegerityTestClass testClass, WindowsAppManagerOptions options, Func<IWebDriver, bool> waitUntil = null, TimeSpan? waitUntilTimeout = null, int waitUntilRetries = 0) Parameters Type Name Description LegerityTestClass testClass The test class to launch an Android application for. WindowsAppManagerOptions options The optional options to configure the driver with. Settings this will override the Options if previously set. Func < IWebDriver , System.Boolean > waitUntil An optional condition of the driver to wait on until it is met. System.Nullable < TimeSpan > waitUntilTimeout An optional timeout wait on the conditional wait until being true. If not set, the wait will run immediately, and if not valid, will throw an exception. System.Int32 waitUntilRetries An optional count of retries after a timeout on the wait until condition before accepting the failure. Returns Type Description WindowsDriver < WindowsElement > The configured and running application driver. Exceptions Type Condition DriverLoadFailedException Thrown when the application is null, the session ID is null once initialized, or the driver fails to configure correctly before returning. LegerityException Thrown when: The WinAppDriver failed to load when running with LaunchWinAppDriver true."
  },
  "api/Legerity.Windows.Extensions.WindowsElementExtensions.html": {
    "href": "api/Legerity.Windows.Extensions.WindowsElementExtensions.html",
    "title": "Class WindowsElementExtensions | Legerity",
    "keywords": "Class WindowsElementExtensions Defines a collection of extensions for objects. Inheritance System.Object WindowsElementExtensions Namespace : Legerity.Windows.Extensions Assembly : Legerity.Windows.dll Syntax public static class WindowsElementExtensions : object Methods | Improve this Doc View Source FindElementByAutomationId(WindowsElement, String) Finds an element within the element with the given automationId . Declaration public static AppiumWebElement FindElementByAutomationId(this WindowsElement element, string automationId) Parameters Type Name Description WindowsElement element The element to search. System.String automationId The automation ID associated with the element to locate. Returns Type Description AppiumWebElement The located . | Improve this Doc View Source FindElementByAutomationId<TElement>(WindowsDriver<TElement>, String) Finds an element within the driver with the given automationId . Declaration public static TElement FindElementByAutomationId<TElement>(this WindowsDriver<TElement> driver, string automationId) where TElement : IWebElement Parameters Type Name Description WindowsDriver <TElement> driver The to search. System.String automationId The automation ID associated with the element to locate. Returns Type Description TElement The located TElement . Type Parameters Name Description TElement The type of . For this method, this would likely be . | Improve this Doc View Source VerifyNameOrAutomationIdContains(AppiumWebElement, String) Verifies the elements name or AutomationId based on the given partial compare. Declaration public static bool VerifyNameOrAutomationIdContains(this AppiumWebElement element, string partialCompare) Parameters Type Name Description AppiumWebElement element The element to verify. System.String partialCompare The partial value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId matches; otherwise, false. | Improve this Doc View Source VerifyNameOrAutomationIdContains(WindowsElement, String) Verifies the elements name or AutomationId based on the given partial compare. Declaration public static bool VerifyNameOrAutomationIdContains(this WindowsElement element, string partialCompare) Parameters Type Name Description WindowsElement element The element to verify. System.String partialCompare The partial value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId partially matches; otherwise, false. | Improve this Doc View Source VerifyNameOrAutomationIdEquals(AppiumWebElement, String) Verifies the elements name or AutomationId based on the given compare. Declaration public static bool VerifyNameOrAutomationIdEquals(this AppiumWebElement element, string compare) Parameters Type Name Description AppiumWebElement element The element to verify. System.String compare The value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId matches; otherwise, false. | Improve this Doc View Source VerifyNameOrAutomationIdEquals(WindowsElement, String) Verifies the elements name or AutomationId based on the given compare. Declaration public static bool VerifyNameOrAutomationIdEquals(this WindowsElement element, string compare) Parameters Type Name Description WindowsElement element The element to verify. System.String compare The value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId matches; otherwise, false."
  },
  "api/Legerity.Windows.Extensions.WindowsElementWrapperExtensions.html": {
    "href": "api/Legerity.Windows.Extensions.WindowsElementWrapperExtensions.html",
    "title": "Class WindowsElementWrapperExtensions | Legerity",
    "keywords": "Class WindowsElementWrapperExtensions Defines a collection of extensions for WindowsElementWrapper objects. Inheritance System.Object WindowsElementWrapperExtensions Namespace : Legerity.Windows.Extensions Assembly : Legerity.Windows.dll Syntax public static class WindowsElementWrapperExtensions : object Methods | Improve this Doc View Source TryWaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32, Action<Exception>) Attempts to wait until a specified element condition is met, with an optional timeout. Declaration public static bool TryWaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0, Action<Exception> exceptionHandler = null) where TElementWrapper : WindowsElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Action < Exception > exceptionHandler The optional exception handler thrown if an error occurs as a result of timeout. Returns Type Description System.Boolean Whether the wait was a success. Type Parameters Name Description TElementWrapper The type of WindowsElementWrapper . TResult The type of expected result from the wait condition. | Improve this Doc View Source WaitUntil<TElementWrapper, TResult>(TElementWrapper, Func<TElementWrapper, TResult>, Nullable<TimeSpan>, Int32) Waits until a specified element condition is met, with an optional timeout. Declaration public static TResult WaitUntil<TElementWrapper, TResult>(this TElementWrapper element, Func<TElementWrapper, TResult> condition, TimeSpan? timeout = null, int retries = 0) where TElementWrapper : WindowsElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, TResult> condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. System.Int32 retries An optional count of retries after a timeout before accepting the failure. Returns Type Description TResult The TResult of the wait until operation. Type Parameters Name Description TElementWrapper The type of WindowsElementWrapper . TResult The type of expected result from the wait condition."
  },
  "api/Legerity.Windows.Helpers.html": {
    "href": "api/Legerity.Windows.Helpers.html",
    "title": "Namespace Legerity.Windows.Helpers | Legerity",
    "keywords": "Namespace Legerity.Windows.Helpers Classes WinAppDriverHelper Defines a helper class for the WinAppDriver."
  },
  "api/Legerity.Windows.Helpers.WinAppDriverHelper.html": {
    "href": "api/Legerity.Windows.Helpers.WinAppDriverHelper.html",
    "title": "Class WinAppDriverHelper | Legerity",
    "keywords": "Class WinAppDriverHelper Defines a helper class for the WinAppDriver. Inheritance System.Object WinAppDriverHelper Namespace : Legerity.Windows.Helpers Assembly : Legerity.Core.dll Syntax public static class WinAppDriverHelper : object Methods | Improve this Doc View Source IsInstalled(String) Determines whether the WinAppDriver is installed. Declaration public static bool IsInstalled(string path = null) Parameters Type Name Description System.String path The expected path for the WinAppDriver. Returns Type Description System.Boolean True if the WinAppDriver exists at the specified path ; otherwise, false. | Improve this Doc View Source Run(String) Loads an instance of the WinAppDriver process. Declaration public static void Run(string path = null) Parameters Type Name Description System.String path The expected path for the WinAppDriver. Exceptions Type Condition WinAppDriverNotFoundException Thrown when the WinAppDriver could not be found. WinAppDriverLoadFailedException Thrown when the WinAppDriver fails to load. | Improve this Doc View Source Stop() Stops the running instance of the WinAppDriver process. Declaration public static void Stop()"
  },
  "api/Legerity.Windows.html": {
    "href": "api/Legerity.Windows.html",
    "title": "Namespace Legerity.Windows | Legerity",
    "keywords": "Namespace Legerity.Windows Classes WindowsAppManagerOptions Defines a specific AppiumManagerOptions for a Windows application. WindowsByExtras Defines a collection of extra locator constraints for ."
  },
  "api/Legerity.Windows.WindowsAppManagerOptions.html": {
    "href": "api/Legerity.Windows.WindowsAppManagerOptions.html",
    "title": "Class WindowsAppManagerOptions | Legerity",
    "keywords": "Class WindowsAppManagerOptions Defines a specific AppiumManagerOptions for a Windows application. Inheritance System.Object AppManagerOptions AppiumManagerOptions WindowsAppManagerOptions Inherited Members AppiumManagerOptions.AdditionalOptions AppiumManagerOptions.AppiumOptions AppManagerOptions.DriverUri AppManagerOptions.ImplicitWait AppManagerOptions.DriverOptions Namespace : Legerity.Windows Assembly : Legerity.Core.dll Syntax public class WindowsAppManagerOptions : AppiumManagerOptions Constructors | Improve this Doc View Source WindowsAppManagerOptions() Initializes a new instance of the WindowsAppManagerOptions class. Declaration public WindowsAppManagerOptions() | Improve this Doc View Source WindowsAppManagerOptions(String) Initializes a new instance of the WindowsAppManagerOptions class. Declaration public WindowsAppManagerOptions(string appId) Parameters Type Name Description System.String appId The ID of the application under test. | Improve this Doc View Source WindowsAppManagerOptions(String, (String, Object)[]) Initializes a new instance of the WindowsAppManagerOptions class. Declaration public WindowsAppManagerOptions(string appId, params (string, object)[] additionalOptions) Parameters Type Name Description System.String appId The ID of the application under test. System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . Properties | Improve this Doc View Source AppId Gets or sets the ID of the application under test. Declaration public string AppId { get; set; } Property Value Type Description System.String | Improve this Doc View Source LaunchWinAppDriver Gets or sets a value indicating whether to launch the WinAppDriver if it is not already running. Declaration public bool LaunchWinAppDriver { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Maximize Gets or sets a value indicating whether to maximize the window for the application. Declaration public bool Maximize { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WinAppDriverPath Gets or sets the path to the WinAppDriver installation for launch. By default, the path will be the default install location; C:\\Program Files (x86)\\Windows Application Driver\\WinAppDriver.exe. Declaration public string WinAppDriverPath { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Configure() Configures the AppiumOptions with the specified additional options. Declaration public override void Configure() Overrides AppiumManagerOptions.Configure() | Improve this Doc View Source Configure((String, Object)[]) Configures the with the specified additional options. Declaration public void Configure((string, object)[] additionalOptions) Parameters Type Name Description System.ValueTuple < System.String , System.Object >[] additionalOptions The additional options to apply to the . | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides AppManagerOptions.ToString()"
  },
  "api/Legerity.Windows.WindowsByExtras.html": {
    "href": "api/Legerity.Windows.WindowsByExtras.html",
    "title": "Class WindowsByExtras | Legerity",
    "keywords": "Class WindowsByExtras Defines a collection of extra locator constraints for . Inheritance System.Object WindowsByExtras Namespace : Legerity.Windows Assembly : Legerity.Windows.dll Syntax public static class WindowsByExtras : object Methods | Improve this Doc View Source AutomationId(String) Gets a mechanism to find elements by the Windows Automation ID. Declaration public static By AutomationId(string automationId) Parameters Type Name Description System.String automationId The automation ID to find. Returns Type Description By A object the driver can use to find elements."
  },
  "articles/archive/available-packages.html": {
    "href": "articles/archive/available-packages.html",
    "title": "Available packages | Legerity",
    "keywords": "Available Legerity packages Legerity components are publicly available via NuGet.org. Each available package is detailed below. For non-core platform controls, for example, the Windows Community Toolkit, we provide additional extension packages for you to take advantage of within your UI test projects. Package Current Preview Legerity Legerity.Core Legerity.Windows Legerity.Android Legerity.IOS Legerity.Web Legerity.Web.Authentication Legerity.MADE Legerity.Telerik.Uwp Legerity.WCT Legerity.WinUI Bringing your control libraries to Legerity Do you have a collection of custom controls that you'd like to see added to the Legerity framework? Feel free to drop a feature request into our work tracker ! We also encourage you to build out your custom control wrapper elements within the framework and help out our community! Legerity The Legerity package is a meta-package that contains all of the core platform components of the framework including the page object pattern components, plus all Windows, Android, iOS, and Web element wrappers. It has dependencies on the additional packages: Core Windows Android IOS Web Write tests with Legerity Core The Core package provides the base capabilities to get you building maintainable UI tests quickly. It includes features such as: BasePage, a base page object for creating maintainable UI tests following the page object pattern. AppManager, for configuring, launching, and managing the lifecycle of your application under test. ElementWrapper, a base for our platform element wrappers and the capabilities for you to build your own. Learn the page object pattern Discover building element wrappers Windows The Windows package provides the capabilities for building platform element wrappers for Windows applications. It includes the base WindowsElementWrapper as well as the following element wrappers for core Windows controls: AppBarButton, a clickable app bar button element AppBarToggleButton, an app bar button element with a toggle state AutoSuggestBox, a text input element which also has auto-complete capabilities Button, a clickable button element CalendarDatePicker, a popup element with capabilities to select a date from a calendar CalendarView, a calendar date picker element CheckBox, a checkable element ComboBox, a drop down selector CommandBar, a wrapper element for displaying app bar button elements DatePicker, an element for selecting and validating dates FlipView, a carousel-like element for viewing items within a collection GridView, a visual list based element which shows items in a grid Hub, a layout element for displaying content within sections HyperlinkButton, a clickable URL button element InkToolbar, a wrapper element for displaying ink selection elements ListBox, a list item selector ListView, a visual list based element which shows items in a vertical list MenuFlyoutItem, a clickable element from a menu flyout MenuFlyoutSubItem, a clickable sub element of a menu flyout item PasswordBox, a text input element for secret values Pivot, a layout element for displaying content on pivotal pages ProgressBar, a visual indicator element for percentage progress ProgressRing, a visual indicator element for progress RadioButton, a selectable button element Slider, a value selection element that allows a value to be selected in a range TextBlock, a readonly text element TextBox, a text input element TimePicker, an element for selecting and validating time ToggleButton, a button element with a toggle state ToggleSwitch, a slider element with an on/off toggle state Using the Windows package MADE.NET The MADE.NET package is an extension to the Windows components providing the element wrappers for MADE.NET UI controls for Windows applications. It includes the following element wrappers: DropDownList, a drop down element capable of selecting multiple options InputValidator, a validation element capable of validating the state of an input element Using the MADE.NET package Telerik for UWP The Telerik for UWP package is an extension to the Windows components providing the element wrappers for Telerik for UWP controls for Windows applications. It includes the following element wrappers: RadAutoCompleteBox, a text input element which also has auto-complete capabilities RadBulletGraph, a graphing element for bullet graphs RadBusyIndicator, a status indicator element RadNumericBox, a text input element for numeric values with value stepper capabilities Using the Telerik for UWP package Windows Community Toolkit The Windows Community Toolkit package is an extension to the Windows components providing the element wrappers for Windows Community Toolkit controls for Windows applications. It includes the following element wrappers: BladeView, an Azure portal-like bladed UI element which can be opened to show drill-down information Expander, a wrapper element capable of showing and hiding content InAppNotification, a popup element for displaying notifications within applications RadialGauge, a graphing element for a gauge Using the Windows Community Toolkit package Windows UI (WinUI) The WinUI package is an extension to the Windows components providing the element wrappers for WinUI 2 controls for Windows applications. Currently, there is no support for WinUI 3 due to limitations in the WinAppDriver which is used for running UI tests for Windows applications. It includes the following element wrappers: MenuBar MenuBarItem NavigationView NavigationViewItem NumberBox TabView Using the WinUI package Android The Android package provides the capabilities for building platform element wrappers for Android applications. It includes the base AndroidElementWrapper as well as the following element wrappers for core Android controls: Button, a clickable button element CheckBox, a checkable element DatePicker, an element for selecting and validating dates EditText, a text input element RadioButton, a selectable button element Spinner, a drop down selector Switch, a slider element with an on/off toggle state TextView, a readonly text element ToggleButton, a button element with a toggle state View, a base for Android elements Using the Android package IOS The iOS package provides the capabilities for building platform element wrappers for iOS applications. It currently only includes the base IOSElementWrapper for building element wrappers for iOS controls. As we added more iOS element wrappers, we will update the documentation here. Using the iOS package Web The Web package provides the capabilities for building platform element wrappers for Web applications. It includes the base WebElementWrapper as well as the following element wrappers for core Web controls: Button, a clickable button element CheckBox, a checkable element FileInput, an input element for uploading files Image, a visual element for display images List, an ordered or unordered list element with items NumberInput, a text input element for numeric values Option, an child option for a drop down element RadioButton, a selectable button element RangeInput, a value selection element that allows a value to be selected in a range Select, a drop down selector TextArea, a multi-line text input element TextInput, a default text input element Using the Web package Web Authentication The Web Authentication extension package provides the capabilities for common page objects that cover standard web authentication provider flows, such as Azure Active Directory login. Using the Web Authentication package"
  },
  "articles/archive/best-practices.html": {
    "href": "articles/archive/best-practices.html",
    "title": "UI test best practices | Legerity",
    "keywords": "UI test best practices Understanding the page object pattern The goal of the page object pattern is to use page objects to extract page interactions from your tests. Ideally, they will store all your selectors to find UI elements and their interactions for a page. Using the Legerity BasePage As a part of the Core package, Legerity provides a BasePage class which is a starting point for creating pages for your application. Below is an example of a page object for the edit alarm page in the Windows Alarms & Clock application. namespace WindowsAlarmsAndClock.Pages { using System; using Legerity.Pages; using Legerity.Windows.Extensions; using OpenQA.Selenium; using OpenQA.Selenium.Appium.Windows; using WindowsAlarmsAndClock.Elements; public class EditAlarmPage : BasePage { private readonly By alarmTimePicker; private readonly By alarmNameTextBox; private readonly By alarmRepeatButton; private readonly By alarmSoundButton; private readonly By alarmSnoozeComboBox; private readonly By alarmSaveButton; private readonly By alarmCancelButton; private readonly By alarmDeleteButton; private readonly By alarmDeleteDialog; public EditAlarmPage() { this.alarmTimePicker = ByExtensions.AutomationId(\"AlarmTimePicker\"); this.alarmNameTextBox = ByExtensions.AutomationId(\"AlarmNameTextBox\"); this.alarmRepeatButton = ByExtensions.AutomationId(\"AlarmRepeatsToggleButton\"); this.alarmSoundButton = ByExtensions.AutomationId(\"AlarmSoundButton\"); this.alarmSnoozeComboBox = ByExtensions.AutomationId(\"AlarmSnoozeCombobox\"); this.alarmSaveButton = ByExtensions.AutomationId(\"AlarmSaveButton\"); this.alarmCancelButton = ByExtensions.AutomationId(\"CancelButton\"); this.alarmDeleteButton = ByExtensions.AutomationId(\"AlarmDeleteButton\"); this.alarmDeleteDialog = ByExtensions.AutomationId(\"DeleteConfirmationDialog\"); } protected override By Trait => ByExtensions.AutomationId(\"EditAlarmHeader\"); public EditAlarmPage SetAlarmTime(TimeSpan time) { CustomTimePicker customTimePicker = this.WindowsApp.FindElement(this.alarmTimePicker); customTimePicker.SetTime(time); return this; } public EditAlarmPage SetAlarmName(string name) { WindowsElement textBox = this.WindowsApp.FindElement(this.alarmNameTextBox); textBox.Click(); textBox.SendKeys(name); return this; } public void SaveAlarm() { this.WindowsApp.FindElement(this.alarmSaveButton).Click(); } public void DeleteAlarm() { this.WindowsApp.FindElement(this.alarmDeleteButton).Click(); this.WindowsApp.FindElement(this.alarmDeleteDialog).FindElementByName(\"Delete\").Click(); } public void CancelEditAlarm() { this.WindowsApp.FindElement(this.alarmCancelButton).Click(); } } } The page object contains the queries for all of the elements that can be interacted with, as well as common actions that can be performed on the page such as setting the name, alarm time, and the ability to save an alarm. Configuring a common page trait Each page has a trait. This is a UI element that is always displayed on this page. This can often be a title element for the view or a specific menu item in a selected state. The Trait is used when the page is constructed to ensure that the page is currently in view. By default, there will be a 2-second wait for the element to appear before the test will fail. Showcase example with page object and tests In the below example, a page is being defined for the XAML Controls Gallery app that showcases the functionality of a ComboBox control. You'll notice in this example that there are multiple actions that this page can serve. Where actions can be chained, the instance of the page can be returned to produce a simple human-readable test. Example page object for ComboBoxPage namespace XamlControlsGallery.Pages.BasicInput { using Legerity.Pages; using Legerity.Windows.Elements.Core; using Microsoft.VisualStudio.TestTools.UnitTesting; using OpenQA.Selenium; public class ComboBoxPage : BasePage { private readonly By colorComboBox = By.Name(\"Colors\"); public ComboBox ColorComboBox => this.WindowsApp.FindElement(this.colorComboBox); protected override By Trait => By.XPath(\".//*[@Name='ComboBox'][@AutomationId='TitleTextBlock']\"); public ComboBoxPage SetColorsComboBoxItem(string expectedItem) { this.ColorComboBox.SelectItem(expectedItem); return this; } public void VerifyColorsComboBoxItem(string expectedItem) { Assert.AreEqual(expectedItem, this.ColorComboBox.SelectedItem); } } } Example tests for ComboBoxPage namespace XamlControlsGallery.Tests.BasicInput { using Microsoft.VisualStudio.TestTools.UnitTesting; using XamlControlsGallery.Pages; using XamlControlsGallery.Pages.BasicInput; [TestClass] public class ComboBoxTests : BaseTestClass { private static ComboBoxPage ComboBoxPage { get; set; } [TestInitialize] public override void Initialize() { base.Initialize(); ComboBoxPage = new NavigationMenu().GoToComboBox(); } [TestMethod] public void SetColorsComboBoxToGreen() { var expectedItem = \"Green\"; ComboBoxPage.SetColorsComboBoxItem(expectedItem) .VerifyColorsComboBoxItem(expectedItem); } } }"
  },
  "articles/archive/building-platform-wrappers.html": {
    "href": "articles/archive/building-platform-wrappers.html",
    "title": "Building platform element wrappers | Legerity",
    "keywords": "Building platform element wrappers The goal of the platform element wrappers is to provide an easy set of components that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. Using the platform element wrappers Using an element wrapper in your UI tests is super simple. Where you want to find an element in the Appium driver that would usually return an AppiumWebElement or platform alternative, simply replace the var or Type with the intended element wrapper. See our example below. Slider slider = this.Driver.FindElement(ByExtensions.AutomationId(\"MySlider\")); From there, you can access all of the additional actions and properties that are exposed by the element wrapper. Creating your own platform element wrappers While out-of-the-box, Legerity provides a collection of core element wrappers for Windows, Android, iOS, and the Web, we expose the parts of the framework that allow you to create elements for your own custom controls! Example In this example, the application under test has a custom time picker control. It's recommended that when creating your own element wrappers, you provide the implicit operators that will allow you to use your wrapper when finding an element without direct casting. namespace WindowsAlarmsAndClock.Elements { using System; using Legerity.Windows.Elements; using Legerity.Windows.Extensions; using OpenQA.Selenium; using OpenQA.Selenium.Appium; using OpenQA.Selenium.Appium.Windows; public class CustomTimePicker : WindowsElementWrapper { private readonly By hourSelectorQuery = ByExtensions.AutomationId(\"HourLoopingSelector\"); private readonly By minuteSelectorQuery = ByExtensions.AutomationId(\"MinuteLoopingSelector\"); public CustomTimePicker(WindowsElement element) : base(element) { } public static implicit operator CustomTimePicker(WindowsElement element) { return new CustomTimePicker(element); } public static implicit operator CustomTimePicker(AppiumWebElement element) { return new CustomTimePicker(element as WindowsElement); } public void SetTime(TimeSpan time) { this.Element.FindElement(this.hourSelectorQuery).FindElementByName(time.ToString(\"%h\")).Click(); this.Element.FindElement(this.minuteSelectorQuery).FindElementByName(time.ToString(\"mm\")).Click(); } } } Understanding the platform specifics Each of the platform-specific element wrappers exposes not just the wrapper element but the associated UI test driver for that application type to allow you to access more information around your control. For example, a control may contain a popup or flyout that is displayed in a different UI tree to the current element, such as the Windows InkToolbar . If you want to create a platform-specific wrapper, you can start by implementing one of the following platform base wrappers. WindowsElementWrapper AndroidElementWrapper IOSElementWrapper WebElementWrapper Using Windows element wrappers The Windows element wrappers are designed to be used with applications built for the Windows platform. Discover the Windows element wrappers Using Android element wrappers The Android element wrappers are designed to be used with applications built for the Android platform. Discover the Android element wrappers Using iOS element wrappers The iOS element wrappers are designed to be used with applications built for the iOS platform. Discover the iOS element wrappers Using Web element wrappers The Web element wrappers are designed to be used with applications built for the Web. Discover the Web element wrappers"
  },
  "articles/archive/building-with-legerity.html": {
    "href": "articles/archive/building-with-legerity.html",
    "title": "Writing UI tests | Legerity",
    "keywords": "Writing UI tests with Legerity Writing UI tests should be simple and easy. Legerity exposes an AppManager that is a lightweight wrapper for the application driver that allows you to start your applications using a configuration object. Creating a base test class Using your testing framework of choice, getting your application started in the appropriate Selenium driver is as simple as calling AppManager.StartApp() passing through an AppManagerOptions configuration object. Depending on your configuration object, the specific application will launch. Currently, the AppManager configuration supports the following app drivers. WindowsDriver WindowsAppManagerOptions AndroidDriver AndroidAppManagerOptions IOSDriver IOSAppManagerOptions ChromeDriver, FirefoxDriver, OperaDriver, SafariDriver, EdgeDriver, InternetExplorerDriver WebAppManagerOptions For Appium drivers, an options object also provides the use of additional capabilities using the AppiumOptions object to apply to the driver when the app is started. In the examples below, using NUnit, each test that implements the BaseTestClass will launch the application at the start of each test, then close the application once the test has been completed. Example base test class for a Windows application This example showcases how to start your Windows application using the application's unique identifier. When your tests start, the LaunchWinAppDriver property of the WindowsAppManagerOptions will automatically start a new WinAppDriver process, if one is not already running. This support allows you to easily run your tests as part of a CI build without additional overhead of scripting the process to run. You also have additional properties that allows you to maximize the application window, or set the size of the window. This is useful in scenarios where your application has responsive UI and you wish to test it under those views. namespace MyWindowsApplication.UiTests { using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Threading.Tasks; using Legerity; using Legerity.Windows; using Legerity.Windows.Extensions; using NUnit.Framework; using OpenQA.Selenium.Appium.Windows; using OpenQA.Selenium.Remote; public abstract class BaseTestClass : LegerityTestClass { public const string WindowsApplication = \"com.madeapps.sampleapp_7mzr475ysvhxg!App\"; protected WindowsDriver<WindowsElement> WindowsApp { get; private set; } [SetUp] public void Initialize() { WindowsApp = this.StartWindowsApp( new WindowsAppManagerOptions(WindowsApplication) { DriverUri = \"http://127.0.0.1:4723\", LaunchWinAppDriver = true, Maximize = true }); } [TearDown] public void Cleanup() { StopApp(WindowsApp); } } } Example base test class for an Android application This example showcases how to start your Android application using the ID and activity of an app that is already installed on a device. You can also choose to launch your application by APK if the application is not installed. When your tests start, the LaunchAppiumServer property of the AndroidAppManagerOptions will automatically start a new Appium server process, if one is not already running. This support allows you to easily run your tests as part of a CI build without additional overhead of scripting the process to run. You also have additional properties that allows you to choose the device that the application should be under test on using the DeviceName or DeviceId property. This is useful if you wish to pick a specific emulator or physical device. namespace MyAndroidApplication.UiTests { using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Threading.Tasks; using Legerity; using Legerity.Android; using Legerity.Android.Extensions; using NUnit.Framework; using OpenQA.Selenium.Appium.Android; using OpenQA.Selenium.Remote; public abstract class BaseTestClass : LegerityTestClass { public const string AndroidApplication = \"com.made.sampleapp\"; public const string AndroidApplicationActivity = $\"{AndroidApplication}.MainActivity\"; protected AndroidDriver<AndroidElement> AndroidApp { get; private set; } [SetUp] public void Initialize() { AndroidApp = this.StartAndroidApp( new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, LaunchAppiumServer = true, DriverUri = \"http://localhost:4723/wd/hub\" }); } [TearDown] public void Cleanup() { StopApp(AndroidApp); } } } Example base test class for an iOS application This example showcases how to start your iOS application using the ID of an app that is already installed on a device. When your tests start, the LaunchAppiumServer property of the IOSAppManagerOptions will automatically start a new Appium server process, if one is not already running. This support allows you to easily run your tests as part of a CI build without additional overhead of scripting the process to run. You also have to provide additional properties that allows you to choose the device that the application should be under test on using the DeviceName or DeviceId property. This is useful if you wish to pick a specific emulator or physical device. namespace MyIOSApplication.UiTests { using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Threading.Tasks; using Legerity; using Legerity.IOS; using Legerity.IOS.Extensions; using NUnit.Framework; using OpenQA.Selenium.Appium.IOS; using OpenQA.Selenium.Remote; public abstract class BaseTestClass : LegerityTestClass { public const string IOSApplication = \"com.made.sampleapp\"; protected IOSDriver<IOSElement> IOSApp { get; private set; } [SetUp] public void Initialize() { IOSApp = this.StartIOSApp( new IOSAppManagerOptions { AppId = IOSApplication, DeviceName = \"iPhone SE (3rd generation) Simulator\", DeviceId = \"56755E6F-741B-478F-BB1B-A48E05ACFE8A\", OSVersion = \"15.4\", LaunchAppiumServer = true, DriverUri = \"http://localhost:4723/wd/hub\" }); } [TearDown] public void Cleanup() { StopApp(IOSApp); } } } Example base test class for a Web application This example showcases how to start your web application using a URL using a specific browser and associated driver. This example is using the Microsoft Edge browser with a path to the Microsoft Edge Web Driver . You can also use the web driver NuGet packages in your test project to automatically pull in the specific version of a web drive you require. When your tests start, the web browser will launch the URL provided to begin running the test scenarios. You also have additional properties that allows you to maximize the browser window, or set the size. This is useful in scenarios where your application has responsive UI and you wish to test it under those views. In this example, the AppManagerOptions.ExplicitWait property has been set to 10 seconds. This property is available to all AppManagerOptions types and ensures that the provided wait time is used while finding elements. In this example, a query for a UI element will wait a maximum of 10 seconds before failing. namespace MyWebApplication.UiTests { using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Threading.Tasks; using Legerity; using Legerity.Web; using NUnit.Framework; using OpenQA.Selenium.Remote; public abstract class BaseTestClass : LegerityTestClass { public const string WebApplication = \"http://localhost:5000\"; [SetUp] public void Initialize() { this.StartApp( new WebAppManagerOptions(WebAppDriverType.Edge, Path.Combine(Environment.CurrentDirectory, \"Tools\\\\Edge\")) { Maximize = true, Url = WebApplication, ImplicitWait = TimeSpan.FromSeconds(10) }); } [TearDown] public void Cleanup() { this.StopApp(); } } } Example base test class for a cross-platform application This example showcases how to start a cross-platform application that could potentially have the same user experience across all relevant platforms. It is also useful for testing the same applications across multiple browsers too. Taking advantage of the TestFixtureSource capability of NUnit, this setup allows a test class to be configured with multiple methods of construction. In this example, we are providing a collection of AppManagerOption objects as the source. This allows any tests within the class to run the respective app drivers and perform the same test across multiple platforms. As you are not limited here by the number of applications, you can use this scenario for running against multiple web browsers, multiple variants of your native application, or run tests for applications built with the same user experience like Uno Platform or Xamarin. namespace MyApplication.UiTests { using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Threading.Tasks; using Legerity; using Legerity.Android; using Legerity.IOS; using Legerity.Web; using Legerity.Windows; using NUnit.Framework; using OpenQA.Selenium.Appium.Android; using OpenQA.Selenium.Appium.iOS; using OpenQA.Selenium.Appium.Windows; using OpenQA.Selenium.Remote; public abstract class BaseTestClass : LegerityTestClass { public const string AndroidApplication = \"Tools\\\\Android\\\\com.made.sampleapp.apk\"; public const string WebApplication = \"http://localhost:5000\"; public const string WindowsApplication = \"com.madeapps.sampleapp_7mzr475ysvhxg!App\"; protected BaseTestClass(AppManagerOptions options) : base(options) { } protected static IEnumerable<AppManagerOptions> TestPlatformOptions => new List<AppManagerOptions> { new AndroidAppManagerOptions(Path.Combine(Environment.CurrentDirectory, AndroidApplication)) { DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = true }, new WebAppManagerOptions( WebAppDriverType.Edge, Path.Combine(Environment.CurrentDirectory, \"Tools\\\\Edge\")) { Maximize = true, Url = WebApplication, ImplicitWait = TimeSpan.FromSeconds(10) }, new WindowsAppManagerOptions(WindowsApplication) { DriverUri = \"http://127.0.0.1:4723\", LaunchWinAppDriver = true, Maximize = true } }; [SetUp] public void Initialize() { this.StartApp(); } [TearDown] public void Cleanup() { this.StopApp(); } } [TestFixtureSource(nameof(TestPlatformOptions))] public class LoginPageTests : BaseTestClass { public LoginPageTests(AppManagerOptions options) : base(options) { } } }"
  },
  "articles/archive/features/android.html": {
    "href": "articles/archive/features/android.html",
    "title": "Using the Android element wrappers | Legerity",
    "keywords": "Using the Android element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Android element wrappers are designed to be used with applications built for the Android platform using out-of-the-box SDK control. Available element wrappers Button CheckBox DatePicker EditText RadioButton Spinner Switch TextView ToggleButton View"
  },
  "articles/archive/features/ios.html": {
    "href": "articles/archive/features/ios.html",
    "title": "Using the iOS element wrappers | Legerity",
    "keywords": "Using the iOS element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These iOS control wrappers are designed to be used with applications built for the iOS platform. Available element wrappers Button Label ProgressView Slider Switch TextField"
  },
  "articles/archive/features/made-windows.html": {
    "href": "articles/archive/features/made-windows.html",
    "title": "Using the MADE.NET Windows element wrappers | Legerity",
    "keywords": "Using the MADE.NET Windows element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Windows element wrappers are designed to be used with applications built with the MADE.NET UI Controls for the Windows platform. Available element wrappers DropDownList InputValidator"
  },
  "articles/archive/features/telerik-for-uwp.html": {
    "href": "articles/archive/features/telerik-for-uwp.html",
    "title": "Using the Telerik for UWP element wrappers | Legerity",
    "keywords": "Using the Telerik for UWP element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Windows element wrappers are designed to be used with applications built with the Telerik for UWP Controls for the Windows platform. Available element wrappers RadAutoCompleteBox RadBulletGraph RadBusyIndicator RadNumericBox"
  },
  "articles/archive/features/web.html": {
    "href": "articles/archive/features/web.html",
    "title": "Using the Web element wrappers | Legerity",
    "keywords": "Using the Web element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Web element wrappers are designed to be used with applications built for the Web using out-of-the-box SDK control. Available element wrappers Button CheckBox FileInput Image List NumberInput Option RadioButton RangeInput Select TextArea TextInput Additional Web library packages As well as the core Web element wrappers for out-of-the-box SDK controls, Legerity provides the following additional packages which can be used with UI test projects for web applications. Web Authentication page objects"
  },
  "articles/archive/features/web-authentication.html": {
    "href": "articles/archive/features/web-authentication.html",
    "title": "Using the Web authentication helpers | Legerity",
    "keywords": "Using the Web authentication helpers The goal of the Web authentication library is to provide an easy set of standard page objects to interact with common authentication provider flows on the web. Azure AD login AzureAdLoginPage Facebook login The Facebook login page object is designed to automate the Facebook authentication flow when building applications that support Facebook identity. Simply initialize the FacebookLoginPage when the page is in view, and call the Login method with a username and password to login. new FacebookLoginPage(AppManager.App) .Login(\"example@example.com\", \"example\"); FacebookLoginPage Google login The Google login page object allows you to automate authenticating Google users through the Google authentication UI. This is particularly useful when building applications that support Google identity. To use the page object, initialize the GoogleLoginPage when the page is in view, and call the Login method with a username and password to login. 💡 Google uses a 2-step process for authentication. The page object will handle this for you. GoogleLoginPage"
  },
  "articles/archive/features/windows.html": {
    "href": "articles/archive/features/windows.html",
    "title": "Using the Windows element wrappers | Legerity",
    "keywords": "Using the Windows element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Windows element wrappers are designed to be used with applications built for the Windows platform using out-of-the-box SDK control. Available element wrappers NOTE , these control wrappers will also work with applications using WinUI 2. AppBarButton AppBarToggleButton AutoSuggestBox Button CalendarDatePicker CalendarView CheckBox ComboBox CommandBar DatePicker FlipView GridView Hub HyperlinkButton InkToolbar ListBox ListView MenuFlyoutItem MenuFlyoutSubItem PasswordBox Pivot ProgressBar ProgressRing RadioButton Slider TextBlock TextBox TimePicker ToggleButton ToggleSwitch Additional Windows control library packages As well as the core Windows element wrappers for out-of-the-box SDK controls, Legerity provides the following additional packages which can be used with third-party control vendors. MADE.NET Telerik for UWP Windows Community Toolkit WinUI 2"
  },
  "articles/archive/features/windows-community-toolkit.html": {
    "href": "articles/archive/features/windows-community-toolkit.html",
    "title": "Using the Windows Community Toolkit element wrappers | Legerity",
    "keywords": "Using the Windows Community Toolkit element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Windows element wrappers are designed to be used with applications built with the Windows Community Toolkit Controls for the Windows platform. Available element wrappers BladeView BladeViewItem Carousel Expander InAppNotification RadialGauge"
  },
  "articles/archive/features/windows-ui.html": {
    "href": "articles/archive/features/windows-ui.html",
    "title": "Using the WinUI 2 element wrappers | Legerity",
    "keywords": "Using the WinUI 2 element wrappers The goal of the platform element wrappers is to provide an easy set of elements that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. These Windows element wrappers are designed to be used with applications built with the WinUI 2 controls for the Windows platform. Available element wrappers InfoBar MenuBar MenuBarItem NavigationView NavigationViewItem NumberBox RatingControl TabView"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Legerity",
    "keywords": "Getting started Getting started with Legerity is quick and easy! Legerity is distributed via NuGet.org, allowing you to install via a package manager. Supported platforms Legerity packages target .NET Standard 2.0 . This means that you can create UI tests with .NET , .NET Core, .NET Framework , and Mono ! Installing Releases of Legerity are published to NuGet.org and can be installed via your preferred package manager. To quickly get started with a specific platform, select one of the following quick starts: Windows : Create UI tests for Windows apps using WinAppDriver Android : Take advantage of the Appium ecosystem to create UI tests for Android apps iOS : Build UI tests for iOS apps with the power of Appium Web : Use your favourite browser to create UI tests for web apps using web drivers Cross-platform : Create easy-to-maintain UI tests across multiple platforms with a single test Note on terminology Throughout the documentation, you may see terms that are specific to Legerity. A page or page object is a class that represents a single page in your app. This is typically a class that inherits from BasePage in Legerity and is used to interact with the UI elements on that page. An element wrapper is a class that represents a single UI element, e.g. an input control. It is a wrapper around the IWebElement interface from Selenium, allowing Legerity to provide bespoke interaction methods for the represented UI element. This is typically a class that implements the IElementWrapper interface in Legerity and is used to interact with the UI element. Let's get started If you're not sure which platform to start with, we recommend starting with the Web quick start. This will give you a great overview of Legerity, how to create UI tests, and how to run them."
  },
  "articles/getting-started/quick-starts.html": {
    "href": "articles/getting-started/quick-starts.html",
    "title": "Quick Starts | Legerity",
    "keywords": "Quick starts These quick starts provide very minimal examples for getting your first test running on specific platforms to help you get started with using Legerity. Note If you'd like to dive into the details, explore our articles on using Legerity . Windows Android iOS Web Cross-platform"
  },
  "articles/getting-started/quick-starts/android.html": {
    "href": "articles/getting-started/quick-starts/android.html",
    "title": "Android Quick Start | Legerity",
    "keywords": "Android This quick start will get you up and running with writing UI tests for an Android application using Appium and Legerity. Prerequisites This quick start requires the following: An understanding of Selenium and working with the WebDriver APIs in .NET An understanding of Appium and working with the capabilities for Android A functioning installation of the .NET runtime and SDK Install Legerity templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. Create a new Android UI test project with NUnit To create a new Android UI test project with NUnit in your existing repository, created a new project folder and from within it, run the following command: dotnet new legerity-android This will create a new Android UI test project with the following structure: MyProject ├── Elements ├── Pages │ └── SamplePage.cs ├── Tests │ └── SampleTests.cs ├── BaseTestClass.cs ├── GlobalUsing.cs ├── MyProject.csproj The project will include dependencies for NUnit, Appium, and Legerity for Android. The BaseTestClass class is a simple abstraction used for all of your test classes, based on the Legerity LegerityTestClass . The base test class is a great way to centralize common logic for your tests, to abstract the boilerplate code away from your tests, such as managing the application drivers. Note The BaseTestClass in this template shows how to configure the application to launch and the activity you want to launch to. This should be updated to launch your own application via the AndroidApplication and AndroidApplicationActivity constants. The SamplePage and SampleTests classes are used to show the basic structure of a page object and test class . In this template, they highlight finding a button by ID and verifying it is shown. Note The SamplePage and SampleTests classes are intended to be used as a guide for structuring tests. These should be removed and replaced with your own tests and page objects. Dive into more Now that you have your test project up, you can dive deeper into: Using the base test class Creating page objects Creating test classes Locating elements with Legerity by locators Using and creating element wrappers Using custom conditions to wait for elements"
  },
  "articles/getting-started/quick-starts/cross-platform.html": {
    "href": "articles/getting-started/quick-starts/cross-platform.html",
    "title": "Cross Platform Quick Start | Legerity",
    "keywords": "Cross Platform This quick start will get you up and running with writing cross-platform UI tests for Android, iOS, Windows, and Web using Legerity. The approach is cross-platform framework agnostic, so whether you've built your app with Xamarin, Flutter, React Native, or any other cross-platform framework, you can use Legerity to write cross-platform UI tests for it. Prerequisites This quick start requires the following: An understanding of Selenium and working with the WebDriver APIs in .NET An understanding of Appium A functioning installation of the .NET runtime and SDK For iOS, a functioning installation of Xcode on macOS with simulators installed For Windows, a Windows 10 or Windows 11 device with the WinAppDriver installed Install Legerity templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. Create a new cross-platform UI test project with NUnit To create a new cross-platform UI test project with NUnit in your existing repository, created a new project folder and from within it, run the following command: dotnet new legerity-xplat This will create a new cross-platform UI test project with the following structure: MyProject ├── Elements ├── Pages │ └── SamplePage.cs ├── Tests │ └── SampleTests.cs ├── BaseTestClass.cs ├── GlobalUsing.cs ├── MyProject.csproj The project will include dependencies for NUnit, Appium, and Legerity for Windows (including WinUI), Android, iOS, and Web. Note The ChromeDriver is used to demonstrate the use of the Web driver. You can run your UI tests on as many browsers as you like by installing the relevant driver NuGet package into the project and providing additional PlatformOptions to your BaseTestClass . Legerity supports Chrome, Firefox, Opera, Safari, Edge, and Internet Explorer. The BaseTestClass class is a simple abstraction used for all of your test classes, based on the Legerity LegerityTestClass . The base test class is a great way to centralize common logic for your tests, to abstract the boilerplate code away from your tests, such as managing the application drivers. The PlatformOptions property is used to configure all the various cross-platform drivers for the applications you want to test. You configure as many, or as few, platforms as you desire. Note In this template, the PlatformOptions property is configured to launch cross-platform UI tests for Android, iOS, Windows, and Web. The SamplePage and SampleTests classes are used to show the basic structure of a page object and test class . In this template, they highlight how to use the App property of the BasePage configured during instantiation to find a UI element specific to a platform. This approach works well for applications that have a similar user experience across each platform. This same approach can be used on the element wrappers to abstract the platform-specific logic away from your tests, ensuring an easier interface when using them in your page objects and tests. Note The SamplePage and SampleTests classes are intended to be used as a guide for structuring tests. These should be removed and replaced with your own tests and page objects. Dive into more Now that you have your test project up and running, you can dive deeper into: Using the base test class Creating page objects Creating test classes Locating elements with Legerity by locators Using and creating element wrappers Using custom conditions to wait for elements"
  },
  "articles/getting-started/quick-starts/ios.html": {
    "href": "articles/getting-started/quick-starts/ios.html",
    "title": "iOS Quick Start | Legerity",
    "keywords": "iOS This quick start will get you up and running with writing UI tests for an iOS application using Appium and Legerity. Note It is recommended that a macOS device is used for this quick start. Prerequisites This quick start requires the following: An understanding of Selenium and working with the WebDriver APIs in .NET An understanding of Appium and working with the capabilities for iOS A functioning installation of the .NET runtime and SDK A functioning installation of Xcode on macOS with simulators installed Install Legerity templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. Create a new iOS UI test project with NUnit To create a new iOS UI test project with NUnit in your existing repository, created a new project folder and from within it, run the following command: dotnet new legerity-ios This will create a new iOS UI test project with the following structure: MyProject ├── Elements ├── Pages │ └── SamplePage.cs ├── Tests │ └── SampleTests.cs ├── BaseTestClass.cs ├── GlobalUsing.cs ├── MyProject.csproj The project will include dependencies for NUnit, Appium, and Legerity for iOS. The BaseTestClass class is a simple abstraction used for all of your test classes, based on the Legerity LegerityTestClass . The base test class is a great way to centralize common logic for your tests, to abstract the boilerplate code away from your tests, such as managing the application drivers. Note The BaseTestClass in this template shows how to configure the application to launch on an iPhone SE (3rd generation) Simulator. This should be updated to launch your own application via the IOSApplication constant and the device configuration in the PlatformOptions . The SamplePage and SampleTests classes are used to show the basic structure of a page object and test class . In this template, they highlight finding a button by name and verifying it is shown. Note The SamplePage and SampleTests classes are intended to be used as a guide for structuring tests. These should be removed and replaced with your own tests and page objects. Dive into more Now that you have your test project up, you can dive deeper into: Using the base test class Creating page objects Creating test classes Locating elements with Legerity by locators Using and creating element wrappers Using custom conditions to wait for elements"
  },
  "articles/getting-started/quick-starts/web.html": {
    "href": "articles/getting-started/quick-starts/web.html",
    "title": "Web Quick Start | Legerity",
    "keywords": "Web This quick start will get you up and running with writing UI tests for a Web application using the ChromeDriver and Legerity. Prerequisites This quick start requires the following: An understanding of Selenium and working with the WebDriver APIs in .NET A functioning installation of the .NET runtime and SDK Install Legerity templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. Create a new Web UI test project with NUnit To create a new Web UI test project with NUnit in your existing repository, created a new project folder and from within it, run the following command: dotnet new legerity-web This will create a new Web UI test project with the following structure: MyProject ├── Elements ├── Pages │ └── SamplePage.cs ├── Tests │ └── SampleTests.cs ├── BaseTestClass.cs ├── GlobalUsing.cs ├── MyProject.csproj The project will include dependencies for NUnit, Selenium, ChromeDriver, and Legerity for Web. Note The ChromeDriver is used to demonstrate the use of the Web driver. You can run your UI tests on as many browsers as you like by installing the relevant driver NuGet package into the project and providing additional PlatformOptions to your BaseTestClass . Legerity supports Chrome, Firefox, Opera, Safari, Edge, and Internet Explorer. The BaseTestClass class is a simple abstraction used for all of your test classes, based on the Legerity LegerityTestClass . The base test class is a great way to centralize common logic for your tests, to abstract the boilerplate code away from your tests, such as managing the application drivers. Note The BaseTestClass in this template is currently configured to launch https://www.example.com . This should be updated to launch your own application via the WebApplication constant. The SamplePage and SampleTests classes are used to show the basic structure of a page object and test class . In this template, they highlight locating the main h1 tag and verifying the element is shown. Note The SamplePage and SampleTests classes are intended to be used as a guide for structuring tests. These should be removed and replaced with your own tests and page objects. Run the tests To run the tests, you can use the following command from the UI test project: dotnet test Chrome should launch at the expected URL and the tests should pass. Dive into more Now that you have your test project up and running, you can dive deeper into: Using the base test class Creating page objects Creating test classes Locating elements with Legerity by locators Using and creating element wrappers Using custom conditions to wait for elements"
  },
  "articles/getting-started/quick-starts/windows.html": {
    "href": "articles/getting-started/quick-starts/windows.html",
    "title": "Windows Quick Start | Legerity",
    "keywords": "Windows This quick start will get you up and running with writing UI tests for a Windows (UWP) application using the WinAppDriver and Legerity. Prerequisites This quick start requires the following: An understanding of Selenium and working with the WebDriver APIs in .NET A functioning installation of the .NET runtime and SDK A Windows 10 or Windows 11 device with the WinAppDriver installed Install Legerity templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. Create a new Windows UI test project with NUnit To create a new Windows UI test project with NUnit in your existing repository, created a new project folder and from within it, run the following command: dotnet new legerity-windows This will create a new Windows UI test project with the following structure: MyProject ├── Elements ├── Pages │ └── SamplePage.cs ├── Tests │ └── SampleTests.cs ├── BaseTestClass.cs ├── GlobalUsing.cs ├── MyProject.csproj The project will include dependencies for NUnit, Appium, and Legerity for Windows (including WinUI). The BaseTestClass class is a simple abstraction used for all of your test classes, based on the Legerity LegerityTestClass . The base test class is a great way to centralize common logic for your tests, to abstract the boilerplate code away from your tests, such as managing the application drivers. Note The BaseTestClass in this template is currently configured to launch the Clock application on Windows 11. This should be updated to launch your own application via the WindowsApplication constant. The SamplePage and SampleTests classes are used to show the basic structure of a page object and test class . In this template, they highlight the launch and verification of the landing page of the Clock application on Windows 11. Note The SamplePage and SampleTests classes are intended to be used as a guide for structuring tests. These should be removed and replaced with your own tests and page objects. Run the tests To run the tests, you can use the following command from the UI test project: dotnet test The Clock application should launch and the tests should pass. Dive into more Now that you have your test project up and running, you can dive deeper into: Using the base test class Creating page objects Creating test classes Locating elements with Legerity by locators Using and creating element wrappers Using custom conditions to wait for elements"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Legerity",
    "keywords": "Legerity Legerity is a C# testing framework built on Selenium for building maintainable automated UI tests for Windows, Android, iOS, and Web applications. The framework is agnostic of unit testing framework so you can use your flavor of choice; we do however recommend and use NUnit for our tests and samples. The purpose of Legerity is to simplify the development of UI tests by providing easy-to-use element wrappers for native platform controls. This allows you to interact with the user interface as a user would: typing text into an input, toggling switches, and gestures - such as swiping through carousels. The platform element wrappers are designed so that all of the heavy lifting of querying the right UI elements is done for you. This allows you to speed up the development of your UI tests. Legerity also provides best practice components for writing UI tests, such as the page object pattern. This allows you to build maintainable, future-proof UI tests without requiring changes across your test suite when your application UI changes. Together with platform element wrappers, Legerity provides the best experience for you to build maintainable UI automation with speed. FAQ Why should I use Legerity? Do you find it difficult to get started with UI tests? Think that they take too long to build and become unmaintainable? So did I! That's where Legerity started, a toolkit on top of Selenium that makes my own UI test development fast and easy. This allows me to spend more time building my applications with confidence that my clients get the best, most tested experience. Can you write tests for cross-platform applications built with Xamarin or Uno Platform? You sure can. Frameworks such as Xamarin and Uno Platform compile an application down to the native platform they are built for such as iOS and Android. Using the UI automation tooling for those platforms, you can easily identify the UI elements and use our platform elements wrappers to interact with them. We are also working on a specific Legerity for Uno Platform project that will make it simpler to build a single suite of UI tests that just work across all your app platforms. What tools can I use to inspect my applications UI automation tree? There are many tools that are available to help you understand the layout of your application's UI. Here are helpful links to each platform where you can find more information on the right tooling for the app's you're testing. Windows Android iOS Web How do you keep Legerity going? Use of Legerity is free of charge to any one under an MIT license. The development of the project is supported by community contributions and small sponsorships and donations where possible. I have a specific question, where can I ask? If you have a query about UI testing with Legerity, please open a discussion in our GitHub project ."
  },
  "articles/using-legerity.html": {
    "href": "articles/using-legerity.html",
    "title": "Using Legerity | Legerity",
    "keywords": "Using Legerity To use and understand Legerity, this documentation has been organized to start with the basics and then build up to more advanced topics. Note To get started quickly, you can explore our quick starts to use our UI test project templates to get up and running with Legerity. Installation Test Frameworks Test Classes App Manager Element Wrappers Page Objects By Locators Wait Conditions"
  },
  "articles/using-legerity/app-manager.html": {
    "href": "articles/using-legerity/app-manager.html",
    "title": "App Manager | Legerity",
    "keywords": "App manager The AppManager is a lightweight wrapper for a Selenium application driver that allows you to start your applications using a Legerity AppManagerOptions configuration object. Understanding the app manager options Each platform has its own AppManagerOptions implementation that each include custom properties specific to them. For example, the AndroidAppManagerOptions class includes the AppActivity property that is specific to Android. Here's a complete list of the AppManagerOptions implementations: AndroidAppManagerOptions IOSAppManagerOptions WindowsAppManagerOptions WebAppManagerOptions AppManagerOptions and AppiumManagerOptions are also available for use if you want to use the base implementations to create your own custom implementations for other platforms, as well as customising for your own needs. Configuring the app manager to start your app The AppManager is straightforward to configure and use. You simply construct your AppManagerOptions object and pass it through to the AppManager.StartApp method. This will return your application driver that you can use to interact with your application. public class MyTests { [Test] public void MyTest() { AppManagerOptions options = new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait, }; var app = AppManager.StartApp(options); } } Note When not running parallel tests, the AppManager also exposes an App property that will return the current application driver. This is useful when you want to interact with the application driver directly. Running parallel app tests When running parallel tests, you will need to ensure that each test is using its own application driver. The AppManager handles this for you under the hood by creating new instances of an application driver for each call of the StartApp method. The multiple launched application drivers are managed under the StartedApps collection on the AppManager class. Note In your tests, you shouldn't need to interact with the StartedApps collection directly, as the AppManager will handle this for you. However, it is exposed if there is a custom scenario that you need to handle. Waiting until the app is ready When starting your application, you may want to wait until the application is ready before interacting with it. A good use case for this scenario is when you want to wait until a loading screen in your app has finished before interacting with it. To do this, when you start your application, you can pass through a Func<IWebDriver, bool> to the StartApp method that will be verified until it returns true or the timeout is reached. public class MyTests { [Test] public void MyTest() { AppManagerOptions options = new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait }; AppManager.StartApp(options, (driver) => { return driver.FindElement(By.Id(\"loading\")).Displayed; }, TimeSpan.FromSeconds(5)); } } Note The StartApp method also has one final optional parameter that allows you to retry the wait condition for a configurable number of times before accepting the condition as failed. Stopping the app When you have finished with your application, you can stop it using the AppManager.StopApp method. This will stop the driver, close the application, and has the ability to also stop the Appium server if it was launched by the AppiumManagerOptions . public class MyTests { [Test] public void MyTest() { AppManagerOptions options = new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait }; var app = AppManager.StartApp(options); // Do some stuff with the app AppManager.StopApp(app); } } Note When not running parallel tests, the AppManager has a parameterless StopApp method that will stop the current application driver. There is also a StopApps method that will stop all of the started application drivers. This is useful if you're running parallel tests and want to perform a cleanup of all of the started application drivers as part of a final teardown method. public class MyTests { [Test] public void MyTest() { AppManagerOptions options = new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait }; var app = AppManager.StartApp(options); // Do some stuff with the app AppManager.StopApp(app); } [TearDown] public void TearDown() { AppManager.StopApps(); } }"
  },
  "articles/using-legerity/by-locators.html": {
    "href": "articles/using-legerity/by-locators.html",
    "title": "By Locators | Legerity",
    "keywords": "By locators Locators are a fundamental page of automated UI testing, allow you to find elements within your application using a variety of different strategies, such as XPath, CSS selectors, or accessibility identifiers. Built on top of the capabilities of Selenium, Legerity provides a set of extra common and platform specific By locators that you can use to find elements within your application. You can find more information about the available locators in the following API references: Common By locators Windows By locators iOS By locators Android By locators Web By locators By All locator By Nested locator Finding elements that match all locators The ByAll locator allows you to find elements that match all of the provided locators. This is useful when you want to find an element that matches multiple criteria, such as a button that has a specific text. RemoteWebElement element = app.FindElement(new ByAll(By.TagName(\"button\"), ByExtras.Text(\"Send Message\"))); Finding elements that are nested by sequenced locators The ByNested locator allows you to find elements that are nested by a sequence of locators. This is useful when you want to find an element that is nested within other elements, such as a button that is inside a form, inside an ID'd element. RemoteWebElement element = app.FindElement(new ByNested(By.Id(\"PersonContainer\"), By.TagName(\"form\"), By.TagName(\"button\"))); Note The complete nesting does not need to be known, you can provide a subset of the nesting and the locator will find the element if it is nested within the provided locators. For example, you can also find the same button in the above example by providing the new ByNested(By.Id(\"PersonContainer\"), By.TagName(\"button\")) locator too. Finding elements by text The Core package provides ByExtras.Text and ByExtras.PartialText locators that can be used to find elements on the page by their text content. These can be used across any app platform! RemoteWebElement element1 = app.FindElement(ByExtras.Text(\"My text\")); RemoteWebElement element2 = app.FindElement(ByExtras.PartialText(\"text\")); Note These locators should only be used when you are sure that the text you are searching for is unique on the page. If there are multiple elements with the same text, you may get unexpected results. Finding elements by label on iOS The iOS package provides ByExtras.Label and ByExtras.PartialLabel locators that can be used to find elements on the page by their label content for iOS applications. RemoteWebElement element1 = app.FindElement(ByExtras.Label(\"My label\")); RemoteWebElement element2 = app.FindElement(ByExtras.PartialLabel(\"label\")); Finding elements by content description on Android The Android package provides ByExtras.ContentDescription and ByExtras.PartialContentDescription locators that can be used to find elements on the page by their content description for Android applications. This is particularly useful for certain elements that put their text content in the content description. RemoteWebElement element1 = app.FindElement(ByExtras.ContentDescription(\"My content description\")); RemoteWebElement element2 = app.FindElement(ByExtras.PartialContentDescription(\"description\")); Finding elements by value on iOS There are occasions where you may want to find an element by its value, such as a text field or a slider. The iOS package provides ByExtras.Value and ByExtras.PartialValue locators that can be used to find elements on the page by their value content for iOS applications. RemoteWebElement element1 = app.FindElement(ByExtras.Value(\"50\")); RemoteWebElement element2 = app.FindElement(ByExtras.PartialValue(\"%\")); Finding web Input element by type Finding elements by their type is a common requirement when testing web applications. The Web package provides ByExtras.InputType locators that can be used to find input elements on the page by their type, such as email or password . RemoteWebElement emailElement = app.FindElement(ByExtras.InputType(\"email\")); RemoteWebElement passwordElement = app.FindElement(ByExtras.InputType(\"password\")); Finding Windows elements by AutomationId Windows UI elements often have a unique AutomationId property that can be used to identify elements on the page. The Windows package provides ByExtras.AutomationId locators that can be used to find elements on the page by this property. RemoteWebElement element = app.FindElement(ByExtras.AutomationId(\"MyAutomationId\")); Note This locator exists due to the way that the Windows Application Driver works when finding elements by ID."
  },
  "articles/using-legerity/element-wrappers.html": {
    "href": "articles/using-legerity/element-wrappers.html",
    "title": "Element Wrappers | Legerity",
    "keywords": "Element wrappers Element wrappers are a unique feature of Legerity that allow you to \"wrap\" an application driver element with a custom class that mimics the functionality and exposed properties of the actual UI element. As they are a wrapper, they also expose the original RemoteWebElement that they are wrapping so you can still access the underlying functionality. This makes it much easier for you to find your elements in your tests and interact with them, without having to worry about the underlying implementation of the UI element. And because element wrappers start their life as a RemoteWebElement created from an application driver instance, the wrapper instance will always be in sync with the creating driver. Legerity provides a set of core element wrappers for Windows, Android, iOS, and the Web, but you can also create your own custom element wrappers for your own custom controls. They have a base type, ElementWrapper , that provides a set of common functionality that can be used across all of your elements. You can discover the platform specific element wrappers in the API references for each platform: Android iOS Windows WinUI Windows Community Toolkit Telerik UI for UWP MADE.NET UI Web Finding elements with element wrappers If you're familiar with the methods for finding elements with an application driver, you'll know exactly how to find them with an element wrapper. Each element wrapper has been created using implicit operators that allow you to find elements and simply cast them to the element wrapper type. For this example, we'll use the Slider element wrapper from the Windows platform. Slider slider = app.FindElement(By.Id(\"MySlider\")); We use the FindElement method on the application driver to find an element. By default, this would return a RemoteWebElement or platform alternative. However, we can assign this to a Button element wrapper instead, which will allow us to access all of the additional functionality that is exposed by Button . Interacting with elements Once you have found an element, you can interact with it using the exposed properties and methods. We'll continue with our example using the Slider element, and see how we can use the element wrapper to make selecting a value on the slider easier. Slider slider = app.FindElement(By.Id(\"MySlider\")); slider.SetValue(3); Here's what that would look like if we didn't use the element wrapper: RemoteWebElement slider = app.FindElement(By.Id(\"MySlider\")); slider.Click(); // Select the element for interaction var currentSliderValue = double.Parse(slider.GetAttribute(\"RangeValue.Value\")); while(Math.Abs(currentSliderValue - 3) > double.Epsilon) { slider.SendKeys(currentSliderValue < 3 ? Keys.ArrowRight : Keys.ArrowLeft); currentSliderValue = double.Parse(slider.GetAttribute(\"RangeValue.Value\")); } Note The actual Slider implementation for setting the value also takes into account the minimum and maximum values of the slider. This is not shown in the example above which would make the implementation more complex. As you can see, the element wrapper makes it much easier to interact with the element, and also makes the code much more maintainable and readable. Finding elements withing element wrappers Element wrappers also expose a FindElement method that allows you to find elements within the element wrapper. This is a common scenario where you have a complex UI element that contains other elements. By taking advantage of element wrappers, those elements within elements can also be wrapped with element wrappers, making it easier to find and interact with them too. Slider slider = app.FindElement(By.Id(\"MySlider\")); SliderThumb thumb = slider.FindElement(By.ClassName(\"SliderThumb\")); Creating custom element wrappers You can create your own custom element wrappers for your own custom controls. This is done by creating a class that inherits from an element wrapper base type or another custom element wrapper. Your core element wrapper base types are: ElementWrapper AndroidElementWrapper IOSElementWrapper WindowsElementWrapper WebElementWrapper Using one of these base types will allow you to inherit the functionality of the base type for that platform, and hooks into all the additional features offered by Legerity to support ElementWrapper types. For example, if you wanted to create a custom element wrapper for a custom control on the Windows platform, you would create a class that inherits from WindowsElementWrapper . Here's an example of a custom element wrapper for a text box control that exposes the text value with the ability to set it. public class TextBox : WindowsElementWrapper { public TextBox(RemoteWebElement element) : base(element) { } public virtual string Text => this.Element.GetAttribute(\"Value.Value\"); public static implicit operator TextBox(WindowsElement element) { return new TextBox(element); } public static implicit operator TextBox(AppiumWebElement element) { return new TextBox(element as WindowsElement); } public void SetText(string text) { this.Click(); this.Element.Clear(); this.Element.SendKeys(text); } } This custom element wrapper can then be used in your tests in the same way as the built-in element wrappers. TextBox textBox = app.FindElement(By.Id(\"MyTextBox\")); textBox.SetText(\"Hello World!\");"
  },
  "articles/using-legerity/installation.html": {
    "href": "articles/using-legerity/installation.html",
    "title": "Installation | Legerity",
    "keywords": "Installation Legerity is available as both individual NuGet packages you can install for Windows, Android, iOS, and Web, or as a single package that includes all of the Legerity packages. We also include project templates that you can use to quickly get up and running with writing UI tests with Legerity pre-installed. UI test project templates Legerity includes project templates to simplify the creation of new UI test projects. To install the templates, run the following command: dotnet new -i Legerity.Templates Once installed, typing dotnet new list Legerity will list all of the available Legerity templates including: Legerity UI Test project for Android ( legerity-android ) Legerity UI Test project for Cross Platform apps ( legerity-xplat ) Legerity UI Test project for iOS ( legerity-ios ) Legerity UI Test project for Web ( legerity-web ) Legerity UI Test project for Windows ( legerity-windows ) You can then create a new project by running the following command: dotnet new <template-name> When creating a project, the template will automatically add to an existing solution file if it can locate one, otherwise you will have to add it manually. For more information on how to use these, check out our quick starts . Legerity packages To install any of the Legerity packages outlined below, you can use the following command: dotnet add package <package-name> Or you can install the package via the NuGet package manager in your IDE of choice. Core packages The following core platform NuGet packages are available: Legerity - The meta-package for Legerity that includes all of the platform-specific packages Legerity.Core - The core package for Legerity containing the core functionality for managing apps, pages, and elements required for all platforms Legerity.Android - The Android platform package for Legerity containing Android specific element wrappers, extensions, and helpers Legerity.IOS - The iOS platform package for Legerity containing iOS specific element wrappers, extensions, and helpers Legerity.Web - The Web platform package for Legerity containing Web specific element wrappers, extensions, and helpers Legerity.Windows - The Windows platform package for Legerity containing Windows specific element wrappers, extensions, and helpers Legerity.WinUI - The WinUI extension package for Legerity for Windows containing WinUI specific element wrappers Additional packages Legerity also offers a number of additional packages that can be used to extend the functionality of platforms and available features including: Legerity.MADE - The MADE.NET UI extension package for Legerity for Windows containing MADE specific element wrappers Legerity.Telerik.Uwp - The Telerik UI for UWP extension package for Legerity for Windows containing Telerik specific element wrappers Legerity.WCT - The Windows Community Toolkit extension package for Legerity for Windows containing Windows Community Toolkit specific element wrappers Legerity.Web.Authentication - The Web Authentication extension package for Legerity for Web containing page objects for authenticating with identity providers such as Azure AD, Google, and Facebook Page object generation tool Legerity also offers a page object generation tool that can be used to generate page objects for your apps. This tool works by pointing it at your application source pages and it will generate the page objects for you based on the elements it finds. To install the templates, run the following command: dotnet tool install -g Legerity.PageObjectGenerator You can find more detail on how to use the tool in the page object generation section."
  },
  "articles/using-legerity/page-objects.html": {
    "href": "articles/using-legerity/page-objects.html",
    "title": "Page Objects | Legerity",
    "keywords": "Page objects Page objects are a great way to abstract away the UI test code that is required to perform interactions with a specific page in your application. The page object is a standard design pattern in UI test automation for improving the maintainability of your tests by reducing the duplication of interaction code. When you use page objects across all your tests, you can start to write the tests in a more declarative way, which makes them easier to read and understand. Plus, if your UI changes, you only need to update the page object and not all your tests. Understanding the Base Page object in Legerity Legerity offers a BasePage class as a part of the Core package and provides a starting point for creating pages objects for your application pages. The base page wraps your application driver, and provides easy-to-use methods for finding elements and performing interactions with them. Note When paired with element wrappers , you can start to build a page object model that is even easier to maintain with the additional abstraction of element interactions. Creating a page object Before diving into a page object, let's first look at what a test looks like without a page object. public class LoginTests : LegerityTestClass { [Test] public void ShouldLoginSuccessfully() { this.App.FindElement(By.Id(\"usernameInput\")).SendKeys(\"username\"); this.App.FindElement(By.Id(\"passwordInput\")).SendKeys(\"password\"); this.App.FindElement(By.Id(\"loginButton\")).Click(); Assert.IsTrue(this.App.FindElement(By.Id(\"loggedInText\")).Displayed); } } Although concise, there are a few challenges with this approach. Login may be a common action in your application, so you may want to reuse this code across multiple tests. The current format would require you to copy and paste this code into each test. This test combines both the location of the element with the interaction. If you need to change the interaction model or locator, you would need to update all the tests that use this code. Reading the test code to understand what is happening is not as straight forward as it could be, as from a top level, you need to understand the interaction model and the element locator. With Legerity's page object model, you can start to abstract away the interaction code and make it easier to reuse across multiple tests. public class LoginPage : BasePage { private readonly By loginButtonLocator = By.Id(\"loginButton\"); public LoginPage(RemoteWebDriver app) : base(app) { } protected override By Trait => loginButtonLocator; public RemoteWebElement UsernameInput => this.App.FindElement(By.Id(\"usernameInput\")); public RemoteWebElement PasswordInput => this.App.FindElement(By.Id(\"passwordInput\")); public RemoteWebElement LoginButton => this.App.FindElement(loginButtonLocator); public HomePage Login(string username, string password) { this.UsernameInput.SendKeys(username); this.PasswordInput.SendKeys(password); this.LoginButton.Click(); return new HomePage(this.App); } } public class HomePage : BasePage { private readonly By loggedInTextLocator = By.Id(\"loggedInText\"); public HomePage(RemoteWebDriver app) : base(app) { } protected override By Trait => loggedInTextLocator; public RemoteWebElement LoggedInText => this.App.FindElement(loggedInTextLocator); public bool IsLoggedIn() { return this.LoggedInText.Displayed; } } public class LoginTests : LegerityTestClass { [Test] public void ShouldNavigateToHomePageAfterLogin() { HomePage homePage = new LoginPage(this.App).Login(\"username\", \"password\"); Assert.IsTrue(homePage.IsLoggedIn()); } } With this page object, you can start to reuse it across your tests using the abstracted interaction logic. Note In the example page object, page interactions return a page object. This allows you to chain interactions together, which can make it easier to follow the flow of a test. You can even use page object methods to chain page-to-page navigation within your tests. You can also start to see how the page object can be used to improve the readability of your tests. It allows you to focus on writing tests that meet your functional requirements, rather than the implementation details of how to interact with the UI. The page object trait The page object Trait is a property that is used to determine if the page is in a valid state by locating an element that is always present on the page. When you create a page object, you will need to implement the Trait property to provide a locator that can be used to determine if the page is in a valid state. This Trait is used during the construction of the page object using the WaitTimeout that you can also configured in the constructor. By default, the WaitTimeout is set to 2 seconds. Combining page objects with element wrappers Where complex interaction logic is required for elements on a page, you can start to use element wrappers to abstract away this too. This can help to reduce the amount of code that you need to write in your page objects, and also make it easier to maintain them. public class AddPersonPage : BasePage { public AddPersonPage(RemoteWebDriver app) : base(app) { } protected override By Trait => ByExtras.Text(\"Add Person\"); public TextInput NameInput => this.App.FindElement(By.Id(\"nameInput\")); public Select GenderSelect => this.App.FindElement(By.Id(\"genderSelect\")); public DateInput DateOfBirthInput => this.App.FindElement(By.Id(\"dateOfBirthInput\")); public Button SaveButton => this.App.FindElement(By.Id(\"saveButton\")); public PersonDetailPage AddPerson(string name, string gender, DateTime dateOfBirth) { this.NameInput.SetText(name); this.GenderSelect.SelectOptionByDisplayValue(gender); this.DateOfBirthInput.SetDate(dateOfBirth); this.SaveButton.Click(); return new PersonDetailPage(this.App); } } In this example, all the underlying common interaction for elements like Select and DateInput are abstracted away in the element wrapper, so you only need to write the logic for interacting with the elements themselves."
  },
  "articles/using-legerity/test-classes.html": {
    "href": "articles/using-legerity/test-classes.html",
    "title": "Test Classes | Legerity",
    "keywords": "Test classes Writing UI tests should be simple and easy. Legerity exposes an AppManager that is a lightweight wrapper for the application driver that allows you to start your applications using a configuration object. Using your testing framework of choice, getting your application started in the appropriate Selenium driver is as simple as calling AppManager.StartApp() passing through an AppManagerOptions configuration object for the platform you want to run your tests on. Using the Legerity base test class To make this easier for you, Legerity provides a LegerityTestClass class that you can inherit from in your test classes to start the application. The base test class is designed to manage the AppManager lifecycle for you, so you only have to call the StartApp and StopApp methods from the setup and teardown methods of your test class. This is made possible by the AppManagerOptions object that you pass through to the LegerityTestClass constructor. public class MyTests : LegerityTestClass { public MyTests() : base(new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait, }) { } [SetUp] public void SetUp() { this.StartApp(); } [TearDown] public void TearDown() { this.StopApp(); } } Taking advantage of the constructor in the LegerityTestClass class, you can also use techniques with your testing framework of choice to pass through configuration values to your test classes as a source, allowing you to run the same tests across multiple browsers or platforms. To understand more about the AppManagerOptions object, read through our App Manager documentation."
  },
  "articles/using-legerity/test-frameworks.html": {
    "href": "articles/using-legerity/test-frameworks.html",
    "title": "Test Frameworks | Legerity",
    "keywords": "Test frameworks Legerity is agnostic of .NET testing frameworks (e.g. NUnit, xUnit, MSTest, etc.) so you can work with what you know. However, there are a few things to consider when using Legerity with your preferred test framework. Running UI tests on multiple platforms The Legerity framework is capable of running the same UI tests across multiple platforms, including multiple browsers. Multiple platform test support with NUnit In NUnit, this can be achieved using a TestFixtureSource attribute to specify the AppManagerOptions to the constructor of the LegerityTestClass class. If you're using the Legerity templates , you can see an example of this in the PlatformOptions property of the BaseTestClass class. [TestFixtureSource(nameof(PlatformOptions))] public class MyTests : BaseTestClass { public MyTests(AppManagerOptions options) : base(options) { } protected static IEnumerable<AppManagerOptions> PlatformOptions => new List<AppManagerOptions> { new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false, ImplicitWait = ImplicitWait, } }; } Adding the additional platforms to the PlatformOptions property automatically ensures that tests you've written in the test class are run on each using Legerity's AppManager to manage the app lifecycle."
  },
  "articles/using-legerity/wait-conditions.html": {
    "href": "articles/using-legerity/wait-conditions.html",
    "title": "Wait Conditions | Legerity",
    "keywords": "Wait conditions When you are writing UI tests, you will often need to wait for a specific condition to be met before continuing with your test. Selenium, by default, provide mechanisms to do this using your application driver. However, the approach to implementing them requires you to write a lot of boilerplate code to wait for a condition to be met. Legerity provides a set of extensions for the application driver, page objects , and element wrappers that you can use to easily wait for a condition to be met. In addition, we have custom defined wait conditions that you can use with these methods to make the process even easier. Wait for a condition to be met When you want to wait for a condition to be met on an application driver, page object , or element wrapper , you can use the WaitUntil or TryWaitUntil extension methods. These method takes in a condition delegate that returns a boolean value indicating whether the condition has been met. Depending on the object being extended, the delegate will provide you with the instance of it so you can perform your condition check. It also has optional parameters for a timeout and the number of retries to attempt before accepting the condition has not been met. Note If the timeout is not configured, the condition will be checked immediately, and if it fails, the method will fail, throwing an exception. [Test] public void ShouldWaitForConditionToBeMetOnAppDriver() { this.App.WaitUntil( driver => driver.Title == \"Bing\", TimeSpan.FromSeconds(5), 3); } [Test] public void ShouldWaitForConditionToBeMetOnPageObject() { new HomePage(this.App).WaitUntil( page => page.SearchBox.Displayed, TimeSpan.FromSeconds(5), 3); } [Test] public void ShouldWaitForConditionToBeMetOnElementWrapper() { var inputText = \"Hello, World\"; TextBox input = this.App.FindElement(By.Id(\"input\")); input.SetText(inputText); input.WaitUntil( element => element.Text == inputText, TimeSpan.FromSeconds(5), 3); } Using Legerity wait conditions Legerity provides a set of custom wait conditions that you can use with the WaitUntil and TryWaitUntil extension methods. These conditions are designed to make it easier to wait for a specific condition to be met, such as checking the title of the app, checking the URL, or checking if elements exist. Checking if the driver title is correct You can use the WaitUntilConditions.TitleIs or WaitUntilConditions.TitleContains conditions to wait for the driver title to be the expected value. [Test] public void ShouldWaitForTitleToBeCorrect() { this.App.WaitUntil( WaitUntilConditions.TitleIs(\"Bing\"), TimeSpan.FromSeconds(5), 3); } [Test] public void ShouldWaitForTitleToContainText() { this.App.WaitUntil( WaitUntilConditions.TitleContains(\"Bing\"), TimeSpan.FromSeconds(5), 3); } Checking if the driver URL is correct You can use the WaitUntilConditions.UrlIs or WaitUntilConditions.UrlContains conditions to wait for the driver URL to be the expected value. [Test] public void ShouldWaitForUrlToBeCorrect() { this.App.WaitUntil( WaitUntilConditions.UrlIs(\"https://www.bing.com/\"), TimeSpan.FromSeconds(5), 3); } [Test] public void ShouldWaitForUrlToContainText() { this.App.WaitUntil( WaitUntilConditions.UrlContains(\"bing.com\"), TimeSpan.FromSeconds(5), 3); } Checking if an element exists with a specific locator for a driver You can use the WaitUntilConditions.ElementExists condition to wait for an element to exist with a specific locator. [Test] public void ShouldWaitForElementToExist() { this.App.WaitUntil( WaitUntilConditions.ElementExists(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking if an element exists with a specific locator for a page object You can use the WaitUntilConditions.ElementExistsInPage condition to wait for an element to exist with a specific locator. [Test] public void ShouldWaitForElementToExistInPage() { new HomePage(this.App).WaitUntil( WaitUntilConditions.ElementExistsInPage<HomePage>(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking is an element is visible with a specific locator for a driver You can use the WaitUntilConditions.ElementIsVisible condition to wait for an element to be visible with a specific locator. [Test] public void ShouldWaitForElementToBeVisible() { this.App.WaitUntil( WaitUntilConditions.ElementIsVisible(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking is an element is visible with a specific locator for a page object You can use the WaitUntilConditions.ElementIsVisibleInPage condition to wait for an element to be visible with a specific locator. [Test] public void ShouldWaitForElementToBeVisibleInPage() { new HomePage(this.App).WaitUntil( WaitUntilConditions.ElementIsVisibleInPage<HomePage>(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking is an element is not visible with a specific locator for a driver You can use the WaitUntilConditions.ElementIsNotVisible condition to wait for an element to be hidden (not visible) with a specific locator. [Test] public void ShouldWaitForElementToNotBeVisible() { this.App.WaitUntil( WaitUntilConditions.ElementIsNotVisible(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking is an element is not visible with a specific locator for a page object You can use the WaitUntilConditions.ElementIsNotVisibleInPage condition to wait for an element to be hidden (not visible) with a specific locator. [Test] public void ShouldWaitForElementToNotBeVisibleInPage() { new HomePage(this.App).WaitUntil( WaitUntilConditions.ElementIsNotVisibleInPage<HomePage>(By.Id(\"input\")), TimeSpan.FromSeconds(5), 3); } Checking a frame is available and switching to it You can use the WaitUntilConditions.FrameAvailableToSwitchTo condition to wait for a frame in the driver to be available and switch to it. [Test] public void ShouldWaitForFrameToBeAvailable() { // By frame name this.App.WaitUntil( WaitUntilConditions.FrameAvailableToSwitchTo(\"frame\"), TimeSpan.FromSeconds(5), 3); // By frame locator this.App.WaitUntil( WaitUntilConditions.FrameAvailableToSwitchTo(By.Id(\"frame\")), TimeSpan.FromSeconds(5), 3); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Legerity UI Test Framework | Legerity",
    "keywords": "Build maintainable UI tests quickly for Windows, Android, iOS, and Web apps Legerity is an automated UI testing framework for building maintainable tests quickly for native and web applications using .NET. Explore the docs Info Build with .NET Standard 2.0 App support Windows, Android, iOS, Web Browser support Chrome, Firefox, Opera, Safari, Edge, Internet Explorer Create tests with page objects Legerity provides a pattern for creating lightweight, extensible page objects representing your application pages Learn more Simplify interaction with element wrappers Easy-to-use element wrappers for common platform controls make it easier to find and interact with your app Learn more Test framework agnostic Legerity is agnostic of .NET testing frameworks (e.g. NUnit, xUnit, MSTest, etc.) so you can work with what you know Learn more Extensible by design Build custom element wrappers using the existing Legerity components for your own UI controls across platforms Learn more Support Legerity If you'd like to support Legerity, considering donating to the project Support Legerity Contribute on GitHub Legerity is open source and you can contribute on GitHub Contribute to Legerity"
  }
}